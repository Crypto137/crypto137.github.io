<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://crypto137.github.io/MHServerEmu/feed.xml" rel="self" type="application/atom+xml" /><link href="https://crypto137.github.io/MHServerEmu/" rel="alternate" type="text/html" /><updated>2023-12-25T16:21:02+03:00</updated><id>https://crypto137.github.io/MHServerEmu/feed.xml</id><title type="html">MHServerEmu Blog</title><subtitle>A volunteer-driven research project aimed at reverse engineering the technology developed by Gazillion Entertainment.</subtitle><entry><title type="html">MHServerEmu Progress Report: December 2023</title><link href="https://crypto137.github.io/MHServerEmu/blog/2023/12/25/progress-report-december-2023.html" rel="alternate" type="text/html" title="MHServerEmu Progress Report: December 2023" /><published>2023-12-25T11:00:00+03:00</published><updated>2023-12-25T11:00:00+03:00</updated><id>https://crypto137.github.io/MHServerEmu/blog/2023/12/25/progress-report-december-2023</id><content type="html" xml:base="https://crypto137.github.io/MHServerEmu/blog/2023/12/25/progress-report-december-2023.html"><![CDATA[<p><img src="/MHServerEmu/assets/blog/progress-report/2023-12/header.jpg" alt="MHServerEmu Progress Report - December 2023" /></p>

<p>Happy holidays everyone! This month and year are coming to an end, and it is time for another MHServerEmu progress report.</p>

<h2 id="game-database-update">Game Database Update</h2>

<p>In December there has been significant progress reimplementing the game database. If you have not yet read <a href="/MHServerEmu/blog/2023/11/28/progress-report-november-2023.html">the last month’s report</a>, I suggest you go and do that right now, because what is coming is very much a continuation of that post.</p>

<p>The most significant milestone we have been able to achieve this month is restoring the original hierarchy of prototypes. This allows us to understand relationships between various pieces of data and make use of them.</p>

<p>For example, MHServerEmu has a command that allows you to look up costumes, <code class="language-plaintext highlighter-rouge">!lookup costume</code>. Previously it was implemented by iterating through all data files and checking every single file path for a certain pattern. This approach has always been a temporary solution: it is slow and it relies on files being consistently named (spoiler: they are not). What we can do instead now is just get a collection of all prototypes that reference the costume blueprint. This reduces pattern matching complexity and the number of iterations we have to do, and removes the reliance on naming. To put it in simpler terms, it is much faster and more convenient.</p>

<p>The prototype hierachy is also going to be essential for implementing the property system, which is the foundation of all game entities, such as player avatars and enemies. We are going to go into more detail on this topic in a future report, once it is actually up and running.</p>

<p>Another thing this development has allowed us to do is make some charts. Exciting, am I right?</p>

<p>First we have a chart of top 30 most used prototype classes. These use standard inheritance, so there is some overlap here (e.g. all world entity prototypes are also entity prototypes).</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2023-12/top-prototype-classes.png"><img src="/MHServerEmu/assets/blog/progress-report/2023-12/top-prototype-classes.png" alt="Top 30 Most Used Prototype Classes" /></a></p>

<p>Next is top 30 most referenced blueprints. These function more like composition: entities at their core are collections of properties, such as their level or maximum health, and what properties an entity is supposed to have is defined by referencing individual property blueprints.</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2023-12/top-blueprints.png"><img src="/MHServerEmu/assets/blog/progress-report/2023-12/top-blueprints.png" alt="Top 30 Most Referenced Blueprints" /></a></p>

<p>However, while restoring the hierarchy is an important step, this is just one piece of the puzzle. Since there is a lot of interdependency between pieces of data, everything has to be loaded in the right order, or else things are going to get very messy very fast. So there has also been ongoing work on restoring various underlying systems that are going to allow us to do just that.</p>

<p>A good example of such system is on demand prototype loading. A naive approach that we used to take is to load all 93144 prototypes on startup in the order they are stored. Other than loading in the wrong order, this way we also load a lot of unnecessary data, including prototypes for cut and unfinished content, as well as debug prototypes that are disabled in shipping versions of the game. Although optimization is not really a high priority for us right now, it is still good to keep it in mind, especially when it comes as a side effect of doing something else.</p>

<p>So we have reverse engineered the solution Gazillion had: store all data in memory compressed using the <a href="https://en.wikipedia.org/wiki/LZ4_(compression_algorithm)">LZ4</a> algorithm and decompress and deserialize only what is requested. By doing it this way we not only gain control over what is loaded and in what order, but also get some convenient savings on initial memory usage and initialization time. And this is despite the fact that we now spend additional memory and time on initializing and storing the hierarchy cache!</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2023-12/memory-usage.png"><img src="/MHServerEmu/assets/blog/progress-report/2023-12/memory-usage.png" alt="MHServerEmu Initial Memory Usage" /></a></p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2023-12/game-database-initialization-time.png"><img src="/MHServerEmu/assets/blog/progress-report/2023-12/game-database-initialization-time.png" alt="MHServerEmu Game Database Initialization Time" /></a></p>

<p>This is going to be especially useful for playing solo offline on lower end hardware. For potential larger scale servers this may cause hitching if too much new data is requested at once, and for that we have implemented an option to frontload all data in the correct order that is also present in the original game.</p>

<p>As we implement additional functionality, these numbers are going to gradually go back up. However, considering the amount of unused data I mentioned previously, even after loading all the relevant data it may end up using less memory than loading everything without storing a compressed copy.</p>

<p>Despite the great progress we have had with the game database this month, there is still work to be done. As I write this, we are approaching a point where we will be able to implement proper deserialization for Calligraphy prototypes, which is the biggest roadblock for working on game systems. When that happens, we are going see more things happening in-game.</p>

<h2 id="region-generation-update">Region Generation Update</h2>

<p>Meanwhile, as I have been working mostly on the game database, Alex continues his efforts on reimplementing the procedural region generation. If you have not yet, you can check his progress in the <a href="https://github.com/AlexBond2/MHServerEmu/tree/experimental">experimental branch</a>.</p>

<p>We are lucky to have most of the logic for procedural generation in the client. However,  implementing it still proved to be a very laborious process due to how intricate and occasionally buggy the original code is. Once all the pieces are done and put together, this, along with the game database, is going to make all regions in the game explorable and, where applicable, randomly generated, as they should be.</p>

<p>To keep everything as authentic as possible and avoid future replication issues we try to stick to the disassembled original code as much as possible. This includes reimplementing even the basic building blocks that are usually already taken care of by various existing game engines these days.</p>

<p>One example of such building block are quadtrees, which is a data structure commonly used in video games for optimization. For instance, if you were to do collision detection without any tricks, you would have to check every single object against every other object, so the number of checks you would have to do would increase exponentially with the amount of objects in your game (which is the ultimate evil in computer science, also known as an O(n²) algorithm).</p>

<p>But when you think about it, it does not make any sense to check for collisions against far away objects. So it is common to divide space into sections, and do checks within each section separately. This is where quadtrees come in: they are used to divide objects into four sections (quads), but they are also trees, so each section can have subsections of its own. This may be a little difficult to grasp in writing, so here is a visualization of collision detection using quadtrees I found on YouTube:</p>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/TJzq_kjtGTc" frameborder="0" allowfullscreen=""></iframe></div>

<p>Although the Marvel Heroes game client is built using Unreal Engine 3, the game logic actually running everything is all custom Gazillion code. In a way this resembles the semi-recently released Diablo II Resurrected, where the original game is running underneath a new graphical engine. Except in the case of Marvel Heroes the “original game” does not have any graphics of its own.</p>

<p>So when we reimplement things such as quadtrees, we have to figure out and take into account all the original quirks. For example, the Marvel Heroes implementation of this data structure uses what is known as an intrusive circular linked list for storing its elements: each element is linked to elements before and after it, these links are stored within the element itself rather externally (which is why it is intrusive), and the link to the next element at the end of the list points back to the first element (circular).</p>

<p>This is just one example of the work that goes into restoring this system. The good news is, region generation is also steadily approaching testable state, and once everything is ready to combine it with the game database implementation, we are going to have a lot of fun.</p>

<h2 id="core-system-improvements">Core System Improvements</h2>

<p>In December I have also taken some time to do a pass on some of the foundational systems of MHServerEmu that could have used some extra work.</p>

<p>Previously we used a TCP server implementation ported from a Diablo III Beta server emulator that was in development in 2011-2012. This is the part of the server that handles client connections, as well as receiving and sending data. While this implementation does get the job done, it never got the chance to get polished, and it was built on an obsolete design pattern known as <a href="https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm">asynchronous programming model (APM)</a>. So this month I have written a new implementation based on the newer and hipper <a href="https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap">task-base asynchronous pattern (TAP)</a>, which is hopefully going to be cleaner and more maintainable.</p>

<p>Another piece ported from the Diablo III server is our logging system. I was mostly happy with it, however one issue it had was the fact that it was synchronous, meaning that while something was being logged nothing else could be happening on the caller thread. This was an issue for logging large quantities of messages from the main game thread, which is supposed to update on a 50 millisecond cycle. And instead of running the game, everything had to wait until messages finished printing in the console window. Now this problem is gone: log messages are now enqueued synchronously allowing us to get accurate timestamps for each message, but the output now happens asynchronously as a separate task. So the impact of logging on game performance is now just about as low as it can get without compromises.</p>

<p>Finally, as a test for doing Calligraphy prototype deserialization later on, I have improved our configuration system using the reflection capabilities of C#. This is not something that is going to affect the end user, but it has made the adding and removing of various server settings easier.</p>

<p>The end goal is to have not just something that is capable of running the game, but it also being maintainable and reasonably fast, so expect the work on this front to continue.</p>

<h2 id="miscellaneous-updates">Miscellaneous Updates</h2>

<p>Here are some additional points I would like to highlight without dedicating entire sections to them:</p>

<ul>
  <li>
    <p>We now have a tool for unpacking and packing <code class="language-plaintext highlighter-rouge">.sip</code> files. This is the first step for modding game data files. You can grab the source code for it <a href="https://github.com/Crypto137/MHServerEmu/tree/master/tools">here</a>.</p>
  </li>
  <li>
    <p>The work on documenting various versions of the game mentioned in the previous report continues. There is now <a href="https://github.com/Crypto137/MHProtobufs">a new repository</a> for documenting the evolution of the game’s network protocol.</p>
  </li>
</ul>

<hr />

<p>That’s it for today. A lot has happened this year, and even more exciting stuff awaits us in the next. See you next time!</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">MHServerEmu Progress Report: November 2023</title><link href="https://crypto137.github.io/MHServerEmu/blog/2023/11/28/progress-report-november-2023.html" rel="alternate" type="text/html" title="MHServerEmu Progress Report: November 2023" /><published>2023-11-28T03:00:00+03:00</published><updated>2023-11-28T03:00:00+03:00</updated><id>https://crypto137.github.io/MHServerEmu/blog/2023/11/28/progress-report-november-2023</id><content type="html" xml:base="https://crypto137.github.io/MHServerEmu/blog/2023/11/28/progress-report-november-2023.html"><![CDATA[<!--more-->

<p><img src="/MHServerEmu/assets/blog/progress-report/2023-11/header.jpg" alt="MHServerEmu Progress Report - November 2023" /></p>

<p>Hey everyone! Crypto here with the very first MHServerEmu progress report. I will try to do these semi-regularly to shine a light on all the latest things we are working on. Without further ado, let’s dive right in!</p>

<h2 id="game-database">Game Database</h2>

<p>While things have been on the quiet side this month, it doesn’t mean nothing is happening. Our biggest roadblock has been the game database, and its rebuilding will most likely remain our highest priority for the foreseeable future. So what is it and why does it take so long?</p>

<p>The thing is, Marvel Heroes is engineered in a way that’s somewhat unusual for an online RPG. Usually the client contains the bare minimum of information it needs to function, and one of the most time-consuming parts of reverse engineering a server for a game like this is collecting data and creating an approximation of things like where all the enemies should be, how much damage they should deal, what loot they should drop, their AI, scripting, and so on. This can be done using sophisticated tools that analyze packets received from the server, by watching what is happening in-game, or even by simply guessing in some cases. The problem is, the servers for Marvel Heroes are long gone, and it’s impossible to gather any new data, right? Not necessarily.</p>

<p>As we discovered doing our research, the game client actually contains a complete mirror of all the data used by the server. In a way, Marvel Heroes is built more like a single player game with an optional multiplayer mode, not unlike Diablo II, but where the single player functionality was stripped out at the last moment. So while the client lacks the “glue” that keeps everything together, all the individual pieces that make the game what it is, also known as prototypes, are completely preserved. But there’s a lot of pieces (there are 93114 prototypes in the version we are currently working with, and thousands more of auxiliary data files), and putting them together is tricky.</p>

<p>Gazillion developed their own custom framework for managing game data called <em>Calligraphy</em>. It appears most of the actual game was made with it, and it must have also included a set of custom tools reminiscent of programs like the Warcraft III World Editor:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2023-11/warcraft-3-trigger-editor.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2023-11/warcraft-3-trigger-editor.jpg" alt="Warcraft III Trigger Editor" /></a></p>

<p>In fact, this is a common way of developing video games, also known as data-driven design. Engineers develop a set of tools that expose various systems to game designers, who in turn define what the actual game is supposed to be through data, like what abilities should a hero have access to and how much damage should an enemy deal. These tools often contain some form of scripting functionality that allows designers to also define behaviours (like the trigger editor from Warcraft III shown on the screenshot above).</p>

<p>So while we do have all the original data for Marvel Heroes, to make use of it we also need to reverse engineer the framework it ran on. Calligraphy is a pretty powerful one: it features pretty advanced scripting capabilities and was used to define enemy AI, mission logic, damage formulas, and much more. And as we know, with great power comes great responsibility: there is a lot of moving parts, and just setting everything up requires a lot of steps.</p>

<p>A good example of this is the hierarchy of data:</p>

<ul>
  <li>
    <p>To interface with loaded data, there are over a thousand C++ classes that heavily rely on inheritance.</p>
  </li>
  <li>
    <p>Data is deserialized into these classes using a combination of blueprint and prototype files: blueprints contain field definitions, and prototypes contain the actual values.</p>
  </li>
  <li>
    <p>Each blueprint is paired with a default prototype that contains default values for a given blueprint. Most of the prototypes that are actually used in the game inherit from these default prototypes and override values as needed. For example, there is a blueprint / default prototype for an avatar, and prototypes for each playable hero override this default avatar prototype. This is a simple example, but there are often multiple levels of data inheritance here.</p>
  </li>
  <li>
    <p>Blueprints have their own inheritance that is really more like composition: each blueprint defines its own field group, but it can also reference other blueprints. And then a prototype gets its field groups from the blueprint it is directly bound to and all the other blueprints referenced in it.</p>
  </li>
  <li>
    <p>Some prototypes have “mix-in” prototypes that you are supposed to pass some of the field groups to.</p>
  </li>
  <li>
    <p>There are also resource prototypes that completely ignore everything mentioned above and use custom deserialization routines. However, they still fit into the same C++ class hierarchy.</p>
  </li>
</ul>

<p>As you can see, there’s a lot to unwrap here, and the devil is in the details. So figuring out all of this has been very time consuming, but progress is definitely being made. And once we get it all up and running, it’s going to open the way for implementing all sorts of in-game systems.</p>

<h2 id="mhdataparser">MHDataParser</h2>

<p>When we began investigating what data even was present in the client, we started by examining various file types on their own, and that led to the server emulator getting some data parsing and exporting functionality. As our understanding of the bigger picture grew, it became evident that rather than using the data structures present in the files as is, the game actually does a significant amount of post-processing during initialization. So it became harder and harder to maintain this functionality as our implementation of the game database matured.</p>

<p>However, there is a lot of value to having raw data parsed and represented as is in a more readable format. It’s more version-agnostic, it can be used for datamining, and eventually it can even be expanded for modding game data. So, to keep the main codebase clean while not losing anything, I separated raw data parsing into a separate tool called <a href="https://github.com/Crypto137/MHDataParser">MHDataParser</a>. I tested it with various builds of the game, and so far it seems to work on PC clients going as far back as June 2015, as well as console ports. It won’t work with 2013-2014 versions of the game due to data archive format differences, but implementing support for them is definitely possible in the future.</p>

<p>It’s essentially a piece cut from an older MHServerEmu version, so it works very similarly: you copy game data files to the tool’s subdirectory, run it, wait for it to initialize, and then enter commands to export the data you want to human-readable JSON/TSV files. However, all the file definitions are up to date with the latest versions of the server, and there’s even a little bit of extra functionality that allows you to parse and export locale and string files.</p>

<p>As I was working on this, I made a pretty hilarious discovery: in earlier versions of the game there is a hidden “Pig Latin” localization that was used for testing:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2023-11/pig-latin-login-screen.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2023-11/pig-latin-login-screen.jpg" alt="Pig Latin Login Screen" /></a></p>

<p>And with a little bit of file renaming, hex editing, and config adjustment I was able to get it running in version 1.52:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2023-11/pig-latin-mission-log.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2023-11/pig-latin-mission-log.jpg" alt="Pig Latin Mission Log" /></a></p>

<p>Not even S.H.I.E.L.D. Agent Stan Lee is safe from it (or should I say, Say.Hay.Iay.Eay.Lay.Day Agentay Anstay Eelay):</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2023-11/pig-latin-stan-lee.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2023-11/pig-latin-stan-lee.jpg" alt="Pig Latin Stan Lee" /></a></p>

<p>Having fun aside, this is actually a working proof-of-concept for translating the game into more languages. And way more ambitious mods may also be possible far in the future.</p>

<h2 id="region-generation">Region Generation</h2>

<p>Even though a lot of our efforts has gone into solving the game database conundrum, Alex has also been working very hard on reverse engineering procedural region generation. While it’s still very much work-in-progress. I will give you a brief overview of what it entails.</p>

<p>As you probably know, Marvel Heroes has a lot of Diablo DNA that brings with it heavy reliance on procedural generation, so every time you play the game you can explore slightly different zones, fight different enemies, and get random loot. The game world is actually structured like this:</p>

<ul>
  <li>
    <p>There is a number of <em>games</em> running on a server. Each game is very similar to games on Battle.net in Diablo II, but you transition in and out of them seamlessly.</p>
  </li>
  <li>
    <p>Each game hosts a number of <em>regions</em>, which are places like Avengers Tower, Midtown, and so on. As you transition between regions, you also often transfer between different games and even servers.</p>
  </li>
  <li>
    <p>Each region consists of <em>areas</em> that have their own names and other characteristics. You can go to different areas in a region without a loading screen by moving around. For example, in the Madripoor region the first area would be Buccaneer Beach, from which you can go to Bamboo Forest, and then eventually reach Lowtown.</p>
  </li>
  <li>
    <p>Each area is built from <em>cells</em>, which are basic building blocks of the game world.</p>
  </li>
</ul>

<p>The way Marvel Heroes approaches area generation is actually very similar to Diablo III, and I highly recommend watching <a href="https://www.youtube.com/watch?v=tUFvhDOPA_w">this talk on Diablo Dungeon Design</a> by Ed Hanes from Blizzard, where he goes quite in-depth and even demonstrates some of their internal tools. Unfortunately, the video is age-restricted, so I can’t embed it here, but I will add some of the slides relevant to Marvel Heroes.</p>

<p>Cells, just like tiles in Diablo, are classified by their cardinal directions:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2023-11/diablo-3-cardinal-directions.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2023-11/diablo-3-cardinal-directions.jpg" alt="Diablo III Tile Cardinal Directions" /></a></p>

<p>These cells are combined into areas according to sets of rules defined by game designers in development tools like these:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2023-11/diablo-3-procedural-layout.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2023-11/diablo-3-procedural-layout.jpg" alt="Diablo III Procedural Layout" /></a></p>

<p>Marvel Heroes uses a number of different region and area generators for various cases:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2023-11/region-generators.png"><img src="/MHServerEmu/assets/blog/progress-report/2023-11/region-generators.png" alt="Diablo III Procedural Layout" /></a></p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2023-11/area-generators.png"><img src="/MHServerEmu/assets/blog/progress-report/2023-11/area-generators.png" alt="Diablo III Procedural Layout" /></a></p>

<p>Some regions are actually static and do not use procedural generation. But they still follow the same general rules and are built out of cells: regions like Avengers Tower can get away with using a single huge cell, while places like Midtown are collections of regular cells in a predefined layout, also known as a district.</p>

<p>Region generation heavily relies on data from the game database, so it won’t be out for a little while, but there may be something exciting happening in the experimental branch sooner.</p>

<h2 id="documentation">Documentation</h2>

<p>Another thing that happened this month is that I took some time to overhaul our <a href="https://github.com/Crypto137/MHServerEmu/blob/master/docs/Index.md">documentation</a>:</p>

<ul>
  <li>
    <p>All existing information was restructured and updated with latest discoveries.</p>
  </li>
  <li>
    <p>There are two new sections: <em>Networking</em> lays out some of our understanding of the client &lt;-&gt; server communication, while <em>Game Data</em> focuses on the intricacies of file formats, prototypes, and all the other game database related topics.</p>
  </li>
</ul>

<p>While it’s still nowhere near its final form, hopefully this will help potential developers get up to speed with what we’ve been doing. When I first started doing this, the lack of pretty much any publicly available technical information on Marvel Heroes was one of the hardest hurdles to overcome, especially when compared to many other well-documented online games.</p>

<p>If you have any suggestions for topics you would like to see covered, be sure to let us know!</p>

<h2 id="version-research">Version Research</h2>

<p>On a separate note, I’ve been doing some digging into the various versions of Marvel Heroes that we have access to. As you may know if you’ve read our documentation, there are almost 700 different client builds still available to download from Steam if you have ever played the game and still have a license on your account. So what I’ve been doing is downloading and documenting every single one of them. It’s a massive amount of data to go through, and you may wonder if it’s even worth doing. In my opinion, it is, for three reasons: preservation, getting additional data to reference, and finding internal builds.</p>

<p>Preservation should be pretty self-explanatory. As a live service game, Marvel Heroes went through a lot, and many of these moments were rather fleeting. Be it resource gathering to open the Bifrost for the very first time, some event you spent a few too many hours grinding through the night, or just a memorable login screen, to have definitive records of all of this we need old versions of the game.</p>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/GZul9BIN4F0" frameborder="0" allowfullscreen=""></iframe></div>

<p>Another important result of this task is getting additional data to reference, which can be extremely useful for development. A very good example of this is version 1.25 released on July 31, 2014. The following was mentioned in the <a href="https://web.archive.org/web/20150101185936/http://forums.marvelheroes.com/discussion/118449/marvel-heroes-2015-1-1-patch-notes">patch notes</a> by the infamous master of spoilers Doomsaw himself:</p>

<blockquote>
  <p>This update features major changes to how the game processes certain aspects of data, including how data it transmitted to you and players around you.</p>

  <p>This will result in a decent improvement to server performance as well as client performance, depending on your exact system specs, CPU and GPU.</p>
</blockquote>

<p>To explain what it really means we need to go through some fundamental aspects of the game’s netcode. At the heart of it are Google’s Protocol Buffers (protobufs): in case you are unfamiliar with them, they are kind of like XML or JSON, but instead of human-readable text files your data is serialized into binary using a custom <em>wire format</em>. They are widely used in video games (for example, Blizzard does a lot of Battle.net communication with protobufs), however they are a general-purpose technology that can be sub-optimal in cases where you have thousands of messages to process, and every microsecond counts.</p>

<p>To work around this, Gazillion developed a custom archive system based on the protobuf wire format. Without going too in-depth here, what they essentially did is cut all the extra bells and whistles that make protobufs more flexible while keeping all the tricks that reduce message size and serialization time. And a significant part of the optimizations done in 1.25 is actually taking some of the “heavier” and frequently used protobuf messages (<code class="language-plaintext highlighter-rouge">NetMessageEntityCreate</code>, <code class="language-plaintext highlighter-rouge">NetMessageLocomotionStateUpdate</code>, <code class="language-plaintext highlighter-rouge">NetMessageActivatePower</code>, <code class="language-plaintext highlighter-rouge">NetMessagePowerResult</code>, and <code class="language-plaintext highlighter-rouge">NetMessageEntityEnterGameWorld</code>), and expanding the custom archive system to include them.</p>

<p>For example, let’s take a look at <code class="language-plaintext highlighter-rouge">NetMessageEntityEnterGameWorld</code> as it was in 1.24:</p>

<div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">NetMessageEntityEnterGameWorld</span> <span class="p">{</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">entityId</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">required</span> <span class="n">NetStructPoint3</span>    <span class="na">position</span>    <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">optional</span> <span class="n">NetStructPoint3</span>    <span class="na">orientation</span>    <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">int32</span>    <span class="na">avatarWorldInstanceId</span>    <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
    <span class="k">optional</span> <span class="n">NetStructLocomotionState</span>    <span class="na">locomotionState</span>    <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">uint64</span>    <span class="na">entityPrototypeId</span>    <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">bool</span>    <span class="na">isClientEntityHidden</span>    <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">bool</span>    <span class="na">newOnServer</span>    <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">NetStructLocomotionState</span> <span class="p">{</span>
    <span class="k">optional</span> <span class="kt">uint32</span>    <span class="na">locomotionflags</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">int32</span>    <span class="na">method</span>    <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">float</span>    <span class="na">movespeed</span>    <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">uint32</span>    <span class="na">height</span>    <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">uint64</span>    <span class="na">followentityid</span>    <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">float</span>    <span class="na">followentityrange</span>    <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">updatepathnodes</span>    <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
    <span class="k">repeated</span> <span class="n">NetStructLocomotionPathNode</span>    <span class="na">pathnodes</span>    <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">int32</span>    <span class="na">pathgoalnodeindex</span>    <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">NetStructLocomotionPathNode</span> <span class="p">{</span>
    <span class="k">required</span> <span class="n">NetStructPoint3</span>    <span class="na">vertex</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">int32</span>    <span class="na">vertexSideRadius</span>    <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And here is <code class="language-plaintext highlighter-rouge">NetMessageEntityEnterGameWorld</code> in 1.25+:</p>

<div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">NetMessageEntityEnterGameWorld</span> <span class="p">{</span>
    <span class="k">required</span> <span class="kt">bytes</span>    <span class="na">archiveData</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>As you can see, a side effect of this optimization is that some messages became a lot less verbose, and therefore less readable. Although it is possible to figure out the overall structure by decompiling and examining the deserialization routine, it takes more time to do blindly, and you have to guess most of the field names. So in some cases looking at older versions of the game can provide invaluable insight for reverse engineering the more recent builds.</p>

<p>Finally, not all builds are made equal. Most publicly available game clients are compiled using the <code class="language-plaintext highlighter-rouge">Shipping</code> configuration that automatically removes all the spicy stuff, such as the developer console and cheats. On the other hand, <code class="language-plaintext highlighter-rouge">Internal</code> builds contain everything but the kitchen sink (and even that after Deadpool’s level 52 review). For instance, MichaelMayhem and Ryolnir demonstrated some of their dev might during the <a href="https://www.youtube.com/watch?v=MekhABg5gCo">Rogue preview livestream</a> in August 2014:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2023-11/internal-cheats.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2023-11/internal-cheats.jpg" alt="MichaelMayhem and Ryolnir using cheats" /></a></p>

<p>Turns out, there was a number of slip-ups, and some of these internal builds actually ended up being uploaded to Steam. So far I’ve found five of them, with the earliest one being <code class="language-plaintext highlighter-rouge">1.10.0.69</code> from late May 2013, and the newest so far is <code class="language-plaintext highlighter-rouge">1.0.4932.0</code> from June 2015. While we have no way of getting them up and running right now, eventually it’s going to be possible, and we may end up being able to access forbidden powers reserved only for the few. Exciting!</p>

<hr />

<p>And this wraps it up for today. Thanks for reading (or scrolling) all the way to the end, and I hope to see you all again next time!</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry></feed>