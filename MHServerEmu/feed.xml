<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://crypto137.github.io/MHServerEmu/feed.xml" rel="self" type="application/atom+xml" /><link href="https://crypto137.github.io/MHServerEmu/" rel="alternate" type="text/html" /><updated>2025-06-29T11:08:20+03:00</updated><id>https://crypto137.github.io/MHServerEmu/feed.xml</id><title type="html">MHServerEmu Blog</title><subtitle>A volunteer-driven research project aimed at reverse engineering the technology developed by Gazillion Entertainment.</subtitle><entry><title type="html">MHServerEmu Progress Report: June 2025</title><link href="https://crypto137.github.io/MHServerEmu/blog/2025/06/29/progress-report-june-2025.html" rel="alternate" type="text/html" title="MHServerEmu Progress Report: June 2025" /><published>2025-06-29T11:00:00+03:00</published><updated>2025-06-29T11:00:00+03:00</updated><id>https://crypto137.github.io/MHServerEmu/blog/2025/06/29/progress-report-june-2025</id><content type="html" xml:base="https://crypto137.github.io/MHServerEmu/blog/2025/06/29/progress-report-june-2025.html"><![CDATA[<p><img src="/MHServerEmu/assets/blog/progress-report/2025-06/header.jpg" alt="MHServerEmu Progress Report - June 2025" /></p>

<p>Apparently this is the 20th Progress Report. Crazy stuff.</p>

<h2 id="mhserveremu2013">MHServerEmu2013</h2>

<p>Continuing Gazillion’s tradition of having anniversary celebrations in June, this month we have not only released 0.6.0, but also published the current work-in-progress source code for <a href="https://github.com/Crypto137/MHServerEmu2013">MHServerEmu2013</a> - a version of the server emulator that supports game version 1.10 from 2013. This is the “vanilla” version of the game, which means:</p>

<ul>
  <li>
    <p>Original selection of 22 playable heroes before any of their level 52 reviews and other reworks.</p>
  </li>
  <li>
    <p>Original versions of all the story regions, including The Raft having a funicular ride section.</p>
  </li>
  <li>
    <p>Original endgame content consisting of green and red Terminals, Group Challenges, and the Limbo Survival Challenge.</p>
  </li>
  <li>
    <p>PvP 1.0, which is actually somewhat fun.</p>
  </li>
  <li>
    <p>Hero unlocks via random drops instead of Eternity Splinters.</p>
  </li>
</ul>

<p>This is still very early work, so most of the gameplay aspects are not really functional yet, but I have made significant progress in backporting various fundamental features. You can load into the game, explore the world, and try out some of the old powers on target dummies in the Training Room, all with basic multiplayer support. Overall I would say the current state of MHServerEmu2013 is mostly equivalent to version 0.2.0 of the main server project.</p>

<p>I should note that 1.48, which is the final pre-BUE version of the game, is still the priority as soon as we reach the 1.0 milestone next year. MHServerEmu2013 is a side project I have been working on from time to time, and there are no timeframes on when it is going to be fully playable.</p>

<h3 id="how-its-done">How It’s Done</h3>

<p>Supporting game version 1.10 presents a unique set of challenges:</p>

<ul>
  <li>
    <p>The game’s code is significantly older than 1.48/1.52/1.53, so it predates various large scale refactoring efforts that occured over the game’s lifespan.</p>
  </li>
  <li>
    <p>1.10 does not have Mac support, so we do not have access to debug symbols for this version. The earliest Mac build that has been archived is for game version 1.25, which is over a year newer.</p>
  </li>
  <li>
    <p>We do not have any packet captures for 1.10, so in some cases more trial-and-error is required to figure out the correct way to respond to the client.</p>
  </li>
</ul>

<p>There is a bit of a silver lining to 1.10 though: we have an <em>Internal</em> build of the client, 1.10.0.69, dated late May 2013. I have talked about differences between Internal and Shipping build configurations in previous reports, but to give a quick refresher, this is effectively the final beta build with various debug features enabled. This includes access to the debug HUD, game state visualization functionality, and more.</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-06/internal-build-screenshot.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-06/internal-build-screenshot.jpg" alt="Marvel Heroes 1.10.0.69" /></a></p>

<p>By default MHServerEmu2013 supports build 1.10.0.643, which is the final Shipping build of 1.10 from July 2013. By specifying the <code class="language-plaintext highlighter-rouge">BUILD_1_10_0_69</code> conditional compilation symbol the server can also be built for the aforementioned Internal build.</p>

<p>So where do you start with supporting a different version of the game? The very first thing you need to do is extract network protocol information from the client and use it to generate message serialization code for the server. I have covered this process in the <a href="/MHServerEmu/blog/2024/04/30/progress-report-april-2024.html">April 2024 report</a>, but 1.10 specifically has a catch about this. Back then the game used a latency buffer for some of the server to client messages, which should in theory improve client-server synchronization at the cost of extra latency. In practice this means that some network messages need to be timestamped, which is implemented via a protobuf <em>extension field</em>. The existing tools we use to extract protocol information do not support protobuf extension fields, so some additional work was required to handle this.</p>

<p>Now that we can communicate with the client, we can load into the game. However, there is a problem: the client blocks movement input when your hero is dead, and anything with 0 health is automatically considered dead. This means you cannot move around without setting your hero’s health to something higher than 0. To set the value of the <code class="language-plaintext highlighter-rouge">Health</code> property you need to know its index, which differs from version to version. Thankfully, this aspect works in 1.10 basically the same as later versions: the client executable contains a statically allocated lookup table of all properties, which can be extracted relatively easily.</p>

<p>These two things are enough to just load into the game and run around a region that does not use procedural generation, such as Avengers Tower. This is exactly how I did <a href="https://github.com/Crypto137/MHServerEmuMini">MHServerEmuMini</a> about a year ago.</p>

<p>As you probably know if you have been following these reports, <em>prototypes</em> are data structures used to define basically everything in the game, and no further progress could be made without them. There are only minor differences between 1.10 and 1.52 in how the prototype system works: the game still uses the GRTTI system to map Calligraphy blueprints to C++ classes, but not having debug symbols from the Mac version made extracting the data structures for C++ classes from the client more difficult. Another issue was related to how the prototype files are stored in 1.10: it uses a regular SQLite database with blobs for each file instead of a proprietary archive format, so IO changes were required to load everything into our server.</p>

<p>I want MHServerEmu2013 to share as much code with the main server as possible, so rather than modifying how the server loads prototypes, I approached this from the opposite direction. I made a tool called <a href="https://github.com/Crypto137/MHSqlitePakRepacker">MHSqlitePakRepacker</a>, which can be used to convert legacy SQLite-based <code class="language-plaintext highlighter-rouge">.sip</code> archives to the proprietary format used by later versions of the game. It made the 1.10 prototype data compatible with not just the server, but also our other tools, like <a href="https://github.com/Crypto137/MHDataParser">MHDataParser</a> and <a href="https://github.com/Crypto137/OpenCalligraphy">OpenCalligraphy</a>. This lead to me solving the issue of getting prototype data structures: rather than trying to extract static GRTTI data, I instead implemented C# code generation using Calligraphy blueprints. The generated code needs some manual cleanup for long-term server usage, such as adding enums, reordering fields, and adjusting data types, but it is good enough to deserialize the entire game database even without any of this. Being able to generate code like this also made comparing prototype structures from different versions of the game much easier.</p>

<p>This was the breakthrough I needed to start really digging into 1.10 and figuring how much the game logic differs from 1.52. Is some ways it turned out to be not as much as I expected. For instance, I was able to backport region generation code in just a day, and I was not very familiar with this code. The only relatively major difference was the fact that 1.10 has no support for road generation, which was added for Chapter 9 regions, so some of the code needed to be removed.</p>

<p>From what I can tell, the biggest fundamental difference is in how the game handles AI. In addition to the <code class="language-plaintext highlighter-rouge">ProceduralAI</code> system used in later versions of the game, 1.10 also has an alternative <code class="language-plaintext highlighter-rouge">Brain</code> subtype called <code class="language-plaintext highlighter-rouge">BehaviorTree</code>. Both subtypes store their state in a <code class="language-plaintext highlighter-rouge">BehaviorBlackboard</code> and execute actions by entering various <code class="language-plaintext highlighter-rouge">StaticAI</code> states, and the difference lies in how the logic is defined: <code class="language-plaintext highlighter-rouge">BehaviorTree</code> is a fully data-driven system, while <code class="language-plaintext highlighter-rouge">ProceduralAI</code> uses data only as parameters for compiled C++ code. <code class="language-plaintext highlighter-rouge">BehaviorTree</code> is likely the older system, which provided more flexibility to game designers via Gazillion’s internal tools, but its performance was probably not good enough. I suspect for this reason the developers implemented the more optimized <code class="language-plaintext highlighter-rouge">ProceduralAI</code> subtype and gradually replaced designer-defined trees with more performant code written by programmers. It appears they were in the middle of this process when the game was released, so while a lot of entities use the newer system, some of them, mainly bosses, still rely on the legacy system. The good news is that <code class="language-plaintext highlighter-rouge">BehaviorTree</code> was fully phased out only by version 1.35 in June 2015, so we have a whole bunch of Mac builds that still support this system.</p>

<p>Version 1.10 also makes much heavier use of the <code class="language-plaintext highlighter-rouge">RepVar</code> system, which assigns ids to individual fields of replicated data structures. For instance, the data required to display map icons for faraway entities (<code class="language-plaintext highlighter-rouge">MapPosition</code>, <code class="language-plaintext highlighter-rouge">MapOrientation</code>, <code class="language-plaintext highlighter-rouge">MapRegionId</code>, <code class="language-plaintext highlighter-rouge">MapAreaId</code>, and <code class="language-plaintext highlighter-rouge">MapCellId</code>) is replicated using properties in 1.52, but 1.10 uses five <code class="language-plaintext highlighter-rouge">RepVar</code> fields in the <code class="language-plaintext highlighter-rouge">WorldEntity</code> class, each with its own replication id. Just like with AI, it appears Gazillion was in the middle of transitioning away from using the <code class="language-plaintext highlighter-rouge">RepVar</code> system when 1.10 was released, which contributed to some confusion when I was investigating this. To move around in the game world entities need to have a <code class="language-plaintext highlighter-rouge">Locomotor</code> component; if an entity does not have one, it cannot move. Movement is replicated to clients by sending the <code class="language-plaintext highlighter-rouge">LocomotionState</code> of the <code class="language-plaintext highlighter-rouge">Locomotor</code> instance, and it looks like at some point prior to 1.10 this was also replicated using <code class="language-plaintext highlighter-rouge">RepVar</code> fields instead of dedicated messages. This change must have happened not long before 1.10, because the <code class="language-plaintext highlighter-rouge">Locomotor</code> class still has a replication id field even though it no longer uses the <code class="language-plaintext highlighter-rouge">RepVar</code> system. And because whether an entity has a <code class="language-plaintext highlighter-rouge">Locomotor</code> component is defined by its prototype, we have a situation where only <em>some</em> entities require an extra useless id written in the middle of their data. Figuring all of this out would have been a lot easier if we had a packet capture for 1.10, but unfortunately the only thing we have to rely on is digging into the client code and cross-referencing it with newer versions of the game, which is a lot more time consuming.</p>

<p>In conclusion, every major feature needs to be untangled, reevaluated, and cleaned up, but I can see a path to how the entirety of 1.10 can be restored. I will continue working on this as a side project, but, as I already mentioned, the priority still lies with the main 1.52/1.48 server for now.</p>

<h2 id="crafting">Crafting</h2>

<p>Returning to the present, this month I tried to get the gameplay side of the server as close to a feature complete state as possible before I return to my backend work. The largest remaining feature was crafting, which is where most of my efforts went into this month.</p>

<p>“Crafting” is less of its own system, and more of an umbrella term that covers various aspects of the item system that needed to be finished. The first thing on this list was implementing stack splitting, which also included additional validation to prevent potential duping.</p>

<p>Next, I needed to implement some missing functionality of the item rolling system. To apply changes to existing items, referred to as <em>mutations</em>, what you actually need to do is use your existing item to fill out a template, and then use this template to roll a <em>new</em> item. This template is represented by an instance of the <code class="language-plaintext highlighter-rouge">LootCloneRecord</code> class, and mutations are applied to it via various subtypes of the <code class="language-plaintext highlighter-rouge">LootMutationPrototype</code> class. In total there are 21 mutation types, which cover adding/removing affixes, rerolling values by changing the seed, and adjusting other parameters, like level and rarity.</p>

<p>The crafter NPCs you interact with are implemented as special vendor types. Each recipe available to craft is an item in a vendor inventory, and when you learn a new recipe from a consumable item, this item is transferred to the vendor inventory corresponding to the recipe. Although these are “vendor” inventories, they all actually belong to your player entity, which is what allows you to have the same selection of recipes available when you interact with any crafter NPC of a specific type.</p>

<p>Each recipe consists of two main parts: <code class="language-plaintext highlighter-rouge">RecipeInputs</code> and <code class="language-plaintext highlighter-rouge">RecipeOutputs</code>. <code class="language-plaintext highlighter-rouge">RecipeInputs</code> specifies a set of ingredients that is required to craft a recipe. There are three categories of ingredients:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">RestrictionSetInput</code> - any item manually provided by the player that matches the specified filters (e.g. any item of Unique rarity).</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">AllowedItemListInput</code> - any item manually provided by the player from a list of specific items.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">AutoPopulatedInput</code> - a specific item that is automatically retrieved from player inventories.</p>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">RecipeOutputs</code> is just a loot table that is used to roll the resulting items. Ingredients provided as inputs are exposed to this loot table, allowing it to fill out <code class="language-plaintext highlighter-rouge">LootCloneRecord</code> instances mentioned above if necessary. If the output table rolls successfully, the new items are added to the <code class="language-plaintext highlighter-rouge">PlayerCraftingResults</code> inventory, and the provided ingredients are destroyed. Recipes can also have currency costs, which are paid when ingredients are destroyed. Creating new items and destroying provided ingredients at the same time creates the illusion that the provided items are modified, but the items you get are actually “clones” of your ingredients with mutations applied to them.</p>

<p>Most of my time went into implementing and testing various mutation types. One silly bug I discovered while doing this involved runewords. Runeword tooltips are supposed to include icons of runes used in the recipe, but for some mysterious reason sometimes you would get items with no icons:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-06/runeword-icon-bug.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-06/runeword-icon-bug.jpg" alt="Runeword Icon Bug" /></a></p>

<p>After some investigation I figured it out. Because crafting generates new items by rolling, runeword affixes are applied by creating a pool of affixes limited just to the ones required for the recipe, and then applying the entire pool. This is the same basic process that is used to roll prefixes and suffixes on random items, so the order of runeword affixes is also random. Only one affix in a runeword references the set of icons that needs to be displayed in the tooltip, and in version 1.52 there is a client bug where it stops looking for rune icon sets if the first affix does not have one. Because of this, icons would be shown only when the icon affix would randomly roll first. As a workaround, I added code that ensures that rune icon affixes are always inserted into the affix list as the first element.</p>

<p>And this is all there really is to the crafting system. With it implemented, I now consider the game to be in a feature-complete state a single player experience, and I feel comfortable shifting my focus towards more social aspects.</p>

<h2 id="the-little-things">The Little Things</h2>

<p>While I have been doing a lot of testing as I was working on various features (I must have completed the Times Square tutorial over 50 times at this point), I have not taken too much time to actually play the game as a normal player. Now that I feel the game is in a solid state as a single player experience, I decided to take a small break from working on major features and just play the game for a bit. I started a new account on a local server with no cheats, no auto-unlocks, and all rates set to x1.</p>

<p>As I was doing this, I took note of minor things that would be easy to fix. One example of this is the store catalog: early in the development process I ran a script to add all costumes available in the client to the catalog. While it was fun to mess around with at the time, I felt it was too messy now, so I went back and cleaned it up. I have removed all the costumes that are not supposed to be in the store, like default costumes, fortune card costume, and non-functional dev costumes, and restored the original prices for everything else using the Marvel Heroes Compendium by Mjoll as reference. I have also added character and stash unlocks for “removed” heroes (Fantastic Four and Silver Surfer), so it is now possible to get them without using chat commands.</p>

<p>One thing that was bothering me quite a lot was the artifact drop rate situation. There were reports from players about it not feeling right pretty much from the moment the loot system was first implemented, but I could not find any problem with the code. I thought maybe, although unlikely, the missing loot system features related to crafting have some kind of indirect effect on drop rates. Well, all the features were now implemented, I played through the whole campaign, and got a grand total of 0 (zero) artifact drops, not counting guaranteed mission rewards. Something was absolutely wrong with it, so I took another look at it.</p>

<p>There are many loot tables that can roll artifacts, but most of them are used for targeted drops in specific content, like boss artifacts in terminals. The table that is used to roll the actually random artifact drops, which includes the vast majority of lower level artifacts, is called <code class="language-plaintext highlighter-rouge">SpecialsArtifactsRespec</code> (originally it was also used to roll Retcon Devices, therefore the name). We now have much better tools to explore the changes made over the game’s history, and I decided to see if this is an issue with version 1.52 specifically. I compared it to 1.48, and my hunch was correct:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-06/the-great-artifact-scam-of-2017.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-06/the-great-artifact-scam-of-2017.png" alt="The Great Artifact Scam of 2017" /></a></p>

<p>Gazillion <em>reduced the random artifact drop rate by 99.9%</em> at some point between December 20, 2016 and September 7, 2017. But surely this must be a bug or something, right? I checked all the individual builds, and found the exact one where this change was introduced: 1.50.0.402, released on February 10, 2017, a few weeks after the infamous Biggest Update Ever. The patch notes for this version are <a href="http://web.archive.org/web/20170222211727/https://forums.marvelheroes.com/discussion/312743/marvel-heroes-2016-2-03-patch-notes">archived</a>, so we can still take a look at them:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-06/ssb-patch-notes.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-06/ssb-patch-notes.png" alt="SSB Patch Notes" /></a></p>

<p>Time to put my tinfoil hat on, because it appears I might have uncovered a bona fide conspiracy: it appears Gazillion secretly nerfed artifact drop rate to make S.H.I.E.L.D. Supply Boosts the primary source of random artifact drops and push people to buy them. This change was most likely aimed at new players they were expecting with the launch of the console version, and it went largely unnoticed by veteran PC players, who were occupied with grinding targeted boss drops, which are not affected by this. However, now that everyone has to start from scratch, this change has a very clear effect on player experience. Furthermore, these random artifact drops are affected by special item find (SIF), so this change also essentially nerfs all older SIF boosts.</p>

<p>Nightly builds of the server now include a data patch that reverts this change, restoring “natural” artifact drops. I have also looked through other data changes made in build 1.50.0.402, but I have not found anything else that could be considered a stealth nerf.</p>

<p>I will most likely continue playing and investigating smaller issues like this, but starting next month I plan to put most of my efforts into the backend again to get as many of the highly anticipated social features as possible ready in time for 0.7.0’s release in September.</p>

<hr />

<p>This is it for today. See you all in July.</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">MHServerEmu Progress Report: May 2025</title><link href="https://crypto137.github.io/MHServerEmu/blog/2025/05/28/progress-report-may-2025.html" rel="alternate" type="text/html" title="MHServerEmu Progress Report: May 2025" /><published>2025-05-28T23:40:00+03:00</published><updated>2025-05-28T23:40:00+03:00</updated><id>https://crypto137.github.io/MHServerEmu/blog/2025/05/28/progress-report-may-2025</id><content type="html" xml:base="https://crypto137.github.io/MHServerEmu/blog/2025/05/28/progress-report-may-2025.html"><![CDATA[<!--more-->

<p><img src="/MHServerEmu/assets/blog/progress-report/2025-05/header.jpg" alt="MHServerEmu Progress Report - May 2025" /></p>

<p>May this Progress Report be with you.</p>

<h2 id="leaderboards">Leaderboards</h2>

<p>After many trials and tribulations, the leaderboard system is finally in a production-ready state, and it is now available in nightly builds and on public community servers:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-05/nice.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-05/nice.jpg" alt="Leaderboards" /></a></p>

<p>While it may seem like a relatively simple system on its surface, it is actually somewhat more involved than it looks:</p>

<ul>
  <li>
    <p>This is our first properly implemented cross-game social system that requires extensive bidirectional communication between game instances and a separate service, so our service system needed some major upgrades to handle it.</p>
  </li>
  <li>
    <p>There is a relatively large amount of data that needs to be handled, because we need to store data not just for active leaderboards, but also archived leaderboard instances that ran in the past. This meant the Leaderboard Service needed to be backed by a database.</p>
  </li>
  <li>
    <p>Leaderboards operate on relatively long time cycles (from 4 hours to a week in most circumstances), which made real world testing time consuming.</p>
  </li>
</ul>

<p>The overall structure looks like this:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-05/leaderboard-service.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-05/leaderboard-service.png" alt="Leaderboard Service" /></a></p>

<ul>
  <li>
    <p>The Leaderboard Service manages leaderboard instances and notifies game instances of any leaderboard state changes.</p>
  </li>
  <li>
    <p>Game instances use a tracking system similar to the one utilized by the achievement system to track player scores for active leaderboards.</p>
  </li>
  <li>
    <p>Player scores are batched and periodically sent from game instances to the Leaderboard Service, where they are accumulated, sorted, and cached.</p>
  </li>
  <li>
    <p>When a client requests leaderboard score data from a game instance, this request is relayed to the Leaderboard Service, which retrieves score data from its cache and generates a <code class="language-plaintext highlighter-rouge">LeaderboardReport</code>. This report is then relayed back to the client through the game instance.</p>
  </li>
  <li>
    <p>When leaderboard instances expire, the Leaderboard Service distributes participation rewards to players. These rewards are recorded in the database, so even if a participant is not online when a leaderboard expires, they will receive their reward when they log in at any point in the future.</p>
  </li>
</ul>

<p>In contrast to achievements, which can be added and removed with just server-side adjustments, leaderboards are fully defined by prototypes. Prototypes are mirrored to the client at build time, so this unfortunately means it is not possible to add new leaderboards without modifying the client. In total there are 27 usable leaderboard prototypes in version 1.52. Some leaderboard functionality, like guild leaderboards, is not usable, because there are no valid leaderboard prototypes utilizing it.</p>

<p>While leaderboards took longer to implement than expected, some of the backend improvements that had to be done will be very usable in the near feature when we work on bringing back other social features.</p>

<h2 id="060-status">0.6.0 Status</h2>

<p>Getting leaderboards out the door in 0.6.0 was a major goal for me. Although I was able to make it, some sacrifices had to be made, and the previously planned Player Manager overhaul has been pushed back to 0.7.0.</p>

<p>On the bright side, 0.6.0 is now almost ready for release, which we aim to do early next week, just in time for the game’s 12th anniversary. I have also prepared a bit of a surprise, which will hopefully be somewhat amusing for people who followed Marvel Heroes since its release. Stay tuned for news!</p>

<p>As soon as 0.6.0 is out, I plan to work on an updated roadmap that will go all the way to the long awaited version 1.0.0 and the final wipe. It is somewhat hard to believe, but we are actually not that far from the finishing line!</p>

<p>As for 0.7.0, the first order of business is to bring the gameplay side of things to a feature-complete state by implementing crafting, which is an umbrella term that also includes features like runewords and Pet Tech. After crafting is fully up and running, which I currently expect to happen in June, I will return to working on the various backend and social features.</p>

<h2 id="opencalligraphy">OpenCalligraphy</h2>

<p>I was looking into some power-related bug reports earlier in the month, and it became apparent that our tools were long overdue for an upgrade. Historically we worked on tools in a spur of the moment manner, doing just the bare minimum to solve issues as they arised. Because of this, tech debt and inefficiencies started to accumulate, resulting in our tools becoming significantly less versatile and performant than they could have been. This project is also almost in its polishing stage now, meaning that we rely on our tools more and more as we try to distinguish problems with our code from Gazillion Issues™.</p>

<p>For <em>Game Database Browser</em> in particular, which has been our primary tool for identifying data-related bugs, there were two major problems: it worked only with game version 1.52.0.1700 and it was <em>slow</em>. The only alternative was to use a tool called <em>MHDataParser</em> to convert binary data files to the slightly more readable JSON format. MHDataParser is version-agnostic, but its output is nowhere near as convenient to work with as Game Database Browser, especially when it came to examining relationships between prototypes, which is a major aspect of how the game is “scripted”.</p>

<p>I started by making a prototype that was effectively a Windows Forms based GUI for MHDataParser. Here is what it looked like:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-05/opencalligraphy-prototype.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-05/opencalligraphy-prototype.png" alt="OpenCalligraphy Prototype" /></a></p>

<p>This prototype quickly evolved into its own tool called <em>OpenCalligraphy</em>, named after the Calligraphy data framework used by the game. At the time of writing it looks like this:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-05/opencalligraphy-final.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-05/opencalligraphy-final.png" alt="OpenCalligraphy Version 0.2.0" /></a></p>

<p>I was able to port most of the functionality from Game Database Browser without sacrificing any flexibility or performance. We now have a tool that we can use to efficiently examine data from any version of the game all the way back to 1.9 (May 2013), which is the earliest version of the game that has been preserved.</p>

<p>There is also some new functionality, like being able to inspect <code class="language-plaintext highlighter-rouge">.curve</code> files:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-05/curve-inspector.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-05/curve-inspector.png" alt="OpenCalligraphy Curve Inspector" /></a></p>

<p>One use case for OpenCalligraphy is figuring out how events were implemented. In many cases events were enabled and disabled by patching the data files, and it is not always obvious how everything is supposed to fit together when you are looking at pieces of a disabled event. To aid with this, OpenCalligraphy includes a tool called <em>Pak Diff Utility</em>, which can be used to compare data file archives from different versions of the game:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-05/pak-diff-utility.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-05/pak-diff-utility.png" alt="Pak Diff Utility" /></a></p>

<p>I have also used this as an opportunity to upgrade some of our older tools, like <em>MHExecutableAnalyzer</em>, which can be used to extract source file structure from client executables. An updated version of it is now included in OpenCalligraphy:</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2025-05/executable-analyzer.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-05/executable-analyzer.png" alt="Executable Analyzer" style="max-height: 500px;" /></a>
</center>

<p>The plan going forward is to use OpenCalligraphy as the foundation of all our game data related tooling, including any potential editing functionality.</p>

<p>Both the source code and prebuilt binaries are available on <a href="https://github.com/Crypto137/OpenCalligraphy">GitHub</a> under the MIT license, so feel free to do practically whatever you want with it.</p>

<hr />

<p>I am going back to my programming cave. See you in a month.</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">MHServerEmu Progress Report: April 2025</title><link href="https://crypto137.github.io/MHServerEmu/blog/2025/04/30/progress-report-april-2025.html" rel="alternate" type="text/html" title="MHServerEmu Progress Report: April 2025" /><published>2025-04-30T06:15:00+03:00</published><updated>2025-04-30T06:15:00+03:00</updated><id>https://crypto137.github.io/MHServerEmu/blog/2025/04/30/progress-report-april-2025</id><content type="html" xml:base="https://crypto137.github.io/MHServerEmu/blog/2025/04/30/progress-report-april-2025.html"><![CDATA[<!--more-->

<p><img src="/MHServerEmu/assets/blog/progress-report/2025-04/header.jpg" alt="MHServerEmu Progress Report - April 2025" /></p>

<p>Here is another MHServerEmu Progress Report for you.</p>

<h2 id="current-status">Current Status</h2>

<p>Compared to the crazy ride of February and March, when a lot of features just started working of all of a sudden, April has definitely been a slower month, but things are still happening in the background. After implementing login rewards early in the month, I took a break, during which Alex continued to work on bug fixes, optimization, and minor improvements. When I returned from my break, Alex shifted to digging into the Unreal side of the game again, while I started working on the big server architecture overhaul I mentioned a number of times over the past few months.</p>

<h2 id="architecture-overhaul">Architecture Overhaul?</h2>

<p>When we talk about server architecture, it is important to mention how MHServerEmu differs from what Gazillion had back when they were running the game. While MHServerEmu is a single monolithic all-in-one package that does <em>almost</em> everything, Gazillion had an entire cluster of servers that handled various aspects of the overall online service. Here is a diagram I did back in October 2023 based on the network protocol embedded in the client:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-04/gazillion-server-cluster.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-04/gazillion-server-cluster.png" alt="Gazillion Server Cluster" /></a></p>

<p>Based on our packet captures, at the very least GameInstanceServer (GIS) and FrontendServer (FES) were horizontally scalable, meaning Gazillion had more than one GIS and FES and could add more as needed.</p>

<p>This kind of architecture makes a lot of sense if your goal is to have a single centralized service and have it scale up to potentially tens and hundreds of thousands of players. However, the preservation aspect has been a top priority for me since the inception of this project, and having a single centralized service may be the worst way of preserving an online game, especially when you are talking about a game based on IP licensed from a notoriously litigious company. This is why I opted for a monolithic self-contained server approach: while it is not as scalable, it makes the server significantly easier to set up (effectively as easy as installing a mod for a single player game), and when you host it locally yourself, there is no practical way to “take it away” anymore.</p>

<p>Despite MHServerEmu being a single server, its architecture still mirrors Gazillion’s server cluster with functionality originally delegated to separate servers now running as “services” on different threads of the same process. Up until this point the vast majority of our efforts went into implementing GIS functionality, which is what handles practically all gameplay-related processing. Implementations of other services have been little more than stubs, doing just the bare minimum required to get a player into a game instance.</p>

<p>As the gameplay side got closer to a feature complete state, we have seen increases in player numbers on some of the more popular community-hosted servers, in some cases reaching hundreds of concurrent players. The existing implementations of many of these supporting services were practically just scaffolding, and some of them were creaking at the seams, because they were doing the work they were never really designed to do. One good example of this was our old implementation of the frontend server, which processes raw client connections and routes received data to various backend services. Because the old implementation was quickly hacked together to handle a locally connected client, it had issues handling data from unreliable connections, such as those that involved Wi-Fi on the client side, which resulted in some players being frequently disconnected from the server.</p>

<p>I did my best to do quick fixes as issues arised, which resulted in things like the current instancing solution you can see on some of the community-hosted servers. However, now that gameplay was in a reasonably decent state, it was time to take another good look at the supporting services and the overall architecture.</p>

<h2 id="frontend-improvements">Frontend Improvements</h2>

<p>Because we have been relying on quick fixes for non-gameplay related functionality so far, a web of technical debt started to accumulate, and it needed to be untangled.</p>

<p>The first area I looked at this month was the aforementioned Frontend. I have identified the following issues with it:</p>

<ul>
  <li>
    <p>Other services depended on the concrete <code class="language-plaintext highlighter-rouge">FrontendClient</code> implementation. This made it impossible to, for example, do an alternative Frontend implementation that could potentially run as a separate process, if the need ever arises.</p>
  </li>
  <li>
    <p>The protocol of an incoming message depends on the current state of the connection, meaning that messages cannot be deserialized as soon as they arrive. Previously new buffers were allocated for every single incoming message to store them until they could be deserialized, resulting in increased garbage collection (GC) pressure and more frequent GC-related stuttering.</p>
  </li>
  <li>
    <p>Packet parsing was not buffered, meaning that if a packet arrived in fragments across multiple data transmissions, it could not be parsed, and the client was forced to disconnect. This is the previously described Wi-Fi issue.</p>
  </li>
  <li>
    <p>The authentication process was not implemented as strictly as it should have been, which gave some leeway to unauthenticated and potentially malicious clients.</p>
  </li>
  <li>
    <p>The Frontend had no rate limiting, making it highly susceptible to potential DoS attacks.</p>
  </li>
</ul>

<p>Here is a summary of what I have done this month to address these issues:</p>

<ul>
  <li>
    <p>Other services can now interact with the Frontend through an abstract <code class="language-plaintext highlighter-rouge">IFrontendClient</code> interface, which provides flexibility in how Frontend is implemented. There is still some remaining concrete frontend implementation dependency, primarily in the Player Manager service, which will eventually be cleaned up. The end goal is to make all services completely independent from the concrete frontend implementation we have.</p>
  </li>
  <li>
    <p>The entire message handling pipeline has been overhauled:</p>

    <ul>
      <li>
        <p>Message buffers are now pooled and reused.</p>
      </li>
      <li>
        <p>Messages are now routed asynchronously on thread pool threads as they arrive rather than on a single dedicated thread, resulting in reduced latency.</p>
      </li>
      <li>
        <p>Various smaller optimizations have been made, such as replacing <code class="language-plaintext highlighter-rouge">lock</code> with <code class="language-plaintext highlighter-rouge">SpinLock</code> when swapping queues and reducing the number of protocol table dictionary lookups.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Packet parsing has been completely rewritten to allow it to persist state between data receives and reconstruct fragmented packets.</p>
  </li>
  <li>
    <p>The authentication process is now more rigid, and clients are disconnected when they attempt to do something unexpected.</p>
  </li>
  <li>
    <p>The frontend now limits incoming data from each connected client using an implemenation of the <a href="https://en.wikipedia.org/wiki/Token_bucket">token bucket</a> algorithm.</p>
  </li>
</ul>

<p>These Frontend changes are now available in nightly builds. As expected, there were some early issues to iron out, like this one small mistake that lead to a single malformed packet from an unauthenticated client causing a total server crash with 3 GB of logs (oops). But now that they were taken care of, the Frontend is in a much better state in terms of performance, reliability, and modularity.</p>

<h2 id="chat-improvements">Chat Improvements</h2>

<p>The next big area of technical debt we have is the Player Manager, which is a service that is supposed to load balance connected clients across different game instances and manage related features, like ensuring all member of a party end up in the same region instance. However, before meaningful improvements can be made to it, two main issues need to be solved:</p>

<ul>
  <li>
    <p>Our old implementation of the service system allowed only very limited communication between services, mostly related to routing client message. This was insufficient for the Player Manager, which requires extensive bidirectional communication with game instances.</p>
  </li>
  <li>
    <p>The chat command system, which dates back to August 2023 and is some of the oldest server code we still use, was tightly coupled with the existing concrete Player Manager implementation.</p>
  </li>
</ul>

<p>The communication issue was relatively easy to solve: we now have a more flexible event-like system, which can be extended with new message types as needed. We will be monitoring its performance, especially in relation to GC pressure under heavy load, but overall it seems to be doing the job we need so far.</p>

<p>The chat command problem is trickier to deal with however. Not only was our code left mostly untouched since August 2023, it was also heavily based on the command system from a work-in-progress Diablo III server emulator called Mooege, which was written back in 2011. The command system needed a total overhaul, which also required all command implementations to be adjusted accordingly. To make matters worse, in order to decouple everything from the Player Manager, we needed to overhaul our chat implementation, which was another overextended service stub.</p>

<p>The first order of business was improving the foundation, which was chat. Chat messages need to go through quite a journey to arrive to other players:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Client</code> -&gt; <code class="language-plaintext highlighter-rouge">FES</code> -&gt; <code class="language-plaintext highlighter-rouge">PlayerManager</code> -&gt; <code class="language-plaintext highlighter-rouge">GIS</code> -&gt; <code class="language-plaintext highlighter-rouge">Game</code> -&gt; <code class="language-plaintext highlighter-rouge">GroupingManager</code> -&gt; <code class="language-plaintext highlighter-rouge">Client</code></p>
</blockquote>

<p>The key service in this chain is the Grouping Manager, which is effectively the “chat service”. Previously we immediately routed chat messages from games to the Grouping Manager, which was problematic for a number of reasons. First, the Grouping Manager has no access to game state, so it has no idea what players are “nearby” to filter recipients in say and emote channels, or what prestige level each player is at to color their names accordingly. Second, command parsing happened at the Grouping Manager level, so if a command needed to do something game-related, which is very often the case, it needed to go through the Player Manager to get a reference to a game that the client was in. This coupled the Grouping Manager, the command system, the Player Manager, and game instance management in a single messy blob.</p>

<p>To solve this, initial chat message handling now happens at the game level, which gives us the opportunity to include necessary game state data before forwarding them to the Grouping Manager, or even avoid forwarding altogether if the message is successfully parsed as a command. This in turn gives commands direct access to game instances that invoked them, which circumvents the entire roundabout trip through the Player Manager.</p>

<p>Thanks to this, proximity and region based chat channels now work as they should, and players on community-hosted public servers now have to use the <code class="language-plaintext highlighter-rouge">Social</code>, <code class="language-plaintext highlighter-rouge">Trade</code>, and <code class="language-plaintext highlighter-rouge">LFG</code> channels for cross-region communication, just like back in the day. One side effect of implementing proximity chat is that the Nearby tab of the social panel now displays nearby players:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-04/nearby.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-04/nearby.jpg" alt="Gazillion Server Cluster" /></a></p>

<p>There appear to be some issues related to updating the status of players in the Nearby tab, which may or may not be client-side UI issues. We will be further looking into it as part of the bigger community system update, which will include implementing other tabs and broadcasting player status data across different game instances. For now we still have some command system improvements to do.</p>

<h2 id="command-improvements">Command Improvements</h2>

<p>As part of this command system overhaul, I wanted to not only get rid of unnecessary dependencies on other services, but also make improvements to some long-standing issues with maintaining command implementations:</p>

<ul>
  <li>
    <p>There was too much boilerplate code for validating invokers and arguments.</p>
  </li>
  <li>
    <p>The existing help functionality was too inconvenient to use, and updating the <a href="https://github.com/Crypto137/MHServerEmu/blob/master/docs/ServerEmu/ServerCommands.md">command list</a> in our documentation took too much effort to do manually, leading to it always being out of date.</p>
  </li>
</ul>

<p>My plan for tackling both of these problems was to make validation more data-driven and provide the necessary data to the command system using C# attributes, which we already used to define commands.</p>

<p>For example, this is what the <code class="language-plaintext highlighter-rouge">!region warp</code> command looked like previously:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nf">Command</span><span class="p">(</span><span class="s">"warp"</span><span class="p">,</span> <span class="s">"Warps the player to another region.\nUsage: region warp [name]"</span><span class="p">,</span> <span class="n">AccountUserLevel</span><span class="p">.</span><span class="n">Admin</span><span class="p">)]</span>
<span class="k">public</span> <span class="kt">string</span> <span class="nf">Warp</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">@params</span><span class="p">,</span> <span class="n">FrontendClient</span> <span class="n">client</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">client</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
        <span class="k">return</span> <span class="s">"You can only invoke this command from the game."</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">@params</span><span class="p">.</span><span class="n">Length</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="s">"Invalid arguments. Type 'help region warp' to get help."</span><span class="p">;</span>

    <span class="c1">// Implementation</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And here is the same command with the current version of attribute-based validation:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nf">Command</span><span class="p">(</span><span class="s">"warp"</span><span class="p">,</span> <span class="s">"Warps the player to another region.\nUsage: region warp [name]"</span><span class="p">)]</span>
<span class="p">[</span><span class="nf">CommandUserLevel</span><span class="p">(</span><span class="n">AccountUserLevel</span><span class="p">.</span><span class="n">Admin</span><span class="p">)]</span>
<span class="p">[</span><span class="nf">CommandInvokerType</span><span class="p">(</span><span class="n">CommandInvokerType</span><span class="p">.</span><span class="n">Client</span><span class="p">)]</span>
<span class="p">[</span><span class="nf">CommandParamCount</span><span class="p">(</span><span class="m">1</span><span class="p">)]</span>
<span class="k">public</span> <span class="kt">string</span> <span class="nf">Warp</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">@params</span><span class="p">,</span> <span class="n">NetClient</span> <span class="n">client</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Implementation</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Not only is there slightly less copying and pasting boilerplate code, but now we can use the data provided in these attributes to automatically generate the documentation we need.</p>

<p>At the time of writing this the command system overhaul is what I am actively working on, and it should be ready to be rolled out relatively soon.</p>

<h2 id="looking-ahead">Looking Ahead</h2>

<p>This is just the beginning for this architecture overhaul project. The remaining major goals for May include:</p>

<ul>
  <li>
    <p>Overhauling the Player Manager, which would potentially include more frequent database write operations (i.e. less egregious rollbacks when the server is having issues), as well as the first round of load balancing improvements.</p>
  </li>
  <li>
    <p>Integrating the leaderboard system implementation that has been sitting in a nearly finished state for months. This requires other architectural changes to be done first.</p>
  </li>
</ul>

<p>After finishing these, I will be shifting my focus to getting version 0.6.0 ready for release in early June, hopefully in time for the game’s 12th anniversary on June 4th. We will be talking about our plans for 0.7.0 and the updated roadmap to 1.0.0 at some point after that.</p>

<hr />

<p>Time to go back to work, see you next time!</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">MHServerEmu Progress Report: March 2025</title><link href="https://crypto137.github.io/MHServerEmu/blog/2025/03/31/progress-report-march-2025.html" rel="alternate" type="text/html" title="MHServerEmu Progress Report: March 2025" /><published>2025-03-31T05:15:00+03:00</published><updated>2025-03-31T05:15:00+03:00</updated><id>https://crypto137.github.io/MHServerEmu/blog/2025/03/31/progress-report-march-2025</id><content type="html" xml:base="https://crypto137.github.io/MHServerEmu/blog/2025/03/31/progress-report-march-2025.html"><![CDATA[<!--more-->

<p><img src="/MHServerEmu/assets/blog/progress-report/2025-03/header.jpg" alt="MHServerEmu Progress Report - March 2025" /></p>

<p>It’s a bird! It’s a plane! It’s an MHServerEmu Progress Report!</p>

<h2 id="060-and-beyond">0.6.0 and Beyond</h2>

<p>We have been doing quarterly stable releases for a whole year now, and this month we released version 0.5.0. As soon as it was out, we began working on the next one, 0.6.0, which is now available via nightly builds.</p>

<p>There are two major features planned for 0.6.0: the implementation of the long awaited power customization via talents, and a fundamental overhaul of our server architecture that is going to allow us to bring some of the “MMOness” back into the game. After doing an informal poll on our Discord server, we decided to prioritize additional work on powers, as it was what the majority of people wanted to see.</p>

<p>We will share more details on the architecture overhaul in future reports, but the short version of it is that the current architecture was designed as temporary scaffolding to allow us to work on the gameplay side of things as soon as possible. The vast majority of gameplay code is going to remain the same, but everything around it, such as game instance management, chat functionality, and other social-oriented features, will be undergoing major changes. It is not going to make much of a difference for people playing on locally hosted servers, but it will be crucial for public servers that intend to replicate the game’s original, more social, experience.</p>

<h2 id="talents">Talents</h2>

<p>Although many players seem to associate talents with the Biggest Update Ever (BUE), it is actually a much older system. First introduced as <em>specialization powers</em> in version 1.35, this system has been in Marvel Heroes since the release of Doctor Doom as a playable hero on the game’s second anniversary in 2015. We happen to have a highly experimental server implementation for this exact version of the game, which we can use to show what the UI for this feature looked like back then:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-03/specialization-powers.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-03/specialization-powers.jpg" alt="Specialization Powers" /></a></p>

<p>The underlying code that runs this system remained mostly the same, and in some cases talents are still referred to as specialization powers (e.g. <code class="language-plaintext highlighter-rouge">SpecializationPowerPrototype</code>). While it is good for pre-BUE support later down the line, it also meant more work needed to be done on the backend of the power system now.</p>

<p>This is a good opportunity to talk about the <em>power progression</em> system and what was the actual extent of changes brought by BUE. You may have noticed that it was possible to use travel and ultimate powers from level 1, even though they are supposed to unlock at higher levels. Team-ups were also using powers that were supposed to be locked for them. The reason for this is that we did not have a proper implementation of the power progression system and simply assigned all powers to avatars and team-ups. The only thing preventing you from using everything from level 1 was client-side validation, and team-ups did not have this “problem”.</p>

<p>There was a reason why we did not work on power progression until we had to do it. Even though BUE seemingly got rid of power ranks, the entire backend is still very much rank-driven and does all the necessary calculations, taking into account various modifiers to power ranks, only to arrive at rank 0 or 1 for everything but ultimate powers. What BUE actually did was set the starting rank of all powers to 1, remove point assignment and rank-modifying affixes from gear, and rescale everything accordingly. For us implementing power progression was a not insignificant amount of work, most of which is going to be pretty much invisible until we support pre-BUE versions of the game. However, since talents are just specialization powers with a new coat of paint, they relied on this underlying system, so it needed to be done.</p>

<p>As a result of implementing power progression, travel and ultimate powers now become usable when they are supposed to, and team-ups unlock powers gradually as they level up. However, this is not the full extent of these changes: it is now also possible to upgrade your ultimate power’s rank using character tokens, and team-up procs that can activate when the team-up is away are now properly assigned to avatars.</p>

<p>Another vital piece of the talent puzzle is <em>mapped powers</em>. This is not a new system either: it was introduced at least as far back as September 2014 when Rogue was released as a playable hero in version 1.26, and it is the foundation of her power stealing mechanic. Mapping a power means replacing it with another one, while also keeping the original power’s rank. The system itself is not very complicated, but it required doing an overhaul of our <em>ability key mapping</em> implementation, which was more in-depth. Ability key mapping is what the game calls action bars, and each “ability” can be either a power or an item. This system was built with various other features in mind, including having multiple switchable bars (unused in BUE), power specs, and tranform mode powers that replace all of your buttons. All of them had to be accounted for.</p>

<p>Speaking of transform mode powers, there are only two of them in version 1.52 (Rocket Raccoon’s Mechfall and Rogue’s Final Form), and both of them now work thanks to these backend improvements.</p>

<p>There is also one thing I would like to note regarding ability key mappings in version 1.52, because we have received numerous bug reports about this. When you level up, the client automatically slots powers into free slots, even if they were not unlocked by reaching that specific level. This means powers will always be reslotted into their designated slots on level up, as long as these slots are not occupied by other powers. Although this is arguably not intuitive behavior, it is done by the client on its own, so to avoid desyncs we have to do the same server-side.</p>

<p>With power progression and mapped powers implemented, talents were pretty much ready to go. The rest of the functionality, like changing how a power behaves, is done using the same proc and condition based “scripting” system we discussed in previous reports, so it pretty much just worked all of a sudden. Now the power system is almost feature complete, with only a few minor things still missing, like shared health pools used by one of the boss encounters in the Muspelheim raid. We will take care of these smaller features at some point before 1.0, but for now we will be moving on to other, higher priority features.</p>

<h2 id="prestige">Prestige</h2>

<p>Talents ended up being implemented faster than expected, which gave me some time to work on minor features that were originally scheduled for 0.7.0: Hero Synergies and Prestige. Synergies are not very interesting to talk about, since they are simply stat bonuses, but with Prestige there are some curious aspects to discuss.</p>

<p>Prestiging a hero is more involved than just resetting their level. You also need to:</p>

<ul>
  <li>
    <p>Validate the prestige consumable item interaction.</p>
  </li>
  <li>
    <p>Do a full respec, including unassigning mapped powers and talents.</p>
  </li>
  <li>
    <p>Check restrictions of all equipped items and unequip them, handling potentially running out of space in the general inventory.</p>
  </li>
  <li>
    <p>Reset the progress of missions that save their state per avatar.</p>
  </li>
  <li>
    <p>Grant prestige loot (more on that later).</p>
  </li>
  <li>
    <p>Recalculate the number of avatars at the new prestige level to update achievements.</p>
  </li>
  <li>
    <p>Do a teleport to the starting region.</p>
  </li>
</ul>

<p>As you can see, there are many different systems interacting to make this single thing happen. Because all of this occurs at the same time, there were some timing-related issues to solve, particularly related to modifying the inventory at the same time as teleporting, which triggers a save.</p>

<p>While many people remember one of the main Prestige rewards being additional copies of the starting costume, this was actually changed in BUE. Here is how Asros, one of the developers working at Gazillion at the time, explained why this change was made on the game’s <a href="https://web.archive.org/web/20170109140148/http://forums.marvelheroes.com/discussion/comment/3999141#Comment_3999141">official forums</a>:</p>

<blockquote>
  <p>[…]</p>

  <p>Costumes and costume revenue is a very important part of our business. We understand that there are many free to play players out there who will be disappointed in this decision. We feel very strongly that going forward, purely cosmetic things like costumes, for the most part(achievements/log in gifts as exceptions), should be cash shop items. Sometimes we have to make unpopular decisions for the betterment of the long term health of the game and the company. The reason for the free defaults was to make prestiging easier for players who had high level costume cores attached. Now with the changes to catalyst system, that is no longer a necessity.</p>

  <p>[…]</p>
</blockquote>

<p>Gazillion ended up replacing the starting costume with the bonus item find (BIF) loot table (<code class="language-plaintext highlighter-rouge">Loot/Tables/BonusItemFind/BonusItemFindTable.prototype</code>), which is the table also used by S.H.I.E.L.D. Supply Drops. The bad news is that it did not end up being good for the “long term health of the game”. The good news is we do not have financial obligations, so I have added a new setting called <code class="language-plaintext highlighter-rouge">GrantStartingCostumeForPrestige</code> that returns the original reward. Once crafting is working, this will be very useful for all of your costume blending needs.</p>

<hr />

<p><strong>UPDATED (JUNE 2025).</strong> Since writing this, we have found video evidence that this plan was not implemented by version 1.52. Because of this, we have made starting costumes the default prestige reward, but the loot table can still enabled with the <code class="language-plaintext highlighter-rouge">UsePrestigeLootTable</code> setting.</p>

<hr />

<p>Now that we have Prestige working, there have been some requests from the community to be able to continue leveling up past Prestige level 6 (Cosmic), which is the cap in version 1.52. Gazillion was actually working on extending the Prestige system with something called the Omega Prestige:</p>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/r5LQfV8VQ3Y" frameborder="0" allowfullscreen=""></iframe></div>

<p>Omega Prestige was available in the console versions of the game for some heroes, and the code for it exists in PC test center builds of version 1.53. None of it is available in 1.52, but we have come up with an alternative.</p>

<p>Ultimate Prestige (named by popular vote on our Discord server) is going to be a custom system that will allow you to reset your Prestige level back to 0 (White). We even came up with a way to display your Prestige reset count in the client’s UI:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-03/ultimate-prestige.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-03/ultimate-prestige.jpg" alt="Ultimate Prestige" /></a></p>

<p>Ultimate Prestige will be effectively uncapped, allowing you to level up your favorite hero over and over for as long as you desire. This system is going to be completely optional: server owners will be able to completely disable it in server settings, and we also plan to make the Prestige reset count hideable, in case you do not want everybody around you to know just how much fun you are having with your Squirrel Girl.</p>

<h2 id="prototype-patcher">Prototype Patcher</h2>

<p><em>AlexBond is back again to talk about his latest endeavor - patching the game’s data files server-side.</em></p>

<hr />

<p>Hello everyone, this is AlexBond.</p>

<p>After the recent large power update we discovered more bugs that existed in the original game, which we usually call <em>Gazillion issues</em>. One example of such issue is related to Emma Frost’s controlled minions. As it turns out, when Gazillion reworked mobs as part of their story overhaul, they forgot to flag the new mob alliances as hostile for controlled entities, which means entities controlled by Emma, Vision, Magik, and Rogue are not going to attack enemies belonging to these alliances. These enemies are encountered in the first chapter of the story, so it is not as noticable as it could have been.</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-1.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-1.png" alt="Prototype Patcher 1" /></a>
</center>

<p>New alliances:</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-2.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-2.png" alt="Prototype Patcher 2" /></a>
</center>

<p>To fix issues such as these I came up with an idea to implement a system called <em>Prototype Patch Manager</em>, which can be used to change prototype data when it is being loaded on the server. This allows us to fix numerous bugs without having to rely on hardcoded fixes.</p>

<p>All patches are stored in JSON files in the following subdirectory: <code class="language-plaintext highlighter-rouge">Data\Game\Patches</code>.</p>

<p>For example, the patch to fix the issue with Emma Frost looks like this:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"Enabled"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Prototype"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Entity/Alliances/Overrides/Controlled.prototype"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HostileTo[]"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Add [GangBiker, GangShocker, GangHellbane, GangElectro, EnemyToEveryone] to Controlled Keywords"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ValueType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PrototypeId[]"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Value"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="mi">3046566727234031236</span><span class="p">,</span><span class="w"> </span><span class="mi">11722709847486435174</span><span class="p">,</span><span class="w"> </span><span class="mi">1849637429396115378</span><span class="p">,</span><span class="w"> </span><span class="mi">3414168095237017445</span><span class="p">,</span><span class="w"> </span><span class="mi">4627307232939675976</span><span class="w"> </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Prototype</code> is the file path of the prototype we want to modify.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Path</code> is the internal path inside the prototype that points to the required value or array (arrays are specified using <code class="language-plaintext highlighter-rouge">[]</code>).</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ValueType</code> is the type of the value we are going to change. For prototype references this is going to be <code class="language-plaintext highlighter-rouge">PrototypeId</code>, but for embedded prototype instances you need to use  <code class="language-plaintext highlighter-rouge">PrototypeDataRef</code>.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Value</code> is a general purpose field that can contain various types, like numerical values, strings, or JSON objects.</p>
  </li>
</ul>

<p>Thanks to these patches, we can fix bugs that existed in the original game, bring back events that require loot table modifications, and much more.</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-3.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-3.jpg" alt="Prototype Patcher 3" /></a>
</center>

<p>We can also add back entities that were removed from the game by repurposing unused markers. For instance, these patches add Cloak and Dagger to the Avengers Tower:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"Enabled"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Prototype"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Resource/Cells/DistrictCells/Avengers_Tower/AvengersTowerNPE_HUB.cell"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MarkerSet.Markers[27].EntityGuid"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Add Dagger"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ValueType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PrototypeGuid"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Value"</span><span class="p">:</span><span class="w"> </span><span class="mi">6158563480682235387</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nl">"Enabled"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Prototype"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Resource/Cells/DistrictCells/Avengers_Tower/AvengersTowerNPE_HUB.cell"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MarkerSet.Markers[27].Position"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Change Dagger position"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ValueType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Vector3"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Value"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="mf">-694.76</span><span class="p">,</span><span class="w"> </span><span class="mf">2003.63</span><span class="p">,</span><span class="w"> </span><span class="mf">160.97</span><span class="w"> </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nl">"Enabled"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Prototype"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Resource/Cells/DistrictCells/Avengers_Tower/AvengersTowerNPE_HUB.cell"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MarkerSet.Markers[28].EntityGuid"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Add Cloak"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ValueType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PrototypeGuid"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Value"</span><span class="p">:</span><span class="w"> </span><span class="mi">13282508175937904349</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Meet the new guests!</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-4.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-4.jpg" alt="Prototype Patcher 4" /></a>
</center>

<p>In addition to modifying the values of existing fields, there is also a more complex system that can be used to add new embedded prototypes. For example, we can create a loot table that would drop Carnival Beads by repurposing the unused <code class="language-plaintext highlighter-rouge">TestItemsLootTable</code>:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"Enabled"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Prototype"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Loot/Tables/Test/TestItemsLootTable.prototype"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Choices[0].Choices[]"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Add [MGBeads, MGBeads2] as LootDropItemPrototype"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ValueType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Prototype[]"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Value"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"ParentDataRef"</span><span class="p">:</span><span class="w"> </span><span class="mi">1071992662862269383</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Item"</span><span class="p">:</span><span class="w"> </span><span class="mi">7800473051294539167</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Weight"</span><span class="p">:</span><span class="w"> </span><span class="mi">50</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"ParentDataRef"</span><span class="p">:</span><span class="w"> </span><span class="mi">1071992662862269383</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Item"</span><span class="p">:</span><span class="w"> </span><span class="mi">10014849647161122257</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Weight"</span><span class="p">:</span><span class="w"> </span><span class="mi">20</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>To add a new <code class="language-plaintext highlighter-rouge">Prototype</code> you need to specify its <code class="language-plaintext highlighter-rouge">ParentDataRef</code>, usually it is a <code class="language-plaintext highlighter-rouge">*.defaults</code> prototype:</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-5.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-5.png" alt="Prototype Patcher 5" /></a>
</center>

<p><code class="language-plaintext highlighter-rouge">ParentDataRef</code> is followed by fields inside this class (<code class="language-plaintext highlighter-rouge">Item</code>, <code class="language-plaintext highlighter-rouge">Weight</code>) that we override from defaults. In order for the <code class="language-plaintext highlighter-rouge">TestItemsLootTable</code> to work and bosses to drop what we want, we need to add this table’s id (<code class="language-plaintext highlighter-rouge">14120665269944980064</code>) to the global <code class="language-plaintext highlighter-rouge">SpecialEventsTable</code>:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"Enabled"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Prototype"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Loot/Tables/Mob/Bosses/SpecialEventsTable.prototype"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Choices[]"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Add TestItemsLootTable for CarnivalEvent"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ValueType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PrototypeDataRef"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Value"</span><span class="p">:</span><span class="w"> </span><span class="mi">14120665269944980064</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Now we can defeat Black Cat and get our Carnival Beads:</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-6.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-6.jpg" alt="Prototype Patcher 6" /></a>
</center>

<p>I have made patches for multiple such events, Mardi Gras is just an example for people who want to try doing it themselves.</p>

<p>It is also possible to modify missions like this in a limited fashion, including bringing some of them back. When making changes to mission prototypes, here is what is important to keep in mind:</p>

<ul>
  <li>
    <p>The client is going to complain and not refresh objectives if the mission was disabled. However, the mission will work and you will be able to get rewards.</p>
  </li>
  <li>
    <p>You cannot modify elements related to visibility and interaction. They have to be in sync between the client and the server.</p>
  </li>
  <li>
    <p>If data is used only by the server, it is safe to modify.</p>
  </li>
</ul>

<p>Hopefuly somebody will use these tools to bring back something that was disabled (intentionally or by mistake).</p>

<p>And with that it is time to say goodbye for now. Good luck leveling up <del>NoLifer</del> Ultimate Prestige!</p>

<hr />

<p>This is it for this progress report. See you all next time!</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">MHServerEmu Progress Report: February 2025</title><link href="https://crypto137.github.io/MHServerEmu/blog/2025/03/04/progress-report-february-2025.html" rel="alternate" type="text/html" title="MHServerEmu Progress Report: February 2025" /><published>2025-03-04T20:45:00+03:00</published><updated>2025-03-04T20:45:00+03:00</updated><id>https://crypto137.github.io/MHServerEmu/blog/2025/03/04/progress-report-february-2025</id><content type="html" xml:base="https://crypto137.github.io/MHServerEmu/blog/2025/03/04/progress-report-february-2025.html"><![CDATA[<!--more-->

<p><img src="/MHServerEmu/assets/blog/progress-report/2025-02/header.jpg" alt="MHServerEmu Progress Report - February 2025" /></p>

<p>Another month, another MHServerEmu Progress Report.</p>

<h2 id="050-status">0.5.0 Status</h2>

<p>As I am writing this, we are finalizing the work on our next quarterly stable release, version 0.5.0. As a result of player feedback and testing it ourselves, we have shuffled features around, with some getting pushed forward (e.g. Infinity / Omega), and others being delayed (e.g. leaderboards). Overall I feel we ended up with a very substantial package of changes, focused mostly on getting powers and the overall combat into a more refined state.</p>

<p>All the major features that will be coming in 0.5.0 are now done, and we are currently working on some additional polish and bug fixes. The current plan is to have it all ready at some point next week.</p>

<h2 id="difficulty-scaling">Difficulty Scaling</h2>

<p>One hot topic that came up after the major batch of power changes in February was the issue of difficulty scaling, particularly at level 60 in group-oriented content, such as Midtown Patrol. I would like to use this opportunity to talk more about what is happening behind the scenes with it.</p>

<p>First of all, <em>there was no difficulty scaling prior to these changes</em>. Green, Red, and Cosmic difficulty tiers were all using the same baseline values, which in most cases correspond to the Green difficulty. The only thing that was affected by difficulty tier selection before these changes was loot, so you were effectively getting Cosmic levels of loot for doing Green content. This was semi-balanced by the fact that many sources of damage and survivability were not working, but overall it was still heavily skewed towards being too easy. As procs and over time tickers were implemented, it became clear that leaving combat calculations as is would result in this situation becoming even more lopsided, so it was time to finally rip the bandaid off.</p>

<p>Get your tinfoil hats ready, because we are about to expose a bit of a conspiracy. Have you ever wondered why you never see the exact health values of the enemies you fight in Marvel Heroes? There is a very good reason for this: all damage numbers you see are actually <em>fake</em>. When the game needs to make an enemy twice as tanky, it does not increase its health or defenses. Instead, <em>the player’s damage gets cut in half</em>, and the damage numbers that are sent to the client are manipulated to hide this multiplier. This applies only to player -&gt; mob damage, when enemies attack players or player-controlled entities you get more or less real damage with only the level scaling applied.</p>

<p>The key thing here is where these multipliers are coming from. This is handled by a class called <code class="language-plaintext highlighter-rouge">TuningTable</code>, and each region has its own instance of it. The difficulty damage multiplier is calculated by the region’s <code class="language-plaintext highlighter-rouge">TuningTable</code> instance each time damage is applied to a target based on the following factors:</p>

<ul>
  <li>
    <p>Whether the source of the damage is a player-owned entity (avatar, summon, team-up, etc.) or not.</p>
  </li>
  <li>
    <p>The rank of the target (popcorn, boss, etc.).</p>
  </li>
  <li>
    <p>The difficulty tier of the current region (Green / Red / Cosmic).</p>
  </li>
  <li>
    <p>The difficulty index of the current region. This is used in modes such as Holo-Sim and X-Defense to gradually escalate the difficulty.</p>
  </li>
  <li>
    <p>The number of nearby players. The exact radius of “nearby” differs depending on the region. In general, for private instances it is set to 100000 units, which covers pretty much the entire region, while in public combat zones it is set to 1200 units, which is roughly about the size of a screen.</p>
  </li>
  <li>
    <p>Whether the region is a public combat zone (PCZ) or not.</p>
  </li>
</ul>

<p>One important point to note here is how this is balanced in practice in group-oriented public combat zones, such as Midtown Patrol. The curves used in them start aggressive, but have heavy diminishing returns, which means that bosses will feel very tanky when fighting them solo, but as more players join the fight, their damage will relatively quickly outscale the fake “boss health” gains (which are actually player damage penalties).</p>

<p>I have tested everything extensively, which included manually calculating the multipliers for various situations, and I can say with a high degree of confidence that the system appears to be working consistent with the game data. However, there have been some very vocal feedback from some testers that the game is now “unplayable”. To address this feedback, we have rearranged the features on our roadmap to get some of the additional sources of player power working sooner.</p>

<h2 id="infinity-and-omega">Infinity and Omega</h2>

<p>After evaluating the cost-benefit ratio of various missing sources of player power, with cost being the time it would take to implement them, and benefit being the increase in power they provide, I decided it made the most sense to push forward the two alternate advancement systems, Infinity and Omega. The main reason for this is because they rely mostly on the backend functionality we already have implemented, such as entity modifiers that are used for features like enemy ranks, which meant it took only a few days of work to get them up and running. At the same time, they are a major source of player power, although not quite as “infinite” as one of them implies.</p>

<p>“But wasn’t Omega removed in BUE?” — some of you may ask. Well, yes and no: when the client connects to the server, it receives a <code class="language-plaintext highlighter-rouge">NetMessageLocalPlayer</code> that contains a  <code class="language-plaintext highlighter-rouge">NetStructGameOptions</code> that looks like this:</p>

<div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">NetStructGameOptions</span> <span class="p">{</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">teamUpSystemEnabled</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">achievementsEnabled</span>    <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">omegaMissionsEnabled</span>    <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">veteranRewardsEnabled</span>    <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">multiSpecRewardsEnabled</span>    <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">giftingEnabled</span>    <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">characterSelectV2Enabled</span>    <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">communityNewsV2Enabled</span>    <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">leaderboardsEnabled</span>    <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">newPlayerExperienceEnabled</span>    <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">int32</span>    <span class="na">serverTimeOffsetUTC</span>    <span class="o">=</span> <span class="mi">13</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">useServerTimeOffset</span>    <span class="o">=</span> <span class="mi">14</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">missionTrackerV2Enabled</span>    <span class="o">=</span> <span class="mi">15</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">int32</span>    <span class="na">giftingAccountAgeInDaysRequired</span>    <span class="o">=</span> <span class="mi">16</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">int32</span>    <span class="na">giftingAvatarLevelRequired</span>    <span class="o">=</span> <span class="mi">17</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">int32</span>    <span class="na">giftingLoginCountRequired</span>    <span class="o">=</span> <span class="mi">18</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">infinitySystemEnabled</span>    <span class="o">=</span> <span class="mi">19</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">int32</span>    <span class="na">chatBanVoteAccountAgeInDaysRequired</span>    <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">int32</span>    <span class="na">chatBanVoteAvatarLevelRequired</span>    <span class="o">=</span> <span class="mi">21</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">int32</span>    <span class="na">chatBanVoteLoginCountRequired</span>    <span class="o">=</span> <span class="mi">22</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">isDifficultySliderEnabled</span>    <span class="o">=</span> <span class="mi">23</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">bool</span>    <span class="na">orbisTrophiesEnabled</span>    <span class="o">=</span> <span class="mi">24</span> <span class="p">[</span><span class="k">default</span> <span class="o">=</span> <span class="kc">false</span><span class="p">];</span>
    <span class="k">required</span> <span class="kt">int32</span>    <span class="na">platformType</span>    <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">NetMessageLocalPlayer</span> <span class="p">{</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">localPlayerEntityId</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">required</span> <span class="n">NetStructGameOptions</span>    <span class="na">gameOptions</span>    <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>One of the fields here is called <code class="language-plaintext highlighter-rouge">infinitySystemEnabled</code>. When it is set to <code class="language-plaintext highlighter-rouge">false</code>, not only does it disable the Infinity system, but it also reenables Omega in the state it was left in as of version 1.52. While this is some neat trivia, why bother implementing it right now? The reason is very simple: the vast majority of code for Infinity is literally copypasted Omega code with the word “Omega” replaced with “Infinity”, and I am not exaggerating this. The biggest difference between them is how points are calculated: Infinity uses a “squished” experience curve in which 10 Omega points are equivalent to 1 Infinity point, and each Infinity point you receive is colored to match various Infinity Stones. Another semi-major difference is the unlock requirement: Infinity is unlocked at level 60 account-wide, while Omega is unlocked per-hero at level 30. Everything else is pretty much the exact same thing code-wise, all the way to checking various prerequisite nodes (that are simply left blank in Infinity). So, by implementing one of them, it was very easy to get the other one working as well.</p>

<p>While we are at it, here is another fun fact: despite being called “Infinity”, it is not actually infinite. The system is capped at 6 000 000 points, of which only 80 400 are actually spendable. This is still a heavy grind, especially when compared to Omega, which had a cap of 10 000 (equivalent to 1 000 when using the Infinity curve), but I would not be surprised to see people reach it years down the line after 1.0 is out and there are no more wipes.</p>

<p>As for Omega, the exact state of its balance in the context of BUE remains to be evaluated. One idea that has been floating around is “uncapping” to match Infinity, but it needs to be extensively tested to make sure nothing breaks. In any case, even if it does not find extensive use in 1.52, this is still going to be useful for when get to backporting the server to version 1.48 (aka “pre-BUE”).</p>

<p>With these two systems working (Infinity in particular), there is now both an additional long term grind to work on, and a way to brute force past the remaining unimplemented systems, such as talents, which require more time and effort to implement.</p>

<h2 id="summons">Summons</h2>

<p><em>AlexBond is back for this month’s report to talk about his work on summon powers, hotspots, and controlled agents.</em></p>

<hr />

<p>Hello everyone, this is AlexBond. In this report we are going to talk about summons.</p>

<p>Summons are allies created by powers that help you in combat. If you ask a Marvel Heroes player to give an example of a summoner hero you will probably hear Squirrel Girl, Magik, or Doctor Doom; nobody is going to say Cyclops, Deadpool, or Nova. However, almost all heroes in the game are summoners. Why is that? Allow me to explain.</p>

<p>Each power is a chain of different actions. When you play as Cyclops and activate the Optic Beam power (internally referred to as <code class="language-plaintext highlighter-rouge">ChanneledBeam</code>), a hotspot called <code class="language-plaintext highlighter-rouge">CyclopsChanneledEnergyBeamArea</code> is summoned. This hotspot has a triangle shape with a 10 degree angle and a length of 700 units. It is attached to Cyclops, and when you move the mouse cursor, he rotates towards it, and the attached hotspot follows. When the hotspot overlaps with other entities, it applies powers defined in the <code class="language-plaintext highlighter-rouge">AppliesPowers</code> field of its prototype: in this example in particular it applies <code class="language-plaintext highlighter-rouge">ChanneledEnergyBeamEffect</code>, which is the damage component, and <code class="language-plaintext highlighter-rouge">ChanneledEnergyBeamSlowEffect</code>, which is an additional status effect.</p>

<p>Three systems needed to be implemented for all of this to work correctly: <em>summon powers</em>, <em>hotspots</em>, and <em>attached entities</em>.</p>

<h3 id="summon-powers">Summon Powers</h3>

<p>Each power prototype contains many different parameters, but the main one we are interested in is <code class="language-plaintext highlighter-rouge">SummonEntityContexts</code>:</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2025-02/summons-1.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-02/summons-1.png" alt="Summons 1" /></a>
</center>

<p>It contains the settings we need to use to create a <code class="language-plaintext highlighter-rouge">SummonEntity</code>.</p>

<p>In most cases, when a power is activated, it creates a <code class="language-plaintext highlighter-rouge">PowerPayload</code> instance. Summon powers register for the <code class="language-plaintext highlighter-rouge">OnDeliverPayload()</code> event, which we use to get the target that we are going to attach our future summon entity to. In <code class="language-plaintext highlighter-rouge">SummonPayloadEntity()</code> we calculate the number of entities that have already been summoned, and if the <code class="language-plaintext highlighter-rouge">KillPreviousSummons</code> flag is set, we kill existing ones to prevent infinite spawning. We get the number of summon entities to create from <code class="language-plaintext highlighter-rouge">SummonNumPerActivation</code>, compare it to <code class="language-plaintext highlighter-rouge">SummonMaxSimultaneous</code>, and then create the entities using <code class="language-plaintext highlighter-rouge">SummonEntityContext()</code>. We need to not only create the entities, but also calculate their position relative to the summoner, taking into account all the restrictions, offsets, collisions, and other parameters. All of this is handled by a function called <code class="language-plaintext highlighter-rouge">GetSummonPositions()</code>. After we get our spawn coordinates, we put our newly created entities into the world and attach them to the caster or the target based on the prototype flags if needed (<code class="language-plaintext highlighter-rouge">AttachSummonsToCaster</code> and <code class="language-plaintext highlighter-rouge">AttachSummonsToTarget</code> respectively).</p>

<p>In most cases this entity is going to be an invisible area called a <em>hotspot</em> that will damage and/or apply other effects to whoever overlaps with it.</p>

<h3 id="hotspots">Hotspots</h3>

<p>In most cases hotspots are invisible to players (except for visual effects in rare cases). When they enter the world, they also begin interacting with the game’s physics system, which is processed on the server and the client in parallel. The physics system simulates movement of entities within the game world and invokes events such as <code class="language-plaintext highlighter-rouge">OnOverlapBegin()</code> and <code class="language-plaintext highlighter-rouge">OnOverlapEnd()</code>.</p>

<p>The two main use cases for hotspots are mission triggers (<code class="language-plaintext highlighter-rouge">HandleOverlapBegin_Missions()</code>) and power triggers (<code class="language-plaintext highlighter-rouge">HandleOverlapBegin_Powers()</code> and <code class="language-plaintext highlighter-rouge">HandleOverlapEnd_PowerEvent()</code>). We have already covered missions in previous reports, and now it is time to talk about powers.</p>

<p>Hotspots apply powers defined in the prototype in the following two fields:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">AppliesPowers</code></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">AppliesIntervalPowers</code></p>
  </li>
</ul>

<p>And this is where it becomes complex. There are many powers and many targets, targets can enter and exit the hotspot, and all of this needs to be tracked. We use a dictionary with target id as key and a structure called <code class="language-plaintext highlighter-rouge">PowerTargetMap</code> as value:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">ulong</span><span class="p">,</span> <span class="n">PowerTargetMap</span><span class="p">&gt;</span> <span class="n">_overlapPowerTargets</span><span class="p">;</span>

<span class="k">public</span> <span class="k">struct</span> <span class="nc">PowerTargetMap</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">HotspotPowerMask</span> <span class="n">ActivePowers</span><span class="p">;</span>
    <span class="k">public</span> <span class="n">HotspotPowerMask</span> <span class="n">IgnorePowers</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">HotspotPowerMask</code> is a bit field that can contain the state of up to 32 different powers. We use these masks to ensure that targets do not have effects applied to them multiple times, and the <code class="language-plaintext highlighter-rouge">HasConditionsForTarget()</code> function helps us prevent infinite condition stacks.</p>

<p><code class="language-plaintext highlighter-rouge">AppliesIntervalPowers</code> works differently: it can either affect random targets if the <code class="language-plaintext highlighter-rouge">IntervalPowersRandomTarget</code> flag is set, or it can target all entities at the same time.</p>

<p>When a new target begins overlapping with a hotspot’s bounds, it gets tracked using our dictionary, and all active powers are applied to it.</p>

<p>As you can see, this is a pretty complex process that involves the interaction of many different systems and events. Let’s take a closer look at one of them.</p>

<h3 id="attached-entities">Attached Entities</h3>

<p>When an entity flagged as <code class="language-plaintext highlighter-rouge">IsAttachedToEntity</code> enters the world, it is attached to the <code class="language-plaintext highlighter-rouge">EntityPhysics</code> component of the specified entity, where it is added to the <code class="language-plaintext highlighter-rouge">AttachedEntities</code> collection.</p>

<p>Every time the <code class="language-plaintext highlighter-rouge">PhysicsManager</code> processes entity movement, it calls <code class="language-plaintext highlighter-rouge">UpdateAttachedEntityPositions()</code>, which calls <code class="language-plaintext highlighter-rouge">ChangeRegionPosition()</code> for all entities in the <code class="language-plaintext highlighter-rouge">AttachedEntities</code> collection. Hotspots override <code class="language-plaintext highlighter-rouge">ChangeRegionPosition()</code> to take into account the offset it gets from <code class="language-plaintext highlighter-rouge">GetCenterOffset()</code> and the relative <code class="language-plaintext highlighter-rouge">SummonOffsetAngle</code>, which allows the beam to rotate around the user rather than its own center.</p>

<p>With this our short overview of hotspots is over, and you should have a general understanding of how it all works. Now I would like to talk about another topic.</p>

<h3 id="controlled-agents">Controlled Agents</h3>

<p>While I was working on summon powers, I noticed that it was related to two other systems: <code class="language-plaintext highlighter-rouge">TeamUpAgent</code> and <code class="language-plaintext highlighter-rouge">ControlledAgent</code>. These two, along with <code class="language-plaintext highlighter-rouge">VanityPet</code> summons, all belong to the same group called <code class="language-plaintext highlighter-rouge">PersistentAgents</code>.</p>

<p>When you transition within the same region using teleports (e.g. elevators in tower regions), your pets should transition with you (and not temporarily get stuck in the previous area like team-ups used to do). This is handled by the <code class="language-plaintext highlighter-rouge">RespawnPersistentAgents()</code> function. I had to overhaul our old team-up implementation for these new requirements. Now all three team-up modes are selectable, although not all functionality related to them is implemented at the time of writing. Let’s move over to controlled agents.</p>

<p>There is a relatively small number of heroes that can control enemies and turn them into pets. Here is the full least of them:</p>

<ul>
  <li>
    <p>Emma Frost (living enemies)</p>
  </li>
  <li>
    <p>Rogue (same as Emma Frost via a stolen power)</p>
  </li>
  <li>
    <p>Vision (robots)</p>
  </li>
  <li>
    <p>Magik (demons)</p>
  </li>
</ul>

<p>When you use a control power, the <code class="language-plaintext highlighter-rouge">ControlAgentAI</code> power event is invoked via <code class="language-plaintext highlighter-rouge">DoPowerEventActionControlAgentAI()</code>, which calls the <code class="language-plaintext highlighter-rouge">SetControlledAgent()</code> function that establishes control via <code class="language-plaintext highlighter-rouge">SetControlledAgent()</code>. This involves removing the existing controlled agent if needed (e.g. Magik) and binding the new one. The binding process includes placing the controlled entity into an inventory called <code class="language-plaintext highlighter-rouge">AvatarControlledEntities</code> belonging to the controlling avatar, setting the <code class="language-plaintext highlighter-rouge">AIMasterAvatarDbGuid</code> property on it to make it follow the avatar, and overriding its alliance to match the avatar. All boosts flagged as <code class="language-plaintext highlighter-rouge">DisableForControlledAgents</code> are removed, and we get an obedient pet.</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2025-02/summons-2.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-02/summons-2.png" alt="Summons 2" /></a>
</center>

<p>As it turns out, in version 1.52 it is not possible to change pets on the fly. I am not sure when exactly it was changed, but currently the data-defined requirement looks like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HasEntityInInventory(Context=[Var2], Entity=[], Inventory=[Controlled]) ? False : True
</code></pre></div></div>

<p>This means that if our inventory with the <code class="language-plaintext highlighter-rouge">Controlled</code> label has any entity in it, it is impossible to control a new one. To get a new pet we first need to dismiss the existing one in the power panel:</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2025-02/summons-3.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-02/summons-3.png" alt="Summons 3" /></a>
</center>

<p>Implementing all the systems we discussed above restored a lot of gameplay functionality: bosses are now more fun, enemies are more dangerous, and heroes are more playable (and summon-focused heroes are “playable” for the first time in a sense).</p>

<p>Hopefully you found this interesting. Until we meet again in future reports, and have fun playing!</p>

<hr />

<p>That is all we have to share today. Time for us to get back to finishing 0.5.0!</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">MHServerEmu Progress Report: January 2025</title><link href="https://crypto137.github.io/MHServerEmu/blog/2025/01/31/progress-report-january-2025.html" rel="alternate" type="text/html" title="MHServerEmu Progress Report: January 2025" /><published>2025-01-31T22:15:00+03:00</published><updated>2025-01-31T22:15:00+03:00</updated><id>https://crypto137.github.io/MHServerEmu/blog/2025/01/31/progress-report-january-2025</id><content type="html" xml:base="https://crypto137.github.io/MHServerEmu/blog/2025/01/31/progress-report-january-2025.html"><![CDATA[<!--more-->

<p><img src="/MHServerEmu/assets/blog/progress-report/2025-01/header.jpg" alt="MHServerEmu Progress Report - January 2025" /></p>

<p>The first month of 2025 is almost over, and we have some MHServerEmu progress to share.</p>

<h2 id="conditions">Conditions</h2>

<p><a href="/MHServerEmu/blog/2024/12/30/progress-report-december-2024.html">By the end of last month</a> we had the skeleton for the condition system working, and it was time to build upon it. Two major things that were still missing were <em>pausing</em> and <em>disabling</em>.</p>

<p>Pausing makes it possible for a condition with finite duration to function as an infinite condition for as long as the pause is in effect. Pausing is allowed only for conditions flagged as <code class="language-plaintext highlighter-rouge">IsBoost</code> if one of the following criteria is met:</p>

<ul>
  <li>
    <p>The owner of the condition is currently in a region flagged as <code class="language-plaintext highlighter-rouge">PausesBoostConditions</code> (e.g. hub regions).</p>
  </li>
  <li>
    <p>The owner of the condition exits the world, such as during a loading screen.</p>
  </li>
  <li>
    <p>The global live tuning variable <code class="language-plaintext highlighter-rouge">eGTV_BoostTimersRunning</code> is set to false.</p>
  </li>
</ul>

<p>One important thing to note is that pausing a condition affects only its duration. Its effect remains applied even if it is “paused”.</p>

<p>Separate from pausing is disabling a condition. When a condition is disabled, it remains attached to its owner, but its effects are removed until it is enabled again. Conditions are disabled by setting the <code class="language-plaintext highlighter-rouge">DisablePowerEffects</code> property on the owner, which can be done by applying another condition. This system, combined with power activations triggered by power events and procs, functions essentially as a scripting language that can affect the state of the owner in different ways. For example, various special resource behaviors, like Hulk’s Anger or Punisher’s Ammo, use this functionality to enable and disable primary resource regeneration and decay depending on the current combat state.</p>

<p>With these taken care of, the condition system is now in a mostly functional state.</p>

<h2 id="resources">Resources</h2>

<p>The original plan was to merge the remaining power subsystems one by one as they were ready. However, while I was working on implementing Spirit, which is the simplest primary resource that many of the heroes use, it became apparent that on its own it will leave many other characters that rely on special behaviors in a semi-broken state. After getting some feedback from the players on our Discord server, I decided to batch these systems into a larger update of the power system, and this is what I have spent the majority of my time working on this month.</p>

<p>Resources in Marvel Heroes come in two flavors: primary and secondary. Each resource has an associated <code class="language-plaintext highlighter-rouge">ManaBehaviorPrototype</code> that defines its behavior, such as whether it starts empty or depletes on death. Avatars are the only entities that use resources; enemies, team-ups, and other AI-controlled characters do not have any.</p>

<p>Primary resources are referred to internally as <code class="language-plaintext highlighter-rouge">Endurance</code>, and all heroes have them. A hero can technically have multiple primary resources which are distinguished by the <code class="language-plaintext highlighter-rouge">ManaType</code> parameter, but in practice the only hero that uses this is Doctor Doom. The default primary resource is Spirit, which is essentially just mana. Special primary resource behaviors are implemented via the scripting-like system of powers and conditions mentioned in the previous section. Primary resources are displayed in the UI as the “globe” on the right side of the action bar:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-01/primary-resources.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-01/primary-resources.jpg" alt="Primary Resources" /></a></p>

<p>Secondary resources are optional, and they can represent various things, from combo points to ants, depending on the hero, with no default behavior. They can have pips, which are basically breakpoints for spending them and activating effects. Secondary resources are represented by horizontal bars above the power slots:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-01/secondary-resources.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-01/secondary-resources.jpg" alt="Secondary Resources" /></a></p>

<p>Implementing this system on its own was not particularly difficult, and we could have done it a long time ago. The real roadblocker until now has been getting all the other things that interact with it working, and we have made significant progress on that front as well.</p>

<h2 id="procs">Procs</h2>

<p><a href="/MHServerEmu/blog/2024/07/31/progress-report-july-2024.html">Back in July of last year</a> when we first got the power system working, I talked about how  in many cases powers are actually implemented as “combo” chains. Here is a quick recap: when a more complex effect is needed, it is done by activating subsequent powers when various <em>power events</em> happen, such as a power’s animation reaching its contact frame. <em>Procs</em> are essentially an extension of this system, except their only action is activation of a specific proc power (which in turn can do more varied actions), and their triggers are not limited to stages of the power pipeline.</p>

<p>In total there are 74 proc triggers as of version 1.52. Some of them are more generic, like <code class="language-plaintext highlighter-rouge">OnPowerHit</code> and <code class="language-plaintext highlighter-rouge">OnGotDamaged</code>, while others are more specialized, such as <code class="language-plaintext highlighter-rouge">OnSecondaryResourcePipGain</code>, <code class="language-plaintext highlighter-rouge">OnSkillshotReflect</code>, and <code class="language-plaintext highlighter-rouge">OnControlledEntityReleased</code>. Procs are assigned to entities using one of three proc properties: <code class="language-plaintext highlighter-rouge">Proc</code>, <code class="language-plaintext highlighter-rouge">ProcKeyword</code>, and <code class="language-plaintext highlighter-rouge">ProcNotKeyword</code>. In many cases these properties come from conditions applied by passive powers. Proc properties are parameterized by their trigger, a reference to the power they activate, and an optional parameter:</p>

<ul>
  <li>
    <p>For regular procs the parameter is a threshold value (e.g. an <code class="language-plaintext highlighter-rouge">OnEnduranceBelow</code> proc with a threshold value of <code class="language-plaintext highlighter-rouge">50</code> is going to activate when the owner’s primary resource drops below 50%).</p>
  </li>
  <li>
    <p>For <code class="language-plaintext highlighter-rouge">ProcKeyword</code> and <code class="language-plaintext highlighter-rouge">ProcNotKeyword</code> the parameter is a reference to a keyword prototype, with the former requiring something to have the keyword, and the latter being the opposite and requiring something to <em>not</em> have the keyword.</p>
  </li>
</ul>

<p>The value of the property represents the trigger chance of the proc. In some cases this chance is multiplied by the <code class="language-plaintext highlighter-rouge">OnHitProcChanceMultiplier</code> value taken from the prototype of the power that triggered the proc. When this multiplier is applied, the <code class="language-plaintext highlighter-rouge">ProcChanceMultiplierBehaviorType</code> that is also defined in the power prototype is taken into account. Possible values include:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">AllowProcChanceMultiplier</code> - applies the multiplier normally.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">IgnoreProcChanceMultiplier</code> - the multiplier is not applied.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">IgnoreProcChanceMultiplierUnlessZero</code> - the multiplier is used only to disable on hit procs completely.</p>
  </li>
</ul>

<p>The purpose of these multipliers is to limit the proc activation rate for fast hitting powers, which would trigger procs too often without them.</p>

<p>Here are some examples of proc properties:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ProcProp[OnAnyHit][CosmicItemSkyBeamAoe][0][0] = 0.05f</code></p>

    <ul>
      <li>This proc is activated by the <code class="language-plaintext highlighter-rouge">OnAnyHit</code> trigger, and the activation chance is 5%. The power this proc is going to activate is <code class="language-plaintext highlighter-rouge">CosmicItemSkyBeamAoe</code>. This is a proc assigned by one of the cosmic affixes found on gear.</li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ProcKeywordProp[OnPowerHit][FuryGainProcEffect][Fury][0] = 1.0f</code></p>

    <ul>
      <li>This proc is activated by the <code class="language-plaintext highlighter-rouge">OnPowerHit</code> trigger, it requires the triggering power to have the <code class="language-plaintext highlighter-rouge">Fury</code> keyword, and the activation chance is 100%. The power this proc is going to activate is <code class="language-plaintext highlighter-rouge">FuryGainProcEffect</code>. This is a proc assigned by one of Wolverine’s passive powers, and it’s his main way of restoring his primary resource.</li>
    </ul>
  </li>
</ul>

<p>The big challenge with implementing procs has been the sheer amount of code needed to handle all the various triggers. The code itself is very boilerplate and involves doing checks and filling out <code class="language-plaintext highlighter-rouge">PowerActivationSettings</code> instances, but the behavior of various triggers is subtly different enough to not be able to just reuse all the code.</p>

<p>After a few weeks of work though it was done, and now we have a fully-featured proc system. There is just one more gear needed to get this whole mechanism moving.</p>

<h2 id="tickers">Tickers</h2>

<p>Some properties apply effects to the entities they are assigned to periodically. Most of these involve dealing damage over time (DoT), healing over time (HoT), and applying resource changes over time. For this the game uses a class called <code class="language-plaintext highlighter-rouge">PropertyTicker</code>.</p>

<p>A ticker is essentially just a timer that applies properties at certain update intervals. What makes it special is how it interacts with conditions and procs: a proc can activate a power that will enable or disable a condition, which in turn will enable or disable its ticker. This is how resources like Hulk’s Anger works: entering and exiting combat triggers procs that turn Anger regeneration and decay on or off.</p>

<p>At the time of writing this the timer aspect of tickers has been implemented, and what remains is to expand the power results calculation pipeline to work with over time properties. As part of this I will also be doing a pass on how damage is calculated in general so that we can implement various damage mitigation effects. Overall I expect this to take a week or two, and after that this batch of power changes should be ready for testing in nightly builds.</p>

<h2 id="population-improvements">Population Improvements</h2>

<p>While I was busy with powers, Alex has also been hard at work improving some systems that needed more attention. Among them is the population system, which still had some marker-related issues that needed to be fixed.</p>

<p>The basic idea behind the population system is that the game has limited resources for spawning, and the <code class="language-plaintext highlighter-rouge">PopulationManager</code> class distributes these resources among various requests that often exceed the available resources. One example of such resource is markers, which are spawn points hand placed by game designers on various cells. There are many examples in the game when there are fewer markers than entities that try to spawn on them, and the population system has to handle this.</p>

<p>One issue we had was how mission requests for markers were handled. We had some instances where markers were partially used by different missions, and as a result none of them had enough enemies to complete them. To deal with this, Alex has implemented an “all or nothing” style distribution system for missions where markers get reserved in chunks, and if there aren’t enough markers, the mission will wait until it is its time to shine. Implementing this allowed us to deal with population issues in regions like Midtown Patrol.</p>

<p>Another problem was related to how spawn requests were prioritized. Some requests are flagged as “critical”, which means they need to spawn before everything else. When this priority is not taken into account, unexpected semi-random behavior can occur, like missions becoming incompletable. Due to a small oversight this priority was not taken into account in some cases, and this has now been fixed.</p>

<p>And here is a fun fact about marker conflicts: we just found a bug related to them that existed in the original game. In the Castle Doom terminal during the fight with Doctor Doom cutscenes are supposed to be playing on phase transitions, just like they do in story mode. However, because the terminal has two conflicting missions (<code class="language-plaintext highlighter-rouge">G09DoctorDoomDailyEndgame</code> and <code class="language-plaintext highlighter-rouge">DoomFightDailyKismetControl</code>), the necessary hotspots that trigger the cutscenes fail to spawn at all! This bug is now fixed by disabling one of the missions via live tuning, but you can still get the authentic buggy experience if you prefer it by turning the tuning off.</p>

<h2 id="modding">Modding</h2>

<p>In addition to polishing existing systems, in January Alex has also started some preliminary work on modding tools for modifying the client as a side project. While it is still very early, there have been some successful experiments with simple texture swaps.</p>

<p>The tool he is currently working on is called <em>MH Texture Manager</em>, and it is going to allow potential mod developers to browse and replace various textures. Here is what it looks like right now:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-01/texture-manager.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-01/texture-manager.png" alt="MH Texture Manager" /></a></p>

<p>And here is what it is like in-game:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-01/texture-swap-example.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-01/texture-swap-example.jpg" alt="Texture Swap Example" /></a></p>

<p>Please keep in mind that this is purely experimental at this stage, and the scope of the MHServerEmu project does not include creating any new custom content. You can follow Alex’s progress with modding tools on <a href="https://github.com/AlexBond2/MHTextureManager">GitHub</a>.</p>

<hr />

<p>Back to the coding mines for us. See you all next time!</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">MHServerEmu Progress Report: December 2024</title><link href="https://crypto137.github.io/MHServerEmu/blog/2024/12/30/progress-report-december-2024.html" rel="alternate" type="text/html" title="MHServerEmu Progress Report: December 2024" /><published>2024-12-30T17:45:00+03:00</published><updated>2024-12-30T17:45:00+03:00</updated><id>https://crypto137.github.io/MHServerEmu/blog/2024/12/30/progress-report-december-2024</id><content type="html" xml:base="https://crypto137.github.io/MHServerEmu/blog/2024/12/30/progress-report-december-2024.html"><![CDATA[<!--more-->

<p><img src="/MHServerEmu/assets/blog/progress-report/2024-12/header.jpg" alt="MHServerEmu Progress Report - December 2024" /></p>

<p>Another year is almost over, and we are steadily approaching our goal of fully restoring Marvel Heroes.</p>

<h2 id="conditions">Conditions</h2>

<p>With version 0.4.0’s release the game is now in a state that most people would probably consider “playable”. However, our work is still far from over, and now we need to focus on restoring the remaining depth of various systems.</p>

<p>In December it was time for me to go back to work on powers, which is something many people have been anxiously waiting for while I was busy with other features. We already had the basic framework for them in place since <a href="/MHServerEmu/blog/2024/07/31/progress-report-july-2024.html">July</a>, and more backend work was done in <a href="/MHServerEmu/blog/2024/09/30/progress-report-september-2024.html">September</a> while I was implementing dynamic combat levels, but all of that was just the tip of the power iceberg that we now need to tackle head-on:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-12/power-iceberg.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2024-12/power-iceberg.jpg" alt="The Power Iceberg" /></a></p>

<p>The next big step for powers was implementing <em>conditions</em>, which is the term the game uses internally for various buffs and debuffs that can be applied to world entities. Here is an overview of how it works.</p>

<p>Each <code class="language-plaintext highlighter-rouge">WorldEntity</code> instance has a <code class="language-plaintext highlighter-rouge">ConditionCollection</code> that contains <code class="language-plaintext highlighter-rouge">Condition</code> instances that have been applied to it. Conditions are applied as a result of various powers and can come from two main sources: a standalone <code class="language-plaintext highlighter-rouge">ConditionPrototype</code>, or a “mix-in” prototype within the <code class="language-plaintext highlighter-rouge">PowerPrototype</code> of the power that applied the condition. Generally speaking, standalone conditions are conditions that can be applied by different powers, such as boosts, while mix-in conditions are exclusive to a single power. The vast majority of conditions come from power mix-ins.</p>

<p>At their core <code class="language-plaintext highlighter-rouge">Condition</code> instances are essentially <code class="language-plaintext highlighter-rouge">PropertyCollection</code> instances with extra metadata that determine parameters like duration, pause state, and prototype overrides. When a <code class="language-plaintext highlighter-rouge">Condition</code> is added to a <code class="language-plaintext highlighter-rouge">ConditionCollection</code>, it is <em>accrued</em> to the collection’s owner, which includes attaching the condition’s properties to the owner’s in the same way as, for example, when you equip an item. Many conditions also affect the appearance of the entity they are applied to with various visual effects and animation changes.</p>

<p>Condition properties can cause a wide variety of effects. While some are simple stat modifiers, others are used to flag entities with <em>status effects</em>, like stuns and knockups. A whole separate category is over time properties, which are applied continuously using <em>tickers</em>. This is how things like damage over time (DoT) and regeneration effects are implemented.</p>

<p>If a condition’s metadata contains a valid duration, its end is scheduled when it is added. Some conditions do not have a duration, which means they have to be removed by an external event, like a power ending. A good example of this are bounce powers where the avatar is the one bouncing, like the ones Ant-Man and Daredevil have: when the bounce power activates, a condition is applied that makes the avatar’s mesh invisible and prevents movement. This condition is removed only when the bounce power ends, the timing of which varies depending on the distance between bounce targets. Another example is passive powers: they are powers that are automatically activated when an entity becomes simulated, which results in a condition that stays on for as long as the passive power is assigned. There are also conditions that last for as long as some movement is happening, like knockback conditions that prevent entities from moving themselves until the forced knockback movement ends.</p>

<p>Conditions can have various <em>stacking behaviors</em> defined in their prototypes, which restrict how multiple instances of the same condition can be applied to an entity. The main defining feature of a <code class="language-plaintext highlighter-rouge">StackingBehaviorPrototype</code> is its <code class="language-plaintext highlighter-rouge">ApplicationStyle</code>, which can have one of six possible values:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">DontRefresh</code>: condition instances are applied separately from one another.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Refresh</code>: applying new condition instances resets the duration of other instances that have already been applied.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Recreate</code>: applying new condition instances removes all other instances.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">MatchDuration</code>: the duration of the newly applied instances match the longest remaining duration out of all instances that have already been applied.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">SingleStackAddDuration</code>: only a single condition instance can be applied, and additional applications extend the duration of the applied instance.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">MultiStackAddDuration</code>: a combination of <code class="language-plaintext highlighter-rouge">Refresh</code> and <code class="language-plaintext highlighter-rouge">SingleStackAddDuration</code>, which results in the duration of other instances that have already been applied being refreshed and extended.</p>
  </li>
</ul>

<p>Condition instances are grouped into stacks using a structure called <code class="language-plaintext highlighter-rouge">StackId</code>, which consists of a prototype reference and a creator id. Based on the <code class="language-plaintext highlighter-rouge">StackingBehaviorPrototype</code>, in some cases conditions applied by different powers or created by different owners can still belong to the same stack. Finally, the stacking behavior determines how many instances should be applied per application, as well as how many instances in total can be applied using the same <code class="language-plaintext highlighter-rouge">StackId</code>.</p>

<p>There are some unique quirks related to condition persistence. Because only world entities can have conditions applied to them, and the player entity representing the account is not a world entity, account-wide conditions, like boosts, are “faked” by copying them when you switch between avatars. Conditions also need to be carefully serialized and deserialized, because many conditions are not supposed to run out when you are offline.</p>

<p>As of the time of writing this, the core implementation of the condition system is available for testing in nightly work-in-progress builds of version 0.5.0. Some additional features still need to be implemented, including pausing conditions in hub regions and property ticking. Tickers specifically are going to have a huge effect on the entire combat, because they are also going to allow us to implement various primary and secondary resources used by different heroes.</p>

<h2 id="bounce-powers">Bounce Powers</h2>

<p>As alluded to above, bounce powers are also now functional. This includes targeted powers that bounce around, like Storm’s Chain Lightning, bouncing projectiles, such as Captain America’s Shield Bounce, and powers where the avatar is bouncing in a chain of attacks, like Daredevil’s Street Sweeper. What is interesting about all of these is that everything about them is smoke and mirrors, <em>there is no actual movement happening</em>.</p>

<p>When a power is applied, its properties and the properties of its owner are snapshotted and recorded into a <code class="language-plaintext highlighter-rouge">PowerPayload</code> object. Some of these properties determine the “bounciness” of the power: <code class="language-plaintext highlighter-rouge">BounceCountPayload</code>, <code class="language-plaintext highlighter-rouge">BounceRangePayload</code>, and <code class="language-plaintext highlighter-rouge">BounceSpeedPayload</code>. When the payload is delivered and its effects are applied to its target, the game checks the remaining bounce count, and if it is higher than zero, it “bounces” the payload to another target, which simply changes its target id and schedules a new delivery after a delay. This delay is calculated from the payload’s bounce range and speed.</p>

<p>All the visuals of an object physically bouncing between targets is completely faked by the client. Every time a bounce delay is calculated, the server informs the client about it using the following message:</p>

<div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">NetMessagePowerBounce</span> <span class="p">{</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">idPowerUser</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">idLastTarget</span>    <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">required</span> <span class="n">NetStructPoint3</span>    <span class="na">lastTargetPosition</span>    <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">idNewTarget</span>    <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">powerPrototypeId</span>    <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">userOriginalAssetId</span>    <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">userCurrentAssetId</span>    <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">float</span>    <span class="na">projectileSpeed</span>    <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">int32</span>    <span class="na">fxRandomSeed</span>    <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The client uses data from this message to fake all the movement.</p>

<p>One last piece of the puzzle is how bounce targets are determined. When a bouncing payload’s target is set, its id is recorded as a <code class="language-plaintext highlighter-rouge">PowerPreviousTargetsID</code> property: depending on the power, these properties are later used to deprioritize or even completely avoid targets (if the <code class="language-plaintext highlighter-rouge">BounceCanRepeatTarget</code> flag is not set on the payload). When the payload hits a target, the game scans all entities in a radius around it, skipping those that have the <code class="language-plaintext highlighter-rouge">InvalidBounceTarget</code> property or are not valid targets for a particular power for other reasons. The most suitable target is then picked, taking into account distance, whether the entity has already been hit by this payload, and whether it is an enemy or a destructible environment object. The highest priority is given to closest enemies that have not been hit.</p>

<p>The bouncing continues until the payload either runs out of bounces or fails to find a new valid target. When the bouncing ends, the client is notified of it via one final <code class="language-plaintext highlighter-rouge">NetMessagePowerBounce</code>, which it uses to play the finishing visual effect or animation (e.g. a weapon returning to its owner). And with all of that we have bouncing:</p>

<div><video controls="" width="100%" /><source src="/MHServerEmu/assets/blog/progress-report/2024-12/bounce.webm" type="video/webm" /></div>

<p>This is a relatively minor addition in the grand scheme of things, but it made many powers across the entire hero roster usable.</p>

<h2 id="achievements-and-leaderboards">Achievements and Leaderboards</h2>

<p>While I was busy working on powers <del>and totally not grinding in Path of Exile 2</del>, Alex was hard at work implementing achievements and leaderboards, which utilize event-based tracking similar to missions, in which he has become quite an expert in it over the past months.</p>

<p>One peculiar thing about how achievements and leaderboards work is how their static data is delivered. The logical appoach would have been to have achievements be more rigid and rely on client-side data, while doing the leaderboards in a more dynamic way that relies on server data, but it is actually the other way around. The entire achievement database is sent from the server to the client on login, while all the leaderboards are hardcoded into the client and cannot be changed without a patch. Thankfully, we have a dump of the achievement database for version 1.52 we extracted from captured packets, which gave us a mostly complete dataset for this version. However, unfortunately, it is the only one we have, meaning that supporting achievements for other versions, like 1.48, is going to require pretty extensive reconstruction efforts using secondary sources, such as archived versions of the good old Marvel Heroes Compendium by Mjoll. We may have to build some custom tools to make the reconstruction process easier, but with enough time and effort this is a problem that can be solved. On the bright side, this also means that custom achievements will be relatively easy to implement.</p>

<p>Achievements are now functional and available for testing in nightly 0.5.0 builds. Some achievements may not be obtainable right now due to certain gameplay features not being implemented, but the overall achievement system is working, and more things will be properly tracked as they are done. The tracking for achievements also includes retroactive granting for some achievements, like reaching specific level thresholds and collecting thematic sets of items.</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-12/achievements.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2024-12/achievements.jpg" alt="Achievements" /></a></p>

<p>As I am writing this, Alex has now turned his attention to leaderboards, which proved to actually be a tougher nut to crack. One reason for this is that leaderboards have a lot of unfinished functionality, like guild leaderboards that were never used. They also required a pretty significant amount of backend work, mainly because leaderboards have instances that run in real time, with expired instances being archived in the database in case somebody decides to claim their rewards at some point in the future. All of this is in addition to tracking and reward systems similar to missions and achievements.</p>

<p>Although it was more laborious than expected, an early version of leaderboards is now being tested, and if things go well it will be merged and added to nightly builds relatively soon.</p>

<hr />

<p>That is all we have for you this year. See you all in the next one!</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">MHServerEmu Progress Report: November 2024</title><link href="https://crypto137.github.io/MHServerEmu/blog/2024/11/30/progress-report-november-2024.html" rel="alternate" type="text/html" title="MHServerEmu Progress Report: November 2024" /><published>2024-11-30T14:00:00+03:00</published><updated>2024-11-30T14:00:00+03:00</updated><id>https://crypto137.github.io/MHServerEmu/blog/2024/11/30/progress-report-november-2024</id><content type="html" xml:base="https://crypto137.github.io/MHServerEmu/blog/2024/11/30/progress-report-november-2024.html"><![CDATA[<!--more-->

<p><img src="/MHServerEmu/assets/blog/progress-report/2024-11/header.jpg" alt="MHServerEmu Progress Report - November 2024" /></p>

<p>Progress Report is back yet again to bring you all the latest updates on the development of MHServerEmu.</p>

<h2 id="040-and-beyond">0.4.0 and Beyond</h2>

<p>As I am writing this report, we are putting the finishing touches on the fourth stable release of MHServerEmu: version 0.4.0. The highlights of this release include all the loot updates we have done over the last three months, as well as a feature-complete implementation of the mission system that has been in the works since July. 0.4.0 will be released during the first week of December, before a certain event on the 6th that will hold the attention of many ARPG fans, including myself. Sorry if there will be limited updates next month!</p>

<p>While most of the updates in 0.4.0 focus on restoring features that give you reasons to play the game in the long term, for the next stable version I plan to focus on the long-awaited improvements to the moment-to-moment feel of the game, most of which require implementing additional power subsystems. I cannot give you an in-depth list of what is going to make it into 0.5.0 right now, but the first thing I am going to work on will be <em>conditions</em>, which is the term the game uses to refer to various buff and debuff effects. In addition to the obvious benefit of being able to apply various bonuses and penalties, this system is also important because enemy AI relies on some of the status effects applied by conditions to make decisions, such as moving around or using powers. Not having the right conditions can cause various issues, including client-server desynchronization when fighting teleporting bosses like Living Laser and MODOK, or Bullseye being able to run around while he is charging his instant kill attack.</p>

<p>In addition to this, Alex and Kawaikikinou have started working on implementing the achievement system. Unfortunately, this may take a little longer than expected: while most of the game data is mirrored to the client, the achievement system is implemented in a way that allowed the developers to modify achievement data without patching the client. The client receives a dump of the server’s achievement database when you log in, and we have a copy of such dump we extracted from packet captures, but the data the client receives is incomplete. There is enough information to reconstruct the missing data by cross-referencing localized text with prototype file names, but this is a pretty laborious and mostly manual process that is going to take some time.</p>

<p>We will talk more about 0.5.0 features in future reports as we get them working.</p>

<h2 id="vendors">Vendors</h2>

<p>One extra feature I was able to sneak into 0.4.0 is <em>vendors</em>. Previously it was already possible to sell items to vendors, but now you can also buy items using all sorts of currencies (including buying back the items you sold for credits), as well as level up vendors by donating items or completing influence missions.</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-11/vendors.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2024-11/vendors.jpg" alt="Vendors" /></a></p>

<p>As with many other systems in this game, there is a lot of smoke and mirrors to sell you (no pun intended) the illusion of buying items from NPCs in the game world, but the reality is much more self-centered. Items sold by various vendors are actually contained in inventories belonging to the <code class="language-plaintext highlighter-rouge">Player</code> entity, which represents your account data. When you interact with a vendor NPC, all the items available for sale technically already belong to you, and the cost you pay to purchase them is to move them from one inventory to another. The same is true for buyback: when you sell an item, you get credits for moving it from your general inventory to your buyback inventory. The buyback inventory is not persistent, so it resets when you transition to another region. Some items are flagged as <code class="language-plaintext highlighter-rouge">ClonedWhenPurchasedFromVendor</code>, which means purchasing them creates a duplicate that gets put into your inventory.</p>

<p>But where do these items actually come from? When you press the refresh button or level up a vendor, the game rolls four vendor-related properties that exist and get saved as part of your <code class="language-plaintext highlighter-rouge">Player</code> entity: <code class="language-plaintext highlighter-rouge">VendorRollAvatar</code>, <code class="language-plaintext highlighter-rouge">VendorRollLevel</code>, <code class="language-plaintext highlighter-rouge">VendorRollSeed</code>, and <code class="language-plaintext highlighter-rouge">VendorRollTableLevel</code>. The values of these properties are used as input settings for rolling the loot tables associated with the <em>vendor type</em> you refreshed or leveled up. Each vendor type contains one or more inventories, which are initially empty. When you interact with an NPC that has a <code class="language-plaintext highlighter-rouge">VendorType</code> property referring to a vendor type prototype, the game uses the previously determined input settings to roll the loot table and create the items this vendor is supposed to be selling. Because the loot table rolling algorithm is deterministic and all the input settings remain the same, you get the same items every time. The game tracks inventory slots the contain the items you have already purchased and filters them out the next time the loot table is rolled.</p>

<p>The prices displayed in the vendor panel are calculated by the client in parallel to the server, and this has been a major source of frustration. I have checked everything multiple times and calculated the formulas by hand for various input parameters, and no matter how you look at it, there are what appears to be pretty massive rounding errors happening client-side when calculating prices in credits. Unfortunately, I have not been able to find a way to replicate this behavior server-side yet, so for the time being the prices items are being bought and sold for will be slightly off. This affects only prices in credits as far as I can tell, and buy prices are affected more than sell prices, most likely due to the difference in coefficients used for calculating them.</p>

<p>With vendors implemented there is one side effect you can see: crafter NPCs now have their recipe lists populated and can also be leveled up. This is because crafters share their backend with vendors: every recipe is actually an item that is stored in the player’s inventory associated with a specific crafter type. “Items” representing recipes that unlock by leveling up your crafters are rolled using loot tables, same as items sold by regular vendors. As for recipes you can learn by using consumable items, they are stored separately in a special inventory called <code class="language-plaintext highlighter-rouge">PlayerCraftingRecipesLearned</code>. After a crafter’s recipe list is rolled, additional recipes contained in the <code class="language-plaintext highlighter-rouge">PlayerCraftingRecipesLearned</code> are duplicated and appended to the list. Please note that while you can level up your crafters in the current work-in-progress server builds, you cannot craft any recipes or learn new ones from consumable items.</p>

<p>Special vendor types, including Eternity Splinter and Odin Mark vendors, also work now, meaning you now have access to additional content, like the Classified Bovine Sector and Bovineheim portals you can purchase from Eternity Splinter vendors, as well as legendary items you can buy with Odin Marks. I have also put in some additional work to get legendary item leveling working. With all of this you should have plenty of medium-term goals to work towards while we work on restoring other features of the game.</p>

<h2 id="map-rotation">Map Rotation</h2>

<p>In this section I would like to talk about not a flashy new feature, but rather a frustrating bug that I have spent way too much time on than I probably should have.</p>

<p>First, let’s establish the background. Entities that can have a location in the game world are called <em>world entities</em>. A world entity can <em>enter</em> and <em>exit</em> the world: for example, when an item drops on the ground, it <em>enters</em> the world, but as soon as you pick it up, it <em>exits the world</em> and gets put into one of your inventories. Whether an entity is in the world or not can also be different between the client and the server. This is because the client simulates only the part of the world that is within the player’s proximity, while the server manages entire regions. However, the client can still be aware of entities that exist outside of its proximity, like other players, valuable items, and transitions to other regions.</p>

<p>In most cases entities outside of proximity are represented by map icons, and the client needs some way of knowing where to put them. The client cannot simulate locomotion without loading the environment, so instead there are two properties that world entities can have: <code class="language-plaintext highlighter-rouge">MapPosition</code> and <code class="language-plaintext highlighter-rouge">MapOrientation</code>. As the server simulates entities and locomotes them, it also periodically updates these two properties to notify when distant entities move or rotate. However, there was a problem: for some mysterious reason, map icons were not able to face bottom left directions. While this is an incredibly minor issue, it was bugging me (pun intended), so I had to get to the bottom of it.</p>

<p>Rotation in Marvel Heroes is expressed in radians rather than degrees. This is how most game engines do this, and the main reason is that while radians are less human-readable, they are easier and therefore faster to do calculations with. The game normalizes the results of most rotation-related calculations to a range of [-π ; π], which is also true for the <code class="language-plaintext highlighter-rouge">MapOrientation</code> property that holds a <code class="language-plaintext highlighter-rouge">float</code> type with a value range of approximately [-3.14 ; 3.14]. Here is a diagram to visualize what it looks like within the context of the coordinate system used by Marvel Heroes:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-11/rotation-1.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-11/rotation-1.png" alt="Rotation 1" /></a></p>

<p>If you look carefully, you can probably notice what was causing the issue with bottom left directions specifically: they are expressed by <em>negative values</em>. Why is this an issue? Each entity property has a minimum and maximum allowed value, and everything outside of this range is clamped. For <code class="language-plaintext highlighter-rouge">MapOrientation</code> this range is [0 ; 65535], meaning any negative values get clamped to zero. What greatly added to the confusion was that in the packet captures we have the client in fact did receive negative values for the <code class="language-plaintext highlighter-rouge">MapOrientation</code> property from the server. So the instinct was to look for bugs in how properties work. However, this turned out to be a massive waste of time. You see, the clamping happens within the <code class="language-plaintext highlighter-rouge">PropertyCollection::SetPropertyValue()</code> method. However, the replication of the value is handled by the <code class="language-plaintext highlighter-rouge">ReplicatedPropertyCollection</code> class that inherits from <code class="language-plaintext highlighter-rouge">PropertyCollection</code>. In its <code class="language-plaintext highlighter-rouge">SetPropertyValue()</code> override it passes all the arguments to the implementation from the base class and then notifies the client if the property actually changed. Here is what the code looks like in our reimplementation:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">protected</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">SetPropertyValue</span><span class="p">(</span><span class="n">PropertyId</span> <span class="n">id</span><span class="p">,</span> <span class="n">PropertyValue</span> <span class="k">value</span><span class="p">,</span> <span class="n">SetPropertyFlags</span> <span class="n">flags</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">bool</span> <span class="n">changed</span> <span class="p">=</span> <span class="k">base</span><span class="p">.</span><span class="nf">SetPropertyValue</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="k">value</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">changed</span><span class="p">)</span>
        <span class="nf">MarkPropertyChanged</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="k">value</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">changed</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The issue is that the new value is passed to the base implementation <em>by value</em> rather than <em>by reference</em>, which means the code clamps <em>a copy</em> of the value that was passed, and the value that is sent to the client is unaffected by it! In other words, <em>both</em> the client and the server clamp the original negative value to zero. Therefore, it is not possible to make the client accept negative values for <code class="language-plaintext highlighter-rouge">MapOrientation</code> without modifying its prototype data.</p>

<p>Figuring all of this out was the hard part, and the solution was actually incredibly easy. Rather than normalizing the value to a range of [-π ; π], we now get rid of negative values by using a range of [0 ; 2π]:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-11/rotation-2.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-11/rotation-2.png" alt="Rotation 2" /></a></p>

<p>And with that icons for distant players can now face bottom left, as they should:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-11/rotation-3.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2024-11/rotation-3.jpg" alt="Rotation 3" /></a></p>

<p>As insignificant as this bug may seem to be, I wanted to talk about it because it is a great example of one of the main difficulties we have with this project. Because we no longer have access to the original game, at times it can be hard to distinguish issues with our implementation from bugs that existed back in the day.</p>

<hr />

<p>Thank you for following the development of MHServerEmu. See you next time!</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">MHServerEmu Progress Report: October 2024</title><link href="https://crypto137.github.io/MHServerEmu/blog/2024/10/31/progress-report-october-2024.html" rel="alternate" type="text/html" title="MHServerEmu Progress Report: October 2024" /><published>2024-10-31T17:55:00+03:00</published><updated>2024-10-31T17:55:00+03:00</updated><id>https://crypto137.github.io/MHServerEmu/blog/2024/10/31/progress-report-october-2024</id><content type="html" xml:base="https://crypto137.github.io/MHServerEmu/blog/2024/10/31/progress-report-october-2024.html"><![CDATA[<!--more-->

<p><img src="/MHServerEmu/assets/blog/progress-report/2024-10/header.jpg" alt="MHServerEmu Progress Report - October 2024" /></p>

<p>Time for the spookiest MHServerEmu Progress Report of the year.</p>

<h2 id="loot-continued">Loot Continued</h2>

<p>With most of the obvious low-hanging fruit features taken care of, this month it was time for me to work on a more time-consuming aspect of the game. After discussing this with Alex and some of the community members on our Discord server, I decided to continue iterating on our loot system implementation.</p>

<p>At the start of the month we had loot tables rolling, items dropping, and affixes being picked, but the game’s loot system is much broader than just items. In total there are 12 loot types:</p>

<ul>
  <li>
    <p><strong>Item</strong> - should be self-explanatory.</p>
  </li>
  <li>
    <p><strong>Agent</strong> - health, mana, and experience orbs, as well as boons.</p>
  </li>
  <li>
    <p><strong>Credits</strong> - legacy loot type from before currencies were implemented, credit piles are represented by agent entities (more on that later).</p>
  </li>
  <li>
    <p><strong>Experience</strong> - mission experience rewards.</p>
  </li>
  <li>
    <p><strong>Power Points</strong> - extra power points (pre-BUE missions only).</p>
  </li>
  <li>
    <p><strong>Health Bonus</strong> - max health bonuses (pre-BUE missions only).</p>
  </li>
  <li>
    <p><strong>Endurance Bonus</strong> - max primary resource (spirit, etc.) bonuses (pre-BUE missions only).</p>
  </li>
  <li>
    <p><strong>Real Money</strong> - special drop type used only for the <a href="https://web.archive.org/web/20150711031211/https://forums.marvelheroes.com/discussion/216905/marvel-heroes-2015-1-61-patch-notes">Vibranium Ticket promotion</a> in 2015.</p>
  </li>
  <li>
    <p><strong>Callback Nodes</strong> - actions that need to happen when loot is distributed, such as displaying a banner message.</p>
  </li>
  <li>
    <p><strong>Vanity Title</strong> - title unlocks.</p>
  </li>
  <li>
    <p><strong>Vendor XP</strong> - experience for leveling up vendors (this is also how Genosha influence rewards are implemented).</p>
  </li>
  <li>
    <p><strong>Currency</strong> - any non-credits currency that can be represented by either an item or an agent.</p>
  </li>
</ul>

<p>Loot can awarded through two types of <em>loot actions</em>: <em>spawning</em> and <em>giving</em>. Spawning creates loot represented in the game world by items and agents for players to pick up, while giving adds everything straight to players’ inventories. Only items, agents, credits, and currency can exist in the game world, everything else goes directly to players, even if the spawn loot action is requested.</p>

<p>Loot that needs to be clicked on to be picked up is represented by the <code class="language-plaintext highlighter-rouge">Item</code> entity class, while things that get picked automatically when you run over them exist as <code class="language-plaintext highlighter-rouge">Agent</code> entity instances. Here is a chart that shows how loot types relate to entity types that represent them:</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2024-10/loot-entity-types.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-10/loot-entity-types.png" alt="Loot Entity Types" /></a>
</center>

<p>Note that item and agent <em>loot types</em> are different from <code class="language-plaintext highlighter-rouge">Item</code> and <code class="language-plaintext highlighter-rouge">Agent</code> <em>entity types</em>. When loot tables are rolled, and an item or an agent drop node is encountered, the game checks if the entity prototype specified in the node has an <code class="language-plaintext highlighter-rouge">ItemCurrency</code> property defined. If it does, the drop gets designated as a currency loot type, rather than the loot type corresponding its underlying entity type. To add even more confusion to the mix, credits are their own drop type, and they are always represented by <code class="language-plaintext highlighter-rouge">Agent</code> entities. And because things were not hectic enough, <code class="language-plaintext highlighter-rouge">Agent</code> entities representing currencies are referred to as currency <em>items</em> in the game data.</p>

<p>With all of that figured out, we now had non-item drops spawning. The next thing to do was implementing pickups for orb (agent) drops when you run over them.</p>

<p>The obvious approach would have been to use the physics system to detect when avatars overlap with orbs, and do the pickup interaction in the handler for this event. There was a problem though: most orb entities do not have a collision shape defined, meaning they are not capable of overlapping with other world entities. The correct way to do it was to implement the <code class="language-plaintext highlighter-rouge">ProceduralProfileOrbPrototype</code> and do the pickup interaction within the <code class="language-plaintext highlighter-rouge">Think()</code> method. Orbs actually have the <code class="language-plaintext highlighter-rouge">AICustomThinkRateMS</code> property, allowing them to “think” and check distances to potential receipients on every frame, making this interaction more responsive than it would have been with default AI settings.</p>

<p>Here is what the current implementation of <code class="language-plaintext highlighter-rouge">Think()</code> for orbs looks like:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Think</span><span class="p">(</span><span class="n">AIController</span> <span class="n">ownerController</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">ProceduralAI</span> <span class="n">proceduralAI</span> <span class="p">=</span> <span class="n">ownerController</span><span class="p">.</span><span class="n">Brain</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">proceduralAI</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="n">Agent</span> <span class="n">agent</span> <span class="p">=</span> <span class="n">ownerController</span><span class="p">.</span><span class="n">Owner</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">agent</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="n">Game</span> <span class="n">game</span> <span class="p">=</span> <span class="n">agent</span><span class="p">.</span><span class="n">Game</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">game</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

    <span class="c1">// Destroy this orb if it has finished shrinking</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ShrinkageDurationMS</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">TimeSpan</span> <span class="n">shrinkageEndTime</span> <span class="p">=</span> <span class="n">agent</span><span class="p">.</span><span class="n">Properties</span><span class="p">[</span><span class="n">PropertyEnum</span><span class="p">.</span><span class="n">AICustomTimeVal1</span><span class="p">]</span> 
            <span class="p">+</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromMilliseconds</span><span class="p">(</span><span class="n">ShrinkageDelayMS</span><span class="p">)</span> 
            <span class="p">+</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromMilliseconds</span><span class="p">(</span><span class="n">ShrinkageDurationMS</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">game</span><span class="p">.</span><span class="n">CurrentTime</span> <span class="p">&gt;=</span> <span class="n">shrinkageEndTime</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">agent</span><span class="p">.</span><span class="nf">Kill</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="n">KillFlags</span><span class="p">.</span><span class="n">NoDeadEvent</span> <span class="p">|</span> <span class="n">KillFlags</span><span class="p">.</span><span class="n">NoExp</span> <span class="p">|</span> <span class="n">KillFlags</span><span class="p">.</span><span class="n">NoLoot</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Find an avatar that can potentially pick this orb up</span>
    <span class="n">Avatar</span> <span class="n">avatar</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>

    <span class="kt">ulong</span> <span class="n">restrictedToPlayerGuid</span> <span class="p">=</span> <span class="n">agent</span><span class="p">.</span><span class="n">Properties</span><span class="p">[</span><span class="n">PropertyEnum</span><span class="p">.</span><span class="n">RestrictedToPlayerGuid</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">restrictedToPlayerGuid</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Player</span> <span class="n">player</span> <span class="p">=</span> <span class="n">game</span><span class="p">.</span><span class="n">EntityManager</span><span class="p">.</span><span class="n">GetEntityByDbGuid</span><span class="p">&lt;</span><span class="n">Player</span><span class="p">&gt;(</span><span class="n">restrictedToPlayerGuid</span><span class="p">);</span>
        <span class="c1">// Get current avatar for the player we are looking for</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">player</span><span class="p">?.</span><span class="n">CurrentAvatar</span><span class="p">?.</span><span class="n">IsInWorld</span> <span class="p">==</span> <span class="k">true</span><span class="p">)</span>
            <span class="n">avatar</span> <span class="p">=</span> <span class="n">player</span><span class="p">.</span><span class="n">CurrentAvatar</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// If we found an avatar, check if it can pick this orb up</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">avatar</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Vector3</span> <span class="n">agentPosition</span> <span class="p">=</span> <span class="n">agent</span><span class="p">.</span><span class="n">RegionLocation</span><span class="p">.</span><span class="n">Position</span><span class="p">;</span>
        <span class="n">Vector3</span> <span class="n">avatarPosition</span> <span class="p">=</span> <span class="n">avatar</span><span class="p">.</span><span class="n">RegionLocation</span><span class="p">.</span><span class="n">Position</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">Vector3</span><span class="p">.</span><span class="nf">DistanceSquared2D</span><span class="p">(</span><span class="n">agentPosition</span><span class="p">,</span> <span class="n">avatarPosition</span><span class="p">)</span> <span class="p">&lt;</span> <span class="n">_orbRadiusSquared</span> <span class="p">&amp;&amp;</span> <span class="nf">TryGetPickedUp</span><span class="p">(</span><span class="n">agent</span><span class="p">,</span> <span class="n">avatar</span><span class="p">))</span>
            <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The actual pickup interaction happens within <code class="language-plaintext highlighter-rouge">TryGetPickedUp()</code>: this includes applying orb effects, such as adding currency, awarding XP, and activating powers (restoring health/spirit, applying boon buffs, etc.). There is still some additional AI behavior left to implement: health and spirit orbs are supposed to be able to follow avatars that get close enough to them, and some orbs need to be non-instanced and available for all players to pick up. This is something we will be iterating on in the future.</p>

<p>With more varied loot being able to drop and be picked up, it was now time to expand the range of available <em>loot drop event types</em>. Everything so far has been using the four events associated with defeating enemies: <code class="language-plaintext highlighter-rouge">OnKilled</code>, <code class="language-plaintext highlighter-rouge">OnKilledChampion</code>, <code class="language-plaintext highlighter-rouge">OnKilledElite</code>, and <code class="language-plaintext highlighter-rouge">OnKilledMiniBoss</code>. However, for treasure chests it was necessary to implement a separate event type called <code class="language-plaintext highlighter-rouge">OnInteractedWith</code>, which was not possible to trigger without a more in-depth interaction system.</p>

<p>I did not have to go through the trouble of overhauling the entire interaction system: as part of his work on missions, Alex had already done most of the work needed. However, missions are a huge all-encompassing system, and merging the development branch would have been too disruptive at this stage. So instead I went through it and manually ported just the parts that could work on their own, including the new interaction system. There were a few small crashes as a result of this porting process, but they were very quickly dealt with, and implementing treasure chest loot was as easy as adding some function calls in the right place. I also had to do a bit of refactoring to isolate some code from <code class="language-plaintext highlighter-rouge">OnKilled</code> event handlers that could be shared with <code class="language-plaintext highlighter-rouge">OnInteractedWith</code>. With that taken care of, we now have a much more satifying treasure room experience.</p>

<p>The next thing to do became obvious as soon as currency items started dropping: without cooldowns, entire screens were covered with Eternity Splinters, which was obviously not how it was supposed to work. Work on this is still ongoing at the time of writing this, but the iconic six-minute Eternity Splinter timer is now working in nightly builds as it should.</p>

<p>This is just one type of loot cooldowns though. As with almost everything in this game, there are many almost conflicting systems that were piled up on top of one another. For instance, some loot cooldowns can be tied to specific entities rather than drops, like terminal bosses you would get Cube Shards from. Other cooldowns are rollover-based, meaning your loot is gated by specific daily or weekly reset times rather than amount of time since your last drop. Untangling all of this is going to take some time, which is what I am going to be continuing to work on next month.</p>

<h2 id="lets-get-dangerous">Let’s Get Dangerous</h2>

<p><em>Alex has some details to share on what he has been working on in October.</em></p>

<hr />

<p>Hello everyone, this is AlexBond. In this report I would like to <del>overwhelm you with code</del> talk about how the <code class="language-plaintext highlighter-rouge">SpawnMap</code> class works, how <em>Legendary Missions</em> are rolled, and how I got into the <em>Danger Room</em>.</p>

<h3 id="spawnmap">SpawnMap</h3>

<p><code class="language-plaintext highlighter-rouge">AreaPrototype</code> contains various population parameters, and some of them have a <code class="language-plaintext highlighter-rouge">SpawnMap</code> prefix. We used to ignore them, but now we took advantage of them to implement an additional spawning system.</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-10/alex-1.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-10/alex-1.png" alt="AlexBond 1" /></a></p>

<p>A <code class="language-plaintext highlighter-rouge">SpawnMap</code> (also referred to as a <code class="language-plaintext highlighter-rouge">HeatMap</code>) is like a bitmap image with a resolution of 256x256, in which each “pixel” represents a byte of information of type <code class="language-plaintext highlighter-rouge">HeatData</code>. The contained “heat” is transferred to clusters of mobs for spawning.</p>

<p>When we initialize this class, we iterate over all coordinates within our area to determine walkable sections using the navi system.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">y</span> <span class="p">&lt;</span> <span class="n">_boundsY</span><span class="p">;</span> <span class="n">y</span><span class="p">++)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">x</span> <span class="p">&lt;</span> <span class="n">_boundsX</span><span class="p">;</span> <span class="n">x</span><span class="p">++)</span>
    <span class="p">{</span>
        <span class="n">Vector3</span> <span class="n">position</span> <span class="p">=</span> <span class="n">center</span> <span class="p">+</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="n">Resolution</span> <span class="p">*</span> <span class="n">x</span><span class="p">,</span> <span class="n">Resolution</span> <span class="p">*</span> <span class="n">y</span><span class="p">,</span> <span class="m">0.0f</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">navi</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="n">position</span><span class="p">,</span> <span class="n">spawnRadius</span><span class="p">,</span> <span class="k">new</span> <span class="nf">WalkPathFlagsCheck</span><span class="p">()))</span>
        <span class="p">{</span>
            <span class="n">_heatMap</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="p">=</span> <span class="n">HeatData</span><span class="p">.</span><span class="n">Min</span><span class="p">;</span>
            <span class="n">_spawnZone</span><span class="p">++;</span>
        <span class="p">}</span>
        <span class="n">index</span><span class="p">++;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Using the <code class="language-plaintext highlighter-rouge">spawnZone</code> parameter, we calculate the heat density of the population that is going to be spawned. This density is then applied to our <code class="language-plaintext highlighter-rouge">SpawnMap</code> instance.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Add heat to HeatMap</span>
<span class="n">_pool</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="n">index</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">index</span> <span class="p">&lt;</span> <span class="n">_heatMap</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">index</span><span class="p">++)</span>
<span class="p">{</span>
    <span class="n">HeatData</span> <span class="n">heatData</span> <span class="p">=</span> <span class="n">_heatMap</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="nf">HasFlags</span><span class="p">(</span><span class="n">heatData</span><span class="p">))</span> <span class="k">continue</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">heat</span> <span class="p">=</span> <span class="nf">GetHeat</span><span class="p">(</span><span class="n">heatData</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">heat</span> <span class="p">+</span> <span class="n">_heatBase</span> <span class="p">&lt;</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">HeatData</span><span class="p">.</span><span class="n">Max</span><span class="p">)</span>
        <span class="n">_heatMap</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="p">=</span> <span class="p">(</span><span class="n">HeatData</span><span class="p">)(</span><span class="n">heat</span> <span class="p">+</span> <span class="n">_heatBase</span><span class="p">);</span>
    <span class="k">else</span>
        <span class="n">_pool</span> <span class="p">+=</span> <span class="n">_heatBase</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The surplus heat is transferred to a <em>pool</em>, and at intervals defined by the <code class="language-plaintext highlighter-rouge">SpawnMapPoolTickMS</code> parameter we attempt to bring back the heat from the pool to the map.</p>

<p>Because <code class="language-plaintext highlighter-rouge">SpawnMap</code> instances update every time a player moves, they require some additional optimizations. To reduce server load, only areas around players defined by <code class="language-plaintext highlighter-rouge">SpawnGimbal</code> instances are populated.</p>

<p>A <code class="language-plaintext highlighter-rouge">SpawnGimbal</code> is a sort of shifting area that has already been checked, in which a player is located. This system allows us to significantly reduce server load for processing areas that have already been populated.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">void</span> <span class="nf">UpdateSpawnMap</span><span class="p">(</span><span class="n">Vector3</span> <span class="n">position</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Region</span> <span class="n">region</span> <span class="p">=</span> <span class="nf">GetRegion</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">region</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="n">_spawnGimbal</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_spawnGimbal</span><span class="p">.</span><span class="nf">ProjectGimbalPosition</span><span class="p">(</span><span class="n">region</span><span class="p">.</span><span class="n">Aabb</span><span class="p">,</span> <span class="n">position</span><span class="p">,</span> <span class="k">out</span> <span class="n">Point2</span> <span class="n">coord</span><span class="p">)</span> <span class="p">==</span> <span class="k">false</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_spawnGimbal</span><span class="p">.</span><span class="n">Coord</span> <span class="p">==</span> <span class="n">coord</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

    <span class="kt">bool</span> <span class="n">inGimbal</span> <span class="p">=</span> <span class="n">_spawnGimbal</span><span class="p">.</span><span class="nf">InGimbal</span><span class="p">(</span><span class="n">coord</span><span class="p">);</span>
    <span class="n">_spawnGimbal</span><span class="p">.</span><span class="nf">UpdateGimbal</span><span class="p">(</span><span class="n">coord</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">inGimbal</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

    <span class="n">Aabb</span> <span class="n">volume</span> <span class="p">=</span> <span class="n">_spawnGimbal</span><span class="p">.</span><span class="nf">HorizonVolume</span><span class="p">(</span><span class="n">position</span><span class="p">);</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">area</span> <span class="k">in</span> <span class="n">region</span><span class="p">.</span><span class="nf">IterateAreas</span><span class="p">(</span><span class="n">volume</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">area</span><span class="p">.</span><span class="n">SpawnMap</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="n">area</span><span class="p">.</span><span class="n">PopulationArea</span><span class="p">?.</span><span class="nf">UpdateSpawnMap</span><span class="p">(</span><span class="n">position</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>There is a trade-off though: when a player moves at high speed, groups of enemies can spawn right at their position, but this behavior is accurate to the original game. The reason for these delays is that spawning takes at least 500 ms, which is not enough for enemies to spawn ahead of time. We can reduce this number, but then it would take longer to wait a spawn to happen.</p>

<p>When <code class="language-plaintext highlighter-rouge">UpdateHeatMap()</code> is called, the related population is spawned in “hot spots”. These spots are projected to the <code class="language-plaintext highlighter-rouge">HeatMap</code>, and the heat is subtracted from those points, along with neighboring points within a certain radius. This frees up space for a group of mobs represented by a <code class="language-plaintext highlighter-rouge">ClusterObject</code>, and allows us to spread the population evenly.</p>

<p>Clusters may contain special <code class="language-plaintext highlighter-rouge">BlackOutZone</code> objects that prevent spawning from happening. We take these objects into account by transferring heat from their locations into the common pool.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">index</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">spawnZone</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">y</span> <span class="p">&lt;</span> <span class="n">_boundsY</span><span class="p">;</span> <span class="n">y</span><span class="p">++)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">x</span> <span class="p">&lt;</span> <span class="n">_boundsX</span><span class="p">;</span> <span class="n">x</span><span class="p">++)</span>
    <span class="p">{</span>
        <span class="n">_heatMap</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="p">&amp;=</span> <span class="p">~</span><span class="n">HeatData</span><span class="p">.</span><span class="n">BlackOut</span><span class="p">;</span>

        <span class="n">Vector3</span> <span class="n">position</span> <span class="p">=</span> <span class="n">center</span> <span class="p">+</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="n">Resolution</span> <span class="p">*</span> <span class="n">x</span><span class="p">,</span> <span class="n">Resolution</span> <span class="p">*</span> <span class="n">y</span><span class="p">,</span> <span class="m">0.0f</span><span class="p">);</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="n">BlackOutZone</span> <span class="n">zone</span> <span class="k">in</span> <span class="n">zones</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">float</span> <span class="n">radiusSq</span> <span class="p">=</span> <span class="n">MathHelper</span><span class="p">.</span><span class="nf">Square</span><span class="p">(</span><span class="n">zone</span><span class="p">.</span><span class="n">Sphere</span><span class="p">.</span><span class="n">Radius</span><span class="p">);</span>
            <span class="kt">float</span> <span class="n">distanceSq</span> <span class="p">=</span> <span class="n">Vector3</span><span class="p">.</span><span class="nf">DistanceSquared2D</span><span class="p">(</span><span class="n">position</span><span class="p">,</span> <span class="n">zone</span><span class="p">.</span><span class="n">Sphere</span><span class="p">.</span><span class="n">Center</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">distanceSq</span> <span class="p">&lt;</span> <span class="n">radiusSq</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">int</span> <span class="n">heat</span> <span class="p">=</span> <span class="nf">GetHeat</span><span class="p">(</span><span class="n">_heatMap</span><span class="p">[</span><span class="n">index</span><span class="p">]);</span>
                <span class="n">_heatMap</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="p">=</span> <span class="p">(</span><span class="n">_heatMap</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="p">&amp;</span> <span class="n">HeatData</span><span class="p">.</span><span class="n">FlagMask</span><span class="p">)</span> <span class="p">|</span> <span class="n">HeatData</span><span class="p">.</span><span class="n">BlackOut</span><span class="p">;</span>
                <span class="nf">PoolHeat</span><span class="p">(</span><span class="n">heat</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nf">HasFlags</span><span class="p">(</span><span class="n">_heatMap</span><span class="p">[</span><span class="n">index</span><span class="p">])</span> <span class="p">==</span> <span class="k">false</span><span class="p">)</span> <span class="n">spawnZone</span><span class="p">++;</span>
        <span class="n">index</span><span class="p">++;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>When a group of enemies is fully destroyed, the heat they took is returned to the common pool. This gives regions an endless lifespan, which is crucial for public regions.  This way newly arriving players will encounter a living world, rather than a wasteland from past battles. Ensuring this is the primary function of the <code class="language-plaintext highlighter-rouge">SpawnMap</code> class.</p>

<p>As you can see, there are numerous different systems for spawning: <code class="language-plaintext highlighter-rouge">PopulationArea</code>, <code class="language-plaintext highlighter-rouge">RespawnDestructibles</code>, <code class="language-plaintext highlighter-rouge">MetaGame</code>, <code class="language-plaintext highlighter-rouge">Mission</code>, <code class="language-plaintext highlighter-rouge">SpawnMap</code>, <code class="language-plaintext highlighter-rouge">Spawner</code>, and more. Here is a recap of what they are all for:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">PopulationArea</code> populates regions without using markers.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">RespawnDestructibles</code> allows props, such as cars and garbage cans, to be restored.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">MetaGame</code> populates regions with timer-based events or waves.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Mission</code> spawns in response to event triggers.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">SpawnMap</code> prevents regions from becoming barren wastelands.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Spawner</code> can activate when a player enters its radius, or via some other kind of trigger.</p>
  </li>
</ul>

<p>In other words, dynamic spawning makes the game more alive. Now let’s take a look at legendary missions.</p>

<h3 id="legendary-missions">Legendary Missions</h3>

<p>This game has a lot of activities: in addition to the story, region events, and terminal bounties, there are also Legendary Missions, Daily Missions, Shared Quests, Omega Missions, and Weekly Missions. So how does it all work?</p>

<p>When a player enters a region, their <code class="language-plaintext highlighter-rouge">MissionManager</code> runs <code class="language-plaintext highlighter-rouge">InitializeForPlayer()</code> and does a number of random picks.</p>

<p>First it picks <em>categories</em> through <code class="language-plaintext highlighter-rouge">LegendaryMissionCategoryPicker</code>, and then for each category it picks a random mission using <code class="language-plaintext highlighter-rouge">PickLegendaryMissionForCategory()</code>. At first it seems simple enough, but there is a catch.</p>

<p>For example, a mission was picked, and we don’t like it. What do we do in this case? That’s right, we reroll it with credits!</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2024-10/alex-2.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-10/alex-2.png" alt="AlexBond 6" /></a>
</center>

<p>In this case the current mission must be added to a <code class="language-plaintext highlighter-rouge">LegendaryMissionBlacklist</code>, and we should receive a new one. This is also used when we complete a mission, so that we don’t get the same one multiple times in a row. But what happens when all missions get blacklisted? In this case we need a second round of picking.</p>

<p>This is what the code looks like. Confusing, isn’t it?</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="n">PrototypeId</span> <span class="nf">PickLegendaryMission</span><span class="p">()</span>
<span class="p">{</span> 
    <span class="n">PrototypeId</span> <span class="n">pickedMissionRef</span> <span class="p">=</span> <span class="n">PrototypeId</span><span class="p">.</span><span class="n">Invalid</span><span class="p">;</span>

    <span class="n">Picker</span><span class="p">&lt;</span><span class="n">LegendaryMissionCategoryPrototype</span><span class="p">&gt;</span> <span class="n">picker</span> <span class="p">=</span> <span class="nf">LegendaryMissionCategoryPicker</span><span class="p">();</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">picker</span><span class="p">.</span><span class="nf">PickRemove</span><span class="p">(</span><span class="k">out</span> <span class="n">LegendaryMissionCategoryPrototype</span> <span class="n">categoryProto</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="n">List</span><span class="p">&lt;</span><span class="n">PrototypeGuid</span><span class="p">&gt;</span> <span class="n">blacklist</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">categoryProto</span><span class="p">.</span><span class="n">BlacklistLength</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">PrototypeGuid</span> <span class="n">guid</span> <span class="p">=</span> <span class="n">GameDatabase</span><span class="p">.</span><span class="nf">GetPrototypeGuid</span><span class="p">(</span><span class="n">categoryProto</span><span class="p">.</span><span class="n">DataRef</span><span class="p">);</span>
            <span class="n">_legendaryMissionBlacklist</span><span class="p">.</span><span class="nf">TryGetValue</span><span class="p">(</span><span class="n">guid</span><span class="p">,</span> <span class="k">out</span> <span class="n">blacklist</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">pickedMissionRef</span> <span class="p">=</span> <span class="nf">PickLegendaryMissionForCategory</span><span class="p">(</span><span class="n">categoryProto</span><span class="p">,</span> <span class="n">blacklist</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">pickedMissionRef</span> <span class="p">!=</span> <span class="n">PrototypeId</span><span class="p">.</span><span class="n">Invalid</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">pickedMissionRef</span> <span class="p">==</span> <span class="n">PrototypeId</span><span class="p">.</span><span class="n">Invalid</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">picker</span> <span class="p">=</span> <span class="nf">LegendaryMissionCategoryPicker</span><span class="p">();</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">picker</span><span class="p">.</span><span class="nf">PickRemove</span><span class="p">(</span><span class="n">LegendaryMissionCategoryPrototype</span> <span class="kt">var</span> <span class="n">categoryProto</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="n">pickedMissionRef</span> <span class="p">=</span> <span class="nf">PickLegendaryMissionForCategory</span><span class="p">(</span><span class="n">categoryProto</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">pickedMissionRef</span> <span class="p">!=</span> <span class="n">PrototypeId</span><span class="p">.</span><span class="n">Invalid</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">pickedMissionRef</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>When picking Legendary Missions, one thing that needs to be taken into account is its restriction defined using the <code class="language-plaintext highlighter-rouge">EvalCanStart</code> eval. It uses the same formula for all Legendary Missions that looks like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>EvalCanStart = ( ( CharacterLevelProp &gt; 19 ) &amp;&amp; ( CharacterLevelProp &lt; 61 ) )
</code></pre></div></div>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-10/alex-3.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-10/alex-3.png" alt="AlexBond 3" /></a></p>

<p>This ensures that Legendary Missions are unavailable until level 20. However, the game designers did not define separate formulas for each mission, which is why I would get Legendary Missions for chapter 9 at level 20. I wanted to do them as I went through the story, so I had to spend all my credits on rerolling!</p>

<p>In addition to Legendary Missions there are also <em>Daily Missions</em>, and they use a different picking method.</p>

<p>First, the current <code class="language-plaintext highlighter-rouge">CalendarDay</code> is determined, and if it’s larger than the last recorded day, daily missions get rerolled.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">calendarDay</span> <span class="p">=</span> <span class="nf">CalendarDay</span><span class="p">();</span>
<span class="kt">int</span> <span class="n">lastDailyDay</span> <span class="p">=</span> <span class="n">Player</span><span class="p">.</span><span class="n">Properties</span><span class="p">[</span><span class="n">PropertyEnum</span><span class="p">.</span><span class="n">LastDailyMissionCalendarDay</span><span class="p">];</span>
<span class="k">if</span> <span class="p">(</span><span class="n">lastDailyDay</span> <span class="p">&lt;</span> <span class="n">calendarDay</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nf">ResetDailyMissions</span><span class="p">(</span><span class="n">calendarDay</span><span class="p">,</span> <span class="n">lastDailyDay</span><span class="p">);</span>
    <span class="nf">RollDailyMissions</span><span class="p">();</span>
    <span class="n">Player</span><span class="p">.</span><span class="n">Properties</span><span class="p">[</span><span class="n">PropertyEnum</span><span class="p">.</span><span class="n">LastDailyMissionCalendarDay</span><span class="p">]</span> <span class="p">=</span> <span class="n">calendarDay</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>As part of the reroll process, the current day of the week is determined, and missions for this day are activated.</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-10/alex-4.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2024-10/alex-4.jpg" alt="AlexBond 4" /></a></p>

<p>The same happens for <em>Advanced Missions</em>, but with blacklists and two picking passes, similar to Legendary Missions.</p>

<p>But what happens if someone plays at night and waits for the daily reset at midnight? In this case we need a clock: events scheduled using <code class="language-plaintext highlighter-rouge">ScheduleDailyMissionUpdate()</code> check every second whether the current day ended, like a second hand on a clock.</p>

<p>With this taken care of, let’s move onto another fun activity.</p>

<h3 id="danger-room">Danger Room</h3>

<p>The main difficulty with implementing the <em>Danger Room</em> mode is regenerating the same region with different input data.</p>

<p>Here is what the insides of a generator prototype for such region look like:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-10/alex-5.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-10/alex-5.png" alt="AlexBond 5" /></a></p>

<p>The current mode is chosen based on the <code class="language-plaintext highlighter-rouge">EndlessLevel</code> parameter like this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="n">EndlessThemeEntryPrototype</span> <span class="nf">GetEndlessGeneration</span><span class="p">(</span><span class="kt">int</span> <span class="n">randomSeed</span><span class="p">,</span> <span class="kt">int</span> <span class="n">endlessLevel</span><span class="p">,</span> <span class="kt">int</span> <span class="n">endlessLevelsTotal</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">EndlessThemes</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="n">endlessLevel</span> <span class="p">&lt;=</span> <span class="m">0</span> <span class="p">||</span> <span class="n">endlessLevelsTotal</span> <span class="p">&lt;=</span> <span class="m">0</span><span class="p">)</span> <span class="k">return</span> <span class="k">null</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">totalThemes</span> <span class="p">=</span> <span class="n">EndlessThemes</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">randomIndex</span> <span class="p">=</span> <span class="n">randomSeed</span> <span class="p">%</span> <span class="n">totalThemes</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">endlessOffset</span> <span class="p">=</span> <span class="p">(</span><span class="n">endlessLevel</span> <span class="p">-</span> <span class="m">1</span><span class="p">)</span> <span class="p">/</span> <span class="n">endlessLevelsTotal</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">selectedIndex</span> <span class="p">=</span> <span class="p">(</span><span class="n">randomIndex</span> <span class="p">+</span> <span class="n">endlessOffset</span><span class="p">)</span> <span class="p">%</span> <span class="n">totalThemes</span><span class="p">;</span>

    <span class="n">EndlessThemePrototype</span> <span class="n">EndlessTheme</span> <span class="p">=</span> <span class="n">EndlessThemes</span><span class="p">[</span><span class="n">selectedIndex</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">levelInTheme</span> <span class="p">=</span> <span class="n">endlessLevel</span> <span class="p">%</span> <span class="n">endlessLevelsTotal</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">levelInTheme</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">EndlessTheme</span><span class="p">.</span><span class="n">TreasureRoom</span><span class="p">;</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">levelInTheme</span> <span class="p">==</span> <span class="n">endlessLevelsTotal</span> <span class="p">-</span> <span class="m">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">EndlessTheme</span><span class="p">.</span><span class="n">Boss</span><span class="p">;</span>
    <span class="k">else</span>
        <span class="k">return</span> <span class="n">EndlessTheme</span><span class="p">.</span><span class="n">Normal</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>For the initial region <code class="language-plaintext highlighter-rouge">EndlessLevel = 1</code>, so this function will return the <code class="language-plaintext highlighter-rouge">Normal</code> mode.</p>

<p>Next, in the <code class="language-plaintext highlighter-rouge">Normal</code> mode a random <code class="language-plaintext highlighter-rouge">Entry</code> is picked from <code class="language-plaintext highlighter-rouge">Challenges</code>, and a mission approprite for our difficulty <code class="language-plaintext highlighter-rouge">Tier</code> is started.</p>

<p>The transfer of all of these settings and affixes from a <code class="language-plaintext highlighter-rouge">DangerRoomScenario</code> item to a region goes through the following sequence:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">DangerRoomScenario</code> – <code class="language-plaintext highlighter-rouge">Transition</code> – <code class="language-plaintext highlighter-rouge">RegionContext</code> – <code class="language-plaintext highlighter-rouge">RegionSettings</code> – <code class="language-plaintext highlighter-rouge">Region</code></p>
</blockquote>

<p>When the first <code class="language-plaintext highlighter-rouge">EndlessLevel</code> is cleared, it is incremented by one, and the settings sequence looks like this:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">OldRegion</code> - <code class="language-plaintext highlighter-rouge">RegionContext</code> - <code class="language-plaintext highlighter-rouge">RegionSettings</code> - <code class="language-plaintext highlighter-rouge">Region</code></p>
</blockquote>

<p>All of these settings make the region transfer more complex. But there is more.</p>

<p>When a Danger Room mission is cleared, the client needs to receive an invitation to move to the next level. It looks like this:</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2024-10/alex-6.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2024-10/alex-6.jpg" alt="AlexBond 6" /></a>
</center>

<p>Implementing it was not easy at all. To create this dialog, we needed to implement a lot of classes, and the result is almost as complex as <code class="language-plaintext highlighter-rouge">CreateDialogA</code> in the Windows API:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">void</span> <span class="nf">CreateDialog</span><span class="p">(</span><span class="kt">ulong</span> <span class="n">playerGuid</span><span class="p">,</span> <span class="n">DialogPrototype</span> <span class="n">dialogProto</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_dialogs</span><span class="p">.</span><span class="nf">TryGetValue</span><span class="p">(</span><span class="n">playerGuid</span><span class="p">,</span> <span class="k">out</span> <span class="n">GameDialogInstance</span> <span class="n">dialog</span><span class="p">)</span> <span class="p">==</span> <span class="k">false</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">dialog</span> <span class="p">=</span> <span class="n">Game</span><span class="p">.</span><span class="n">GameDialogManager</span><span class="p">.</span><span class="nf">CreateInstance</span><span class="p">(</span><span class="n">playerGuid</span><span class="p">);</span>
        <span class="n">dialog</span><span class="p">.</span><span class="n">OnResponse</span> <span class="p">=</span> <span class="n">_onResponseAction</span><span class="p">;</span>
        <span class="n">dialog</span><span class="p">.</span><span class="n">Message</span><span class="p">.</span><span class="n">LocaleString</span> <span class="p">=</span> <span class="n">dialogProto</span><span class="p">.</span><span class="n">Text</span><span class="p">;</span>
        <span class="n">dialog</span><span class="p">.</span><span class="n">Options</span> <span class="p">=</span> <span class="n">DialogOptionEnum</span><span class="p">.</span><span class="n">ScreenBottom</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">dialogProto</span><span class="p">.</span><span class="n">Button1</span> <span class="p">!=</span> <span class="n">LocaleStringId</span><span class="p">.</span><span class="n">Blank</span><span class="p">)</span>
            <span class="n">dialog</span><span class="p">.</span><span class="nf">AddButton</span><span class="p">(</span><span class="n">GameDialogResultEnum</span><span class="p">.</span><span class="n">eGDR_Option1</span><span class="p">,</span> <span class="n">dialogProto</span><span class="p">.</span><span class="n">Button1</span><span class="p">,</span> <span class="n">dialogProto</span><span class="p">.</span><span class="n">Button1Style</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">dialogProto</span><span class="p">.</span><span class="n">Button2</span> <span class="p">!=</span> <span class="n">LocaleStringId</span><span class="p">.</span><span class="n">Blank</span><span class="p">)</span>
            <span class="n">dialog</span><span class="p">.</span><span class="nf">AddButton</span><span class="p">(</span><span class="n">GameDialogResultEnum</span><span class="p">.</span><span class="n">eGDR_Option2</span><span class="p">,</span> <span class="n">dialogProto</span><span class="p">.</span><span class="n">Button2</span><span class="p">,</span> <span class="n">dialogProto</span><span class="p">.</span><span class="n">Button2Style</span><span class="p">);</span>

        <span class="n">_dialogs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">playerGuid</span><span class="p">,</span> <span class="n">dialog</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">dialog</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
        <span class="n">Game</span><span class="p">.</span><span class="n">GameDialogManager</span><span class="p">.</span><span class="nf">ShowDialog</span><span class="p">(</span><span class="n">dialog</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here is how it works: finishing a mission initiates <code class="language-plaintext highlighter-rouge">MetaStateShutdown</code> and creates a dialog that is relayed to the client through <code class="language-plaintext highlighter-rouge">NetMessagePostDialogToClient</code>. The player presses the dialog button, and the client responds with <code class="language-plaintext highlighter-rouge">NetMessageDialogResult</code> that triggers the <code class="language-plaintext highlighter-rouge">OnDialogResult()</code> event on the server. <code class="language-plaintext highlighter-rouge">OnDialogResult()</code> calls <code class="language-plaintext highlighter-rouge">MetaStateShutdown.OnResponse()</code> that teleports the player to the next <code class="language-plaintext highlighter-rouge">EndlessLevel</code> region.</p>

<p>As you can see, a simple button has a not-so-simple implementation. And there is also a case for when there are multiple players in a party, and each one has to confirm for a teleport to happen.</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2024-10/alex-7.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2024-10/alex-7.jpg" alt="AlexBond 7" /></a>
</center>

<p>To get the mode to a feature-complete state we still have timer widgets to implement with three <code class="language-plaintext highlighter-rouge">MetaStateScoringEventTimer</code> states: <code class="language-plaintext highlighter-rouge">Start</code>, <code class="language-plaintext highlighter-rouge">Stop</code>, and <code class="language-plaintext highlighter-rouge">End</code>. However, even at this stage Danger Room regions can be completed without any significant issues.</p>

<p>Now you should have a better idea about what I have been working on this month. There is still a lot more work to do, see you in future reports!</p>

<hr />

<p>That’s all we have for you today. See you next month!</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">MHServerEmu Progress Report: September 2024</title><link href="https://crypto137.github.io/MHServerEmu/blog/2024/09/30/progress-report-september-2024.html" rel="alternate" type="text/html" title="MHServerEmu Progress Report: September 2024" /><published>2024-09-30T14:35:00+03:00</published><updated>2024-09-30T14:35:00+03:00</updated><id>https://crypto137.github.io/MHServerEmu/blog/2024/09/30/progress-report-september-2024</id><content type="html" xml:base="https://crypto137.github.io/MHServerEmu/blog/2024/09/30/progress-report-september-2024.html"><![CDATA[<!--more-->

<p><img src="/MHServerEmu/assets/blog/progress-report/2024-09/header.jpg" alt="MHServerEmu Progress Report - September 2024" /></p>

<p>You know the drill, it’s progress report time.</p>

<h2 id="wtb-godly-plate-of-the-whale">WTB Godly Plate of the Whale</h2>

<p>This month we released our third stable version, <a href="https://github.com/Crypto137/MHServerEmu/releases/tag/0.3.0">0.3.0</a>, and immediately I started working on features for 0.4.0, which is currently planned for early December.</p>

<p>The first thing on my “to do” list was implementing item affix generation. When I did the loot table implementation <a href="/MHServerEmu/blog/2024/07/31/progress-report-july-2024.html">back in July</a>, I already knew that it would not be difficult to get affix generation up and running with what we already had. However, I wanted to wait until we had persistence working: there is no worse feeling in a loot game than getting a good drop and knowing you are going to lose it as soon as you log out.</p>

<p>Here is an overview of how affix generation works. After the <code class="language-plaintext highlighter-rouge">ItemResolver</code> goes through a loot table, you end up with an <code class="language-plaintext highlighter-rouge">ItemSpec</code> that has the item’s base type, quality, and level, but no affixes. This <code class="language-plaintext highlighter-rouge">ItemSpec</code> is passed to a function called <code class="language-plaintext highlighter-rouge">LootUtilities.UpdateAffixes()</code> that does the real magic.</p>

<p>Based mainly on the item’s base type and level, the game rolls a number of <em>category</em> affixes and <em>position</em> affixes.</p>

<p>Categories are data-defined pools, which in practice are primarily used for “white” affixes you see on gear, like damage rating and health.  Theoretically it should be possible to add more affix categories by changing game data, although you will have to modify both the server and the client <code class="language-plaintext highlighter-rouge">.sip</code> files.</p>

<p>There are 19 affix positions, and they are hardcoded into the game: unlike categories, you cannot add or remove new affix positions without recompiling the client. Available positions include things that are typical for games in this genre, like prefixes and suffixes, but also more specialized options, such as PetTech-specific affixes. Here is a full list of affix positions that exist in version 1.52:</p>

<table>
  <thead>
    <tr>
      <th>Prefix</th>
      <th>Unique</th>
      <th>PetTech1</th>
      <th>RegionAffix</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Suffix</strong></td>
      <td><strong>Blessing</strong></td>
      <td><strong>PetTech2</strong></td>
      <td><strong>Socket1</strong></td>
    </tr>
    <tr>
      <td><strong>Visual</strong></td>
      <td><strong>Runeword</strong></td>
      <td><strong>PetTech3</strong></td>
      <td><strong>Socket2</strong></td>
    </tr>
    <tr>
      <td><strong>Ultimate</strong></td>
      <td><strong>TeamUp</strong></td>
      <td><strong>PetTech4</strong></td>
      <td><strong>Socket3</strong></td>
    </tr>
    <tr>
      <td><strong>Cosmic</strong></td>
      <td><strong>Metadata</strong></td>
      <td><strong>PetTech5</strong></td>
      <td> </td>
    </tr>
  </tbody>
</table>

<p>For each affix roll a pool is formed based on various filters, including compatibility with the base type, keywords, categories, and the region the affix is being rolled in. An affix is then picked from this pool, checking for duplicates that are already attached to this <code class="language-plaintext highlighter-rouge">ItemSpec</code> if needed. Some affixes also require an additional parameter, referred to as its <em>scope</em>: the most typical example of this are affixes that affect specific powers or groups of powers. For an affix like <code class="language-plaintext highlighter-rouge">+3 to Repulsor Barrage</code> the scope would be a reference to the prototype for the <code class="language-plaintext highlighter-rouge">Repulsor Barrage</code> power, while for <code class="language-plaintext highlighter-rouge">+10% Area Power Damage</code> it would be a reference to the prototype for the <code class="language-plaintext highlighter-rouge">Area</code> keyword. The scope system is a good example of how surface-level many BUE changes actually were: although power ranks were “removed”, the entire backend for them still exists and is in use, with all powers simply being set to rank 1 and rebalanced accordingly.</p>

<p>With affixes picked and added to the <code class="language-plaintext highlighter-rouge">ItemSpec</code>, it is now time to apply it to an <code class="language-plaintext highlighter-rouge">Item</code> entity instance. This is when the actual rolling of values happens. The funny thing about this process is that it is done in parallel by the server and the client: rather than sending a fully rolled item, the server sends the client a serialized <code class="language-plaintext highlighter-rouge">ItemSpec</code> that also contains a seed for the random number generator. Because the input data and the algorithm are the same between the two of them, they both generate the same item independently from one another. While this means we have all the logic for the rolling process client-side, any deviation from it also causes desynchronization issues. In addition to that, you can’t modify most of the static item data, such as affix ranges, server-side without also having to change the client.</p>

<p>In addition to randomly picked affixes, the prototypes for base types can also have <em>built-in affixes</em>, and <em>built-in properties</em>. The vast majority of fixed stat items you see in the game, like uniques and artifacts, are implemented using built-in properties. The core difference between them is that affix properties are attached to the item as child property collections and can be removed, while built-in properties are written right into the item’s own property collection.</p>

<p>Implementing built-in properties initially caused unexpected game instances crashes. Turns out, the data contains mistakes made by designers, and in some cases minimum and maximum ranges are mixed up. Generally it’s negative decimal numbers, like <code class="language-plaintext highlighter-rouge">-0.1</code> and <code class="language-plaintext highlighter-rouge">-0.2</code>, but there are also cases that look like this:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-09/unique-range.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-09/unique-range.png" alt="Unique Range" /></a></p>

<p>Here is the default implementation of <code class="language-plaintext highlighter-rouge">Math.Clamp()</code> in C#:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="nf">Clamp</span><span class="p">(</span><span class="kt">int</span> <span class="k">value</span><span class="p">,</span> <span class="kt">int</span> <span class="n">min</span><span class="p">,</span> <span class="kt">int</span> <span class="n">max</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">min</span> <span class="p">&gt;</span> <span class="n">max</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nf">ThrowMinMaxException</span><span class="p">(</span><span class="n">min</span><span class="p">,</span> <span class="n">max</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="k">value</span> <span class="p">&lt;</span> <span class="n">min</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">min</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">value</span> <span class="p">&gt;</span> <span class="n">max</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">max</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="k">value</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>So when you try to clamp a value to a mixed up range like this, an exception is thrown, which leads to a crash. We cannot fix the issue with the data without also modifying the client, so what we have to do here is remove the <code class="language-plaintext highlighter-rouge">min &gt; max</code> check to process malformed data in the same way as the client, or we are going to get different rolls server-side and end up with desync issues.</p>

<p>With affixes actually rolling and applying, it was now time to take another look at combat calculations. The version of the game we are currently working on uses a form of level scaling called dynamic combat level (DCL). Surprisingly enough, it is actually not that complicated compared to most other systems in this game: all damage players deal to mobs and receive from mobs is scaled as if the mob was the same level as the player (with upper and lower bounds for this scaling defined by the region). Enemy health never actually changes, and the illusion of enemies scaling up or down to player level is created by sending fake damage numbers to the client. So if you would deal <code class="language-plaintext highlighter-rouge">100</code>  damage to a target of your level, it gets scaled to <code class="language-plaintext highlighter-rouge">1000</code> to match the target’s higher level, but the client receives and displays the number <code class="language-plaintext highlighter-rouge">100</code>.</p>

<p>It would not be Marvel Heroes if there was no jank at all though. When the DCL system was initially being implemented, it was made in a way where it could be turned off. For this reason all mobs in the game have two health curves: the default one and the “new” DCL one. The main difference between them is that while default curves have separate baseline scaling for regular mobs and bosses, the new DCL curves are unified, and the difference is achieved by applying external health multipliers. In the vast majority of cases this multiplier comes from the mob’s rank (<code class="language-plaintext highlighter-rouge">Popcorn</code>, <code class="language-plaintext highlighter-rouge">Champion</code>, <code class="language-plaintext highlighter-rouge">Elite</code>, <code class="language-plaintext highlighter-rouge">MiniBoss</code>, <code class="language-plaintext highlighter-rouge">Boss</code>), but sometimes it is baked into the mob’s prototype itself. This was the reason why some mobs, like Doop, were nearly unkillable before: they were using their default health curves that had baseline scaling <em>and</em> they also had a crazy high multiplier bonus that was applied on top of that.</p>

<p>With players having items with stats, the DCL system being mostly implemented, and characters using proper health curves with multipliers applied to them, everything in the game now has a much more authentic feel to it, with proper contrast between weaker popcorn mobs and tougher elites. There is still lots and lots of work to do on this front, but I feel we are in a much better place balance-wise now.</p>

<h2 id="and-this-is-to-go-even-further-beyond">And This… Is to Go Even Further Beyond!</h2>

<p>As MHServerEmu matures and more features are implemented, the workload the server has to do increases. Even 0.3.0, with its basic combat and loot generation, already starts coming apart at the seams with high enough load, and with missions and metagames coming in 0.4.0, this month I decided it was time to take a good look at what we can do to optimize the server.</p>

<h3 id="round-1-memory-management">Round 1: Memory Management</h3>

<p>The core difference between our server implementation and the original game is that MHServerEmu is written in C#, which compiles to bytecode and has automatic memory management, while the client is C++ compiled to native code with manual memory management. The biggest advantage of using C# for this project is that it’s great for rapid iteration with fast build times and features like hot reload, and more often than not <em>it just works</em>. However, there is an inherent loss of control compared to C++, the most critical point being how memory is managed.</p>

<p>Both languages use the concepts of the stack and the heap for managing memory. I will not go into too much detail on this, as there are countless other resources that go as deep into this as you will ever want, and do a much better job at it than I can, but here is the gist of it:</p>

<ul>
  <li>
    <p>Stack-allocated data is cleared automatically after you leave the block of code that contains the allocation. Working with the stack is very fast, but it has relatively small size (1 MB by default in C#), and if you exceed this limit, you will get the infamous stack overflow error. So generally you want to use this for smaller temporary data with short lifespans.</p>
  </li>
  <li>
    <p>Anything allocated on the heap needs to be cleaned up at some point. In C++ this can be done in various ways, while C# does it automatically using its <em>garbage collector</em> (GC). Working with the heap is much slower than the stack, but it can handle significantly larger volumes of data with longer lifespans.</p>
  </li>
  <li>
    <p>In C++ pretty much anything can be allocated either on the stack or on the heap. C# restricts this by dividing types into <em>value types</em> and <em>reference types</em>: there are exceptions and edge cases, but the general idea is that reference types cannot be allocated on the stack, and there are cases when value types have to be wrapped in reference types, which forces them to be allocated on the heap. This wrapping process is called <em>boxing</em>.</p>
  </li>
</ul>

<p>As a result of this, in C++ if you are not careful with your memory management, you will end up continuously allocating more memory than you free, eventually completely running out of it. This is what is commonly referred to as a <em>memory leak</em>. In languages like C# it’s a lot harder to get a memory leak like this, but it’s still very easy to unintentionally end up doing too many heap allocations, increasing <em>garbage collection pressure</em>, which manifests as unpredictable stuttering, as the garbage collector periodically suspends all threads to do its work. This is made worse by the fact that C# has limited tools for stack allocations, and some features end up allocating garbage behind the scenes.</p>

<p>While Marvel Heroes has a relatively loose simulation time step of 50 ms, there is also a lot of stuff going on, so the amount of garbage you generate can get very out of hand very fast. Here are some examples of the issues I have recently identified and fixed.</p>

<h4 id="arrays">Arrays</h4>

<p>By default, arrays in C# are reference types. This means when you create a new array like this…</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">byte</span><span class="p">[]</span> <span class="n">buffer</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="p">[</span><span class="m">1024</span><span class="p">];</span>
</code></pre></div></div>

<p>…you are allocating 1024 bytes on the heap that the garbage collector will have to reclaim at some point. This is not too bad when it’s done every once in a while, but what if you are doing this tens of thousands of times per second?</p>

<p>As I was profiling our memory allocations, I discovered that we had literally millions of <code class="language-plaintext highlighter-rouge">double[]</code> allocations happening every minute. The culprit wasn’t even our own code: we are using a third party library that implements <a href="https://www.cs.cmu.edu/~quake/robust.html">fast robust predicates for computational geometry</a>, which is a way of quickly testing points in space with a high degree of accuracy. The original implementation is <a href="https://www.cs.cmu.edu/afs/cs/project/quake/public/code/predicates.c">written in C</a>, and instead of adapting it to C# ourselves, we used <a href="https://github.com/modios/robust-predicates">an existing port</a>.</p>

<p>However, as I looked at the code, I started seeing parts like this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span><span class="p">[]</span> <span class="n">finswap</span><span class="p">;</span>
<span class="kt">double</span><span class="p">[]</span> <span class="n">temp16a</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">double</span><span class="p">[</span><span class="m">16</span><span class="p">];</span>
<span class="kt">double</span><span class="p">[]</span> <span class="n">temp32a</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">double</span><span class="p">[</span><span class="m">32</span><span class="p">];</span>
<span class="kt">double</span><span class="p">[]</span> <span class="n">temp16b</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">double</span><span class="p">[</span><span class="m">16</span><span class="p">];</span>
<span class="kt">double</span><span class="p">[]</span> <span class="n">temp32b</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">double</span><span class="p">[</span><span class="m">32</span><span class="p">];</span>
<span class="kt">double</span><span class="p">[]</span> <span class="n">temp16c</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">double</span><span class="p">[</span><span class="m">16</span><span class="p">];</span>
<span class="kt">double</span><span class="p">[]</span> <span class="n">temp48</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">double</span><span class="p">[</span><span class="m">48</span><span class="p">];</span>
<span class="kt">double</span><span class="p">[]</span> <span class="n">axtbc</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">double</span><span class="p">[</span><span class="m">8</span><span class="p">];</span>
</code></pre></div></div>

<p>These tests are used extensively in the game for updating the navi system, and they can cause millions of heap allocations in just a few minutes of playing. Thankfully, this is temporary data that gets thrown away as soon the function finishes, so we can make use of one of the optimization tools available in C# - <code class="language-plaintext highlighter-rouge">Span&lt;T&gt;</code>:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Span</span><span class="p">&lt;</span><span class="kt">double</span><span class="p">&gt;</span> <span class="n">finswap</span> <span class="p">=</span> <span class="k">stackalloc</span> <span class="kt">double</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
<span class="n">Span</span><span class="p">&lt;</span><span class="kt">double</span><span class="p">&gt;</span> <span class="n">temp16a</span> <span class="p">=</span> <span class="k">stackalloc</span> <span class="kt">double</span><span class="p">[</span><span class="m">16</span><span class="p">];</span>
<span class="n">Span</span><span class="p">&lt;</span><span class="kt">double</span><span class="p">&gt;</span> <span class="n">temp32a</span> <span class="p">=</span> <span class="k">stackalloc</span> <span class="kt">double</span><span class="p">[</span><span class="m">32</span><span class="p">];</span>
<span class="n">Span</span><span class="p">&lt;</span><span class="kt">double</span><span class="p">&gt;</span> <span class="n">temp16b</span> <span class="p">=</span> <span class="k">stackalloc</span> <span class="kt">double</span><span class="p">[</span><span class="m">16</span><span class="p">];</span>
<span class="n">Span</span><span class="p">&lt;</span><span class="kt">double</span><span class="p">&gt;</span> <span class="n">temp32b</span> <span class="p">=</span> <span class="k">stackalloc</span> <span class="kt">double</span><span class="p">[</span><span class="m">32</span><span class="p">];</span>
<span class="n">Span</span><span class="p">&lt;</span><span class="kt">double</span><span class="p">&gt;</span> <span class="n">temp16c</span> <span class="p">=</span> <span class="k">stackalloc</span> <span class="kt">double</span><span class="p">[</span><span class="m">16</span><span class="p">];</span>
<span class="n">Span</span><span class="p">&lt;</span><span class="kt">double</span><span class="p">&gt;</span> <span class="n">temp48</span> <span class="p">=</span> <span class="k">stackalloc</span> <span class="kt">double</span><span class="p">[</span><span class="m">48</span><span class="p">];</span>
<span class="n">Span</span><span class="p">&lt;</span><span class="kt">double</span><span class="p">&gt;</span> <span class="n">axtbc</span> <span class="p">=</span> <span class="k">stackalloc</span> <span class="kt">double</span><span class="p">[</span><span class="m">8</span><span class="p">];</span>
</code></pre></div></div>

<p>Doing it this way we break the “rules” of C# arrays a bit and allocate them on the stack. Behind the scenes this is actually a way of writing unsafe code that looks like this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span><span class="p">*</span> <span class="n">temp16aPtr</span> <span class="p">=</span> <span class="k">stackalloc</span> <span class="kt">double</span><span class="p">[</span><span class="m">16</span><span class="p">];</span>
<span class="n">Span</span><span class="p">&lt;</span><span class="kt">double</span><span class="p">&gt;</span> <span class="n">temp16a</span> <span class="p">=</span> <span class="k">new</span><span class="p">(</span><span class="n">temp16aPtr</span><span class="p">);</span>
</code></pre></div></div>

<p>Spans are essentially highly limited pointers that allow us to use some C# features that had been traditionally restricted to unsafe code, such as the <code class="language-plaintext highlighter-rouge">stackalloc</code> keyword. They are very useful for situations like this, although with an external library it may be worth rewriting it in fully unsafe code to get more performance out of it in the future. Our span-based fork of this robust predicates implementation is available on <a href="https://github.com/Crypto137/robust-predicates">GitHub</a> for everyone to use.</p>

<p>Replacing arrays with spans works for smaller arrays, but what about those that can potentially exceed the 1 MB stack limit or need to persist for longer periods of time? The best example of this are <code class="language-plaintext highlighter-rouge">byte[]</code> buffers used for serializing network messages and player data. This is where another useful optimization tool comes in: <code class="language-plaintext highlighter-rouge">ArrayPool&lt;T&gt;</code>. Instead of allocating a new buffer each time like this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">size</span> <span class="p">=</span> <span class="n">packet</span><span class="p">.</span><span class="n">SerializedSize</span><span class="p">;</span>
<span class="kt">byte</span> <span class="n">buffer</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="p">[</span><span class="n">size</span><span class="p">];</span>
<span class="n">packet</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
<span class="nf">Send</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
</code></pre></div></div>

<p>We can “rent” and later reuse the same buffers:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">size</span> <span class="p">=</span> <span class="n">packet</span><span class="p">.</span><span class="n">SerializedSize</span><span class="p">;</span>
<span class="kt">byte</span> <span class="n">buffer</span> <span class="p">=</span> <span class="n">ArrayPool</span><span class="p">&lt;</span><span class="kt">byte</span><span class="p">&gt;.</span><span class="n">Shared</span><span class="p">.</span><span class="nf">Rent</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
<span class="n">packet</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
<span class="nf">Send</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
<span class="n">ArrayPool</span><span class="p">&lt;</span><span class="kt">byte</span><span class="p">&gt;.</span><span class="n">Shared</span><span class="p">.</span><span class="nf">Return</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
</code></pre></div></div>

<p>There are certain limitations to using <code class="language-plaintext highlighter-rouge">ArrayPool&lt;T&gt;</code>: for example, you will most likely get a buffer larger than what you requested, and you will have to handle this yourself. However, it works very well for cases like high-volume packet serialization.</p>

<p>This was a very simple example where integrating pooling was just two lines of code. Unfortunately, things are not always this easy. For client compatibility reasons we are using <code class="language-plaintext highlighter-rouge">protobuf-csharp-port</code>, a legacy C# implementation of Google’s Protocol Buffers (protobufs) that was last updated in 2015. Gazillion utilized certain protobuf encoding functions directly for their custom archive format, which is used for high-frequency messages, like entity creation, locomotion updates, and power activations.</p>

<p>These encoding functions can be accessed in <code class="language-plaintext highlighter-rouge">protobuf-csharp-port</code> using the <code class="language-plaintext highlighter-rouge">CodedOutputStream</code> class. <code class="language-plaintext highlighter-rouge">CodedOutputStream</code> is a wrapper for various <code class="language-plaintext highlighter-rouge">Stream</code> implementations, like a protobuf-specific version of <code class="language-plaintext highlighter-rouge">BinaryWriter</code>. You can create <code class="language-plaintext highlighter-rouge">CodedOutputStream</code> instances using various overloads of the <code class="language-plaintext highlighter-rouge">CreateInstance()</code> factory method, but there is a problem: you can provide your own fixed-size buffer to write to directly, or you can provide a stream and specify the size of the write buffer. However, the constructor for <code class="language-plaintext highlighter-rouge">CodedOutputStream</code> is <code class="language-plaintext highlighter-rouge">private</code>, and there is no <code class="language-plaintext highlighter-rouge">CreateInstance()</code> overload that accepts both a stream and a buffer:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="nf">CodedOutputStream</span><span class="p">(</span><span class="n">Stream</span> <span class="n">output</span><span class="p">,</span> <span class="kt">byte</span><span class="p">[]</span> <span class="n">buffer</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="n">output</span> <span class="p">=</span> <span class="n">output</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="n">buffer</span> <span class="p">=</span> <span class="n">buffer</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="n">position</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="n">limit</span> <span class="p">=</span> <span class="n">buffer</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">static</span> <span class="n">CodedOutputStream</span> <span class="nf">CreateInstance</span><span class="p">(</span><span class="n">Stream</span> <span class="n">output</span><span class="p">,</span> <span class="kt">int</span> <span class="n">bufferSize</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">CodedOutputStream</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="k">new</span> <span class="kt">byte</span><span class="p">[</span><span class="n">bufferSize</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The “normal” thing to do here would be either to accept that we will waste allocations on this, or to just bite the bullet and start modifying <code class="language-plaintext highlighter-rouge">protobuf-csharp-port</code> for our needs.  However, I am stubborn, and I felt like doing the latter would be like opening the Pandora’s box: we may end up doing it at some point, but now was not the right time. Modern problems require modern solutions, and here is the one I came up with:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">CodedOutputStreamEx</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">Stream</span><span class="p">,</span> <span class="kt">byte</span><span class="p">[],</span> <span class="n">CodedOutputStream</span><span class="p">&gt;</span> <span class="n">CreateInstanceDelegate</span><span class="p">;</span>

    <span class="k">static</span> <span class="nf">CodedOutputStreamEx</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Type</span><span class="p">[]</span> <span class="n">argTypes</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Type</span><span class="p">[]</span> <span class="p">{</span> <span class="k">typeof</span><span class="p">(</span><span class="n">Stream</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">byte</span><span class="p">[])</span> <span class="p">};</span>

        <span class="n">DynamicMethod</span> <span class="n">dm</span> <span class="p">=</span> <span class="k">new</span><span class="p">(</span><span class="s">"CreateInstance"</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="n">CodedOutputStream</span><span class="p">),</span> <span class="n">argTypes</span><span class="p">);</span>
        <span class="n">ILGenerator</span> <span class="n">il</span> <span class="p">=</span> <span class="n">dm</span><span class="p">.</span><span class="nf">GetILGenerator</span><span class="p">();</span>

        <span class="n">il</span><span class="p">.</span><span class="nf">Emit</span><span class="p">(</span><span class="n">OpCodes</span><span class="p">.</span><span class="n">Ldarg_0</span><span class="p">);</span>
        <span class="n">il</span><span class="p">.</span><span class="nf">Emit</span><span class="p">(</span><span class="n">OpCodes</span><span class="p">.</span><span class="n">Ldarg_1</span><span class="p">);</span>
        <span class="n">il</span><span class="p">.</span><span class="nf">Emit</span><span class="p">(</span><span class="n">OpCodes</span><span class="p">.</span><span class="n">Newobj</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="n">CodedOutputStream</span><span class="p">).</span><span class="nf">GetConstructor</span><span class="p">(</span><span class="n">BindingFlags</span><span class="p">.</span><span class="n">NonPublic</span> <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Instance</span><span class="p">,</span> <span class="n">argTypes</span><span class="p">));</span>
        <span class="n">il</span><span class="p">.</span><span class="nf">Emit</span><span class="p">(</span><span class="n">OpCodes</span><span class="p">.</span><span class="n">Ret</span><span class="p">);</span>

        <span class="n">CreateInstanceDelegate</span> <span class="p">=</span> <span class="n">dm</span><span class="p">.</span><span class="n">CreateDelegate</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">Stream</span><span class="p">,</span> <span class="kt">byte</span><span class="p">[],</span> <span class="n">CodedOutputStream</span><span class="p">&gt;&gt;();</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="nf">MethodImpl</span><span class="p">(</span><span class="n">MethodImplOptions</span><span class="p">.</span><span class="n">AggressiveInlining</span><span class="p">)]</span>
    <span class="k">public</span> <span class="k">static</span> <span class="n">CodedOutputStream</span> <span class="nf">CreateInstance</span><span class="p">(</span><span class="n">Stream</span> <span class="n">stream</span><span class="p">,</span> <span class="kt">byte</span><span class="p">[]</span> <span class="n">buffer</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">CreateInstanceDelegate</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">buffer</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here we are using <code class="language-plaintext highlighter-rouge">System.Reflection.Emit</code> to pretty much generate a new <code class="language-plaintext highlighter-rouge">CodedOutputStream.CreateInstance()</code> overload at runtime, which we then access via a cached delegate. Is it an overengineered hack? Yes. Does it work? Also yes.</p>

<p>With these targeted applications of <code class="language-plaintext highlighter-rouge">Span&lt;T&gt;</code> and <code class="language-plaintext highlighter-rouge">ArrayPool&lt;T&gt;</code> we were able to get arrays under control and eliminate literally millions of unnecessary heap allocations. Nevertheless, this was just one stop in my optimization journey.</p>

<h4 id="boxing">Boxing</h4>

<p>Boxing is what occurs in C# when a value type is cast to a reference type. Here is the simplest example of this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="k">value</span> <span class="p">=</span> <span class="m">5</span><span class="p">;</span>
<span class="kt">object</span> <span class="n">boxedValue</span> <span class="p">=</span> <span class="p">(</span><span class="kt">object</span><span class="p">)</span><span class="k">value</span><span class="p">;</span>
</code></pre></div></div>

<p>Because <code class="language-plaintext highlighter-rouge">int</code> is a value type and <code class="language-plaintext highlighter-rouge">object</code> is a reference type, and reference types cannot exist on the stack in C#, this conversion requires allocating an object instance on the heap that will contain our <code class="language-plaintext highlighter-rouge">value</code>.</p>

<p>In a simple example like this boxing is clear to see if you know about value and reference types, but some of the “automagical” C# features can cause unintentional boxing and heap allocations. One common pitfall for this are interfaces: interfaces are inherently reference types, so when a <code class="language-plaintext highlighter-rouge">struct</code>, a value type, implements an interface like <code class="language-plaintext highlighter-rouge">IEnumerator</code>, and is then cast to an instance of this interface, it will end up being boxed.</p>

<p>Here is an example of a very simplified wrapper class that implements the <code class="language-plaintext highlighter-rouge">IEnumerable</code> interface:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">PowerCollection</span> <span class="p">:</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Power</span><span class="p">&gt;</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Power</span><span class="p">&gt;</span> <span class="n">_powers</span><span class="p">;</span>

    <span class="k">public</span> <span class="n">IEnumerator</span><span class="p">&lt;</span><span class="n">Power</span><span class="p">&gt;</span> <span class="nf">GetEnumerator</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">_powers</span><span class="p">.</span><span class="nf">GetEnumerator</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="c1">// Legacy non-generic version of GetEnumerator() required by IEnumerable here</span>
<span class="p">}</span>
</code></pre></div></div>

<p>When you have it like this, you can very conveniently iterate all <code class="language-plaintext highlighter-rouge">Power</code> instances in your <code class="language-plaintext highlighter-rouge">PowerCollection</code> in a <code class="language-plaintext highlighter-rouge">foreach</code> loop:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">foreach</span> <span class="p">(</span><span class="n">Power</span> <span class="n">power</span> <span class="k">in</span> <span class="n">PowerCollection</span><span class="p">)</span>
    <span class="n">power</span><span class="p">.</span><span class="nf">EndPower</span><span class="p">();</span>
</code></pre></div></div>

<p>Here is a problem though: <code class="language-plaintext highlighter-rouge">List&lt;T&gt;</code> uses a struct-based enumerator to avoid heap allocations, but when you iterate like this, here is what is actually happening behind the scenes:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="p">(</span><span class="n">IEnumerator</span><span class="p">&lt;</span><span class="n">Power</span><span class="p">&gt;</span> <span class="n">enumerator</span> <span class="p">=</span> <span class="n">PowerCollection</span><span class="p">.</span><span class="nf">GetEnumerator</span><span class="p">())</span>
<span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">enumerator</span><span class="p">.</span><span class="nf">MoveNext</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="n">Power</span> <span class="n">power</span> <span class="p">=</span> <span class="n">enumerator</span><span class="p">.</span><span class="n">Current</span><span class="p">;</span>
        <span class="n">power</span><span class="p">.</span><span class="nf">EndPower</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>As a result, your <code class="language-plaintext highlighter-rouge">List&lt;T&gt;.Enumerator</code> struct is cast to <code class="language-plaintext highlighter-rouge">IEnumerator</code> and boxed. You end up doing completely unnecessary heap allocations out of nowhere, and if you are iterating hundreds or even thousands of times per second, it can really add up.</p>

<p>The solution is to add a separate <code class="language-plaintext highlighter-rouge">GetEnumerator()</code> implementation for your wrapper classes that returns a concrete enumerator type:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">PowerCollection</span> <span class="p">:</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Power</span><span class="p">&gt;</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Power</span><span class="p">&gt;</span> <span class="n">_powers</span><span class="p">;</span>

    <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Power</span><span class="p">&gt;.</span><span class="n">Enumerator</span> <span class="nf">GetEnumerator</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">_powers</span><span class="p">.</span><span class="nf">GetEnumerator</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="n">IEnumerator</span><span class="p">&lt;</span><span class="n">Power</span><span class="p">&gt;</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Power</span><span class="p">&gt;.</span><span class="nf">GetEnumerator</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">_powers</span><span class="p">.</span><span class="nf">GetEnumerator</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="c1">// Legacy non-generic version of GetEnumerator() required by IEnumerable here</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This way you avoid boxing when doing a simple <code class="language-plaintext highlighter-rouge">foreach</code> iteration, but also still have access to various <code class="language-plaintext highlighter-rouge">IEnumerable</code> extension methods, like <code class="language-plaintext highlighter-rouge">Select()</code> and <code class="language-plaintext highlighter-rouge">Where()</code>.</p>

<h4 id="yield-return">yield return</h4>

<p>Related to iteration and boxing is another source of garbage: <code class="language-plaintext highlighter-rouge">yield return</code>. Looking again at the example above, it can also be implemented like this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">PowerCollection</span> <span class="p">:</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Power</span><span class="p">&gt;</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Power</span><span class="p">&gt;</span> <span class="n">_powers</span><span class="p">;</span>

    <span class="k">public</span> <span class="n">IEnumerator</span><span class="p">&lt;</span><span class="n">Power</span><span class="p">&gt;</span> <span class="nf">GetEnumerator</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="n">Power</span> <span class="n">power</span> <span class="k">in</span> <span class="n">_powers</span><span class="p">)</span>
            <span class="k">yield</span> <span class="k">return</span> <span class="n">power</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Legacy non-generic version of GetEnumerator() required by IEnumerable here</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This is a quick and dirty way of implementing a custom iterator, which can be great for getting complex filtered iteration up and running. However, behind the scenes this actually creates a state machine object that causes more heap allocations. So to optimize this, I went back and replaced some of our <code class="language-plaintext highlighter-rouge">yield return</code> filtered iteration implementations with struct-based <code class="language-plaintext highlighter-rouge">IEnumerator</code> implementations. It is a more verbose way of doing things, but it prevents more unnecessary garbage.</p>

<h4 id="delegates">Delegates</h4>

<p>Delegates in C# are objects that encapsulate function pointers. They are reference types, which means more heap allocations. And sometimes they happen when you do not expect it.</p>

<p>A good of example of this is one of the iteration methods of <code class="language-plaintext highlighter-rouge">PropertyCollection</code>:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="n">PropertyList</span><span class="p">.</span><span class="n">Iterator</span> <span class="nf">IteratePropertyRange</span><span class="p">(</span><span class="n">PropertyEnumFilter</span><span class="p">.</span><span class="n">Func</span> <span class="n">filterFunc</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">_aggregateList</span><span class="p">.</span><span class="nf">IteratePropertyRange</span><span class="p">(</span><span class="n">filterFunc</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This takes a filter delegate defined in the <code class="language-plaintext highlighter-rouge">PropertyEnumFilter</code> static class as an argument:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">PropertyEnumFilter</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">delegate</span> <span class="kt">bool</span> <span class="nf">Func</span><span class="p">(</span><span class="n">PropertyEnum</span> <span class="n">propertyEnum</span><span class="p">);</span>

    <span class="c1">// A filter function that skips properties that don't have a valid aggregation method</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="nf">Agg</span><span class="p">(</span><span class="n">PropertyEnum</span> <span class="n">propertyEnum</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">PropertyInfo</span> <span class="n">info</span> <span class="p">=</span> <span class="n">GameDatabase</span><span class="p">.</span><span class="n">PropertyInfoTable</span><span class="p">.</span><span class="nf">LookupPropertyInfo</span><span class="p">(</span><span class="n">propertyEnum</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">info</span><span class="p">.</span><span class="n">Prototype</span><span class="p">.</span><span class="n">AggMethod</span> <span class="p">!=</span> <span class="n">AggregationMethod</span><span class="p">.</span><span class="n">None</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The most intuitive way of using it looks like this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">kvp</span> <span class="k">in</span> <span class="n">Properties</span><span class="p">.</span><span class="nf">IteratePropertyRange</span><span class="p">(</span><span class="n">PropertyEnumFilter</span><span class="p">.</span><span class="n">Agg</span><span class="p">))</span>
<span class="p">{</span>
    <span class="c1">// Do something with properties</span>
<span class="p">}</span>
</code></pre></div></div>

<p>But here is yet another pitfall: this</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PropertyEnumFilter</span><span class="p">.</span><span class="n">Func</span> <span class="n">aggFunc</span> <span class="p">=</span> <span class="n">PropertyEnumFilter</span><span class="p">.</span><span class="n">Agg</span><span class="p">;</span>
</code></pre></div></div>

<p>is actually a short way of writing this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PropertyEnumFilter</span><span class="p">.</span><span class="n">Func</span> <span class="n">aggFunc</span> <span class="p">=</span> <span class="k">new</span><span class="p">(</span><span class="n">PropertyEnumFilter</span><span class="p">.</span><span class="n">Agg</span><span class="p">);</span>
</code></pre></div></div>

<p>So every time you pass a function as an argument, you end up instantiating an extra delegate. The garbage-free way of doing this actually looks like this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">PropertyEnumFilter</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">delegate</span> <span class="kt">bool</span> <span class="nf">Func</span><span class="p">(</span><span class="n">PropertyEnum</span> <span class="n">propertyEnum</span><span class="p">);</span>

    <span class="k">public</span> <span class="k">static</span> <span class="n">Func</span> <span class="n">AggFunc</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="n">Agg</span><span class="p">;</span>

    <span class="c1">// A filter function that skips properties that don't have a valid aggregation method</span>
    <span class="k">private</span> <span class="k">static</span> <span class="kt">bool</span> <span class="nf">Agg</span><span class="p">(</span><span class="n">PropertyEnum</span> <span class="n">propertyEnum</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">PropertyInfo</span> <span class="n">info</span> <span class="p">=</span> <span class="n">GameDatabase</span><span class="p">.</span><span class="n">PropertyInfoTable</span><span class="p">.</span><span class="nf">LookupPropertyInfo</span><span class="p">(</span><span class="n">propertyEnum</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">info</span><span class="p">.</span><span class="n">Prototype</span><span class="p">.</span><span class="n">AggMethod</span> <span class="p">!=</span> <span class="n">AggregationMethod</span><span class="p">.</span><span class="n">None</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Which you then use like this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">kvp</span> <span class="k">in</span> <span class="n">Properties</span><span class="p">.</span><span class="nf">IteratePropertyRange</span><span class="p">(</span><span class="n">PropertyEnumFilter</span><span class="p">.</span><span class="n">AggFunc</span><span class="p">))</span>
<span class="p">{</span>
    <span class="c1">// Do something with properties</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This little maneuver’s gonna save us 800 000 allocations on server startup.</p>

<h4 id="stack-like-pooling">Stack-like Pooling</h4>

<p>Sometimes you just need a way of imitating C++’s “allocate whatever on the stack” behavior. A good example of this is <code class="language-plaintext highlighter-rouge">PropertyCollection</code>: it is a pretty heavy data structure that is occasionally used just as a way of transferring data. For instance, when you create an <code class="language-plaintext highlighter-rouge">Entity</code>, you can pass it a <code class="language-plaintext highlighter-rouge">PropertyCollection</code> as a parameter, and all properties in it will be copied to the freshly created <code class="language-plaintext highlighter-rouge">Entity</code>. This temporary <code class="language-plaintext highlighter-rouge">PropertyCollection</code> has a very short lifespan, never leaves its initial scope, and the client actually uses stack allocations for it. However, in C# “we don’t do that here”, so we need a workaround.</p>

<p>The one I have implemented involves an approach similar to what is used for database connections. We define an interface for poolable objects:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">interface</span> <span class="nc">IPoolable</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">ResetForPool</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And then we create a manager singleton:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">ObjectPoolManager</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">ObjectPoolManager</span> <span class="n">Instance</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>

    <span class="k">private</span> <span class="nf">ObjectPoolManager</span><span class="p">()</span> <span class="p">{}</span>

    <span class="k">public</span> <span class="n">T</span> <span class="n">Get</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span> <span class="k">where</span> <span class="n">T</span><span class="p">:</span> <span class="n">IPoolable</span><span class="p">,</span> <span class="k">new</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// Retrieve or create a new object of type T</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="n">Return</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">T</span> <span class="n">instance</span><span class="p">)</span> <span class="k">where</span> <span class="n">T</span><span class="p">:</span> <span class="n">IPoolable</span><span class="p">,</span> <span class="k">new</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">instance</span><span class="p">.</span><span class="nf">Clear</span><span class="p">();</span>
        <span class="c1">// Return a previously created object to the pool</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now we can implement two interfaces on objects that we want to use in a stack-allocated fashion:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">PropertyCollection</span> <span class="p">:</span> <span class="n">IPoolable</span><span class="p">,</span> <span class="n">IDisposable</span>
<span class="p">{</span>
    <span class="c1">// The rest of the class</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">ResetForPool</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nf">Clear</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">Dispose</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">ObjectPoolManager</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="nf">Return</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And now we can use it like this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">PropertyCollection</span> <span class="n">tempProperties</span> <span class="p">=</span> <span class="n">ObjectPoolManager</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">PropertyCollection</span><span class="p">&gt;();</span>
</code></pre></div></div>

<p>When we leave the scope where we got this collection, in a very stack-like fashion our <code class="language-plaintext highlighter-rouge">PropertyCollection</code> is “disposed” thanks to the <code class="language-plaintext highlighter-rouge">using</code> keyword, which in this case returns it to the pool and clears it. This reduces the number of <code class="language-plaintext highlighter-rouge">PropertyCollection</code> allocations we need to do from hundreds of thousands to just 3 or 4 per game instance.</p>

<h3 id="round-2-game-database-initialization">Round 2: Game Database Initialization</h3>

<p>Hello darkness, my old friend. Those of you who have been following these reports since the beginning will remember our earlier, many months-long struggle with implementing the game database. Eventually everything got to a functional state, but I was never really happy with how well it performed. Not only did it take pretty long to start if you were preloading all prototypes (about 14.5 seconds on my machine), even when loading prototypes on demand you would occasionally get long lags when defeating certain enemies for the first time, caused by their loot tables being deserialized. So with this optimization pass I was determined to dive back into the abyss and try to make it better.</p>

<h4 id="pak-files">Pak Files</h4>

<p>The very first thing that happens when you start MHServerEmu is the initialization of the <code class="language-plaintext highlighter-rouge">PakFileSystem</code>. All game data files are stored in <code class="language-plaintext highlighter-rouge">.sip</code> packages that consist of a header, an entry table, and raw data for all files compressed using the <a href="https://lz4.org/">LZ4</a> algorithm. Both the client and our server implementation read the header and the entry table, and then load the compressed data for all files into RAM. When files need to be decompressed and deserialized, their data is taken from RAM rather than disk. This may seem wasteful at first, but this is actually much faster than performing file system IO operations thousands of times.</p>

<p>Previously, we were loading data for each file into separate <code class="language-plaintext highlighter-rouge">byte[]</code> buffers. As I was rechecking all of our libraries after I discovered the issues with <code class="language-plaintext highlighter-rouge">RobustPredicates</code>, I noticed that our LZ4 implementation, <a href="https://github.com/MiloszKrajewski/K4os.Compression.LZ4">K4os.Compression.LZ4</a>, actually accepts <code class="language-plaintext highlighter-rouge">ReadOnlySpan&lt;T&gt;</code> and <code class="language-plaintext highlighter-rouge">Span&lt;T&gt;</code> as arguments. Before, we were looking at spans as a way of doing stack allocations for arrays, but they have another use: “slicing” an array. A span is essentially just a way of representing regions of memory, and you can represent different sections of the same array as different spans.</p>

<p>So I had an idea for of dealing with <code class="language-plaintext highlighter-rouge">.sip</code> packages more efficiently: rather than reading data for each file into separate buffers, we could just read everything into a single large buffer, and slice it with spans on decompression. While it wasn’t really what the file format was designed for, it was easy to implement thanks to the fact that all file entries are in the same order as their data that follows, so the total size of the data section can be easily calculated from the last entry as follows:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">numEntries</span> <span class="p">=</span> <span class="n">reader</span><span class="p">.</span><span class="nf">ReadInt32</span><span class="p">();</span>
<span class="n">_entryDict</span><span class="p">.</span><span class="nf">EnsureCapacity</span><span class="p">(</span><span class="n">numEntries</span><span class="p">);</span>

<span class="n">PakEntry</span> <span class="n">newEntry</span> <span class="p">=</span> <span class="k">default</span><span class="p">;</span>

<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">numEntries</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
<span class="p">{</span>
    <span class="n">newEntry</span> <span class="p">=</span> <span class="k">new</span><span class="p">(</span><span class="n">reader</span><span class="p">);</span>
    <span class="n">_entryDict</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">newEntry</span><span class="p">.</span><span class="n">FilePath</span><span class="p">,</span> <span class="n">newEntry</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">dataSize</span> <span class="p">=</span> <span class="n">newEntry</span><span class="p">.</span><span class="n">Offset</span> <span class="p">+</span> <span class="n">newEntry</span><span class="p">.</span><span class="n">CompressedSize</span><span class="p">;</span>
<span class="n">_data</span> <span class="p">=</span> <span class="n">reader</span><span class="p">.</span><span class="nf">ReadBytes</span><span class="p">(</span><span class="n">dataSize</span><span class="p">);</span>
</code></pre></div></div>

<p>Doing it this way doubled the performance of this initial step, reducing the time it takes from 200 to 100 ms on my machine. The real challenge still awaited me though.</p>

<h4 id="prototype-copying">Prototype Copying</h4>

<p>While my initial assumption was that our performance issues were caused by overreliance on <code class="language-plaintext highlighter-rouge">System.Reflection.PropertyInfo.SetValue()</code> for assigning deserialized field values, to my surprise, it wasn’t actually that bad: even when I did some tests and tried implementing caching and eliminating boxing, it made practically no difference. However, profiling revealed the actual culprit: <code class="language-plaintext highlighter-rouge">CalligraphySerializer.CopyPrototypeFields()</code>, which is called 625 772 times when doing a full server initialization. Within it there were two issues that were absolutely killing our performance.</p>

<p>The first issue was pretty straightforward: we were calling <code class="language-plaintext highlighter-rouge">GetProperties()</code> to get an array of C# <code class="language-plaintext highlighter-rouge">PropertyInfo</code> instances for the prototype type that is being copied. Not only <code class="language-plaintext highlighter-rouge">GetProperties()</code> is more costly than I thought, we were actually redoing the work of filtering non-Calligraphy fields each time. By implementing caching here, we reduced the number of <code class="language-plaintext highlighter-rouge">GetProperties()</code> calls and subsequent filtering to just 877, giving us a noticable boost.</p>

<p>But the real gains were in solving the second issue, that lied within the <code class="language-plaintext highlighter-rouge">AssignPointedAtValues()</code> function called in <code class="language-plaintext highlighter-rouge">CopyPrototypeFields()</code>:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">AssignPointedAtValues</span><span class="p">(</span><span class="n">Prototype</span> <span class="n">destPrototype</span><span class="p">,</span> <span class="n">Prototype</span> <span class="n">sourcePrototype</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">PropertyInfo</span> <span class="n">fieldInfo</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">fieldInfo</span><span class="p">.</span><span class="nf">SetValue</span><span class="p">(</span><span class="n">destPrototype</span><span class="p">,</span> <span class="n">fieldInfo</span><span class="p">.</span><span class="nf">GetValue</span><span class="p">(</span><span class="n">sourcePrototype</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This little line of naive reflection runs 7 317 481 times during full server initialization, and it used to take about 2750 out of 14500 ms it took to load all prototypes on my machine. There are much better ways of handling this, and at first I went for the most obvious one you see recommended: using expression trees to compile and cache delegates:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="n">CopyValue</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">PropertyInfo</span> <span class="n">propertyInfo</span><span class="p">,</span> <span class="n">T</span> <span class="n">source</span><span class="p">,</span> <span class="n">T</span> <span class="n">destination</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">CopyPropertyValueDelegateDict</span><span class="p">.</span><span class="nf">TryGetValue</span><span class="p">(</span><span class="n">propertyInfo</span><span class="p">,</span> <span class="k">out</span> <span class="n">Delegate</span> <span class="n">copyValueDelegate</span><span class="p">)</span> <span class="p">==</span> <span class="k">false</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">ParameterExpression</span> <span class="n">sourceParam</span> <span class="p">=</span> <span class="n">Expression</span><span class="p">.</span><span class="nf">Parameter</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="kt">object</span><span class="p">));</span>
        <span class="n">ParameterExpression</span> <span class="n">destinationParam</span> <span class="p">=</span> <span class="n">Expression</span><span class="p">.</span><span class="nf">Parameter</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="kt">object</span><span class="p">));</span>

        <span class="n">Type</span> <span class="n">type</span> <span class="p">=</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="n">DeclaringType</span><span class="p">;</span>

        <span class="n">UnaryExpression</span> <span class="n">castSourceParam</span> <span class="p">=</span> <span class="n">Expression</span><span class="p">.</span><span class="nf">Convert</span><span class="p">(</span><span class="n">sourceParam</span><span class="p">,</span> <span class="n">type</span><span class="p">);</span>
        <span class="n">UnaryExpression</span> <span class="n">castDestinationParam</span> <span class="p">=</span> <span class="n">Expression</span><span class="p">.</span><span class="nf">Convert</span><span class="p">(</span><span class="n">destinationParam</span><span class="p">,</span> <span class="n">type</span><span class="p">);</span>

        <span class="n">MethodCallExpression</span> <span class="n">getCall</span> <span class="p">=</span> <span class="n">Expression</span><span class="p">.</span><span class="nf">Call</span><span class="p">(</span><span class="n">castSourceParam</span><span class="p">,</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="nf">GetGetMethod</span><span class="p">());</span>
        <span class="n">MethodCallExpression</span> <span class="n">setCall</span> <span class="p">=</span> <span class="n">Expression</span><span class="p">.</span><span class="nf">Call</span><span class="p">(</span><span class="n">castDestinationParam</span><span class="p">,</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="nf">GetSetMethod</span><span class="p">(</span><span class="k">true</span><span class="p">),</span> <span class="n">getCall</span><span class="p">);</span>

        <span class="n">copyValueDelegate</span> <span class="p">=</span> <span class="n">Expression</span><span class="p">.</span><span class="n">Lambda</span><span class="p">&lt;</span><span class="n">CopyValueDelegate</span><span class="p">&gt;(</span><span class="n">setCall</span><span class="p">,</span> <span class="n">sourceParam</span><span class="p">,</span> <span class="n">destinationParam</span><span class="p">).</span><span class="nf">Compile</span><span class="p">();</span>
        <span class="n">CopyPropertyValueDelegateDict</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">propertyInfo</span><span class="p">,</span> <span class="n">copyValueDelegate</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">var</span> <span class="n">copy</span> <span class="p">=</span> <span class="p">(</span><span class="n">CopyValueDelegate</span><span class="p">)</span><span class="n">copyValueDelegate</span><span class="p">;</span>
    <span class="nf">copy</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">destination</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This generates and caches functions for every encountered prototype/C# property combination that are equivalent to this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">CopyValue</span><span class="p">(</span><span class="n">Prototype</span> <span class="n">source</span><span class="p">,</span> <span class="n">Prototype</span> <span class="n">destination</span><span class="p">)</span>
<span class="p">{</span>
    <span class="p">((</span><span class="n">SomePrototype</span><span class="p">)</span><span class="n">destination</span><span class="p">).</span><span class="n">SomeProperty</span> <span class="p">=</span> <span class="p">((</span><span class="n">SomePrototype</span><span class="p">)</span><span class="n">source</span><span class="p">).</span><span class="n">SomeProperty</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This did give me a performance boost, reducing the time it took from 2750 to about 1750 ms. However, as I looked more closely at what was taking time, I realized that creating and compiling expression trees took about 1050 ms, with only 700 ms spent on the actual workload. While it was more efficient than naive reflection, it was obvious I was still missing out on performance.</p>

<p>I had to descend deep into the forbidden archives of Microsoft Learn and seek the dark knowledge of <code class="language-plaintext highlighter-rouge">System.Reflection.Emit</code>. Rather than relying on an abstraction in the form of expression trees, I had to throw away what remained of my humanity and look into the abyss of the Microsoft Intermediate Language (MSIL) directly. The end result looks like this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="n">CopyValue</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">PropertyInfo</span> <span class="n">propertyInfo</span><span class="p">,</span> <span class="n">T</span> <span class="n">source</span><span class="p">,</span> <span class="n">T</span> <span class="n">destination</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">CopyPropertyValueDelegateDict</span><span class="p">.</span><span class="nf">TryGetValue</span><span class="p">(</span><span class="n">propertyInfo</span><span class="p">,</span> <span class="k">out</span> <span class="n">Delegate</span> <span class="n">copyValueDelegate</span><span class="p">)</span> <span class="p">==</span> <span class="k">false</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Type</span> <span class="n">type</span> <span class="p">=</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="n">DeclaringType</span><span class="p">;</span>

        <span class="n">DynamicMethod</span> <span class="n">dm</span> <span class="p">=</span> <span class="k">new</span><span class="p">(</span><span class="s">"CopyValue"</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="n">CopyValueArgs</span><span class="p">);</span>
        <span class="n">ILGenerator</span> <span class="n">il</span> <span class="p">=</span> <span class="n">dm</span><span class="p">.</span><span class="nf">GetILGenerator</span><span class="p">();</span>

        <span class="n">il</span><span class="p">.</span><span class="nf">Emit</span><span class="p">(</span><span class="n">OpCodes</span><span class="p">.</span><span class="n">Ldarg_1</span><span class="p">);</span>
        <span class="n">il</span><span class="p">.</span><span class="nf">Emit</span><span class="p">(</span><span class="n">OpCodes</span><span class="p">.</span><span class="n">Castclass</span><span class="p">,</span> <span class="n">type</span><span class="p">);</span>
        <span class="n">il</span><span class="p">.</span><span class="nf">Emit</span><span class="p">(</span><span class="n">OpCodes</span><span class="p">.</span><span class="n">Ldarg_0</span><span class="p">);</span>
        <span class="n">il</span><span class="p">.</span><span class="nf">Emit</span><span class="p">(</span><span class="n">OpCodes</span><span class="p">.</span><span class="n">Castclass</span><span class="p">,</span> <span class="n">type</span><span class="p">);</span>
        <span class="n">il</span><span class="p">.</span><span class="nf">Emit</span><span class="p">(</span><span class="n">OpCodes</span><span class="p">.</span><span class="n">Callvirt</span><span class="p">,</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="nf">GetGetMethod</span><span class="p">());</span>
        <span class="n">il</span><span class="p">.</span><span class="nf">Emit</span><span class="p">(</span><span class="n">OpCodes</span><span class="p">.</span><span class="n">Callvirt</span><span class="p">,</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="nf">GetSetMethod</span><span class="p">(</span><span class="k">true</span><span class="p">));</span>
        <span class="n">il</span><span class="p">.</span><span class="nf">Emit</span><span class="p">(</span><span class="n">OpCodes</span><span class="p">.</span><span class="n">Ret</span><span class="p">);</span>

        <span class="n">copyValueDelegate</span> <span class="p">=</span> <span class="n">dm</span><span class="p">.</span><span class="n">CreateDelegate</span><span class="p">&lt;</span><span class="n">CopyValueDelegate</span><span class="p">&gt;();</span>
        <span class="n">CopyPropertyValueDelegateDict</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">propertyInfo</span><span class="p">,</span> <span class="n">copyValueDelegate</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">var</span> <span class="n">copy</span> <span class="p">=</span> <span class="p">(</span><span class="n">CopyValueDelegate</span><span class="p">)</span><span class="n">copyValueDelegate</span><span class="p">;</span>
    <span class="nf">copy</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">destination</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><em>NOTE: Chronologically this happened before my <code class="language-plaintext highlighter-rouge">CodedOutputStream</code> hack I talked about above. This is actually the real moment of my <code class="language-plaintext highlighter-rouge">ILGenerator</code> downfall.</em></p>

<p>This emits the same code as using expression trees, but at an almost ridiculously lower cost: my delegate creation time went from 1050 to about 70 ms, bringing the total time time <code class="language-plaintext highlighter-rouge">AssignPointedAtValues()</code> took to just about 770 ms, a 72% reduction.</p>

<h4 id="net-8-and-quick-jit-for-loops">.NET 8 and Quick JIT for Loops</h4>

<p>C# is part of the .NET platform, and the way it works these days is that there is a new version released every year. Odd versions (7, 8, 9) are supported for 1.5 years, while even versions (6, 8, 10) are long-term support (LTS) releases with 3 years of updates. When a version’s support ends, it stops receiving updates, including security fixes, and Visual Studio starts giving you the evil eye for targeting a “deprecated” framework. The support for .NET 6, the version that MHServerEmu is currently targeting, will end on November 12, 2024. While we can live with VS annoying us slightly more than usual, not having security updates for potentially public-facing server software is unacceptable, so we had to get ready for November.</p>

<p>I had been testing this for some time now. Retargeting is as easy as changing the number from 6 to 8 in project files and pressing the “Build” button, but there were two issues that made me less enthusiastic about this forced upgrade.</p>

<p>The first one is admittedly rather silly: .NET 7 dropped the support for Windows 7, so by retargeting to .NET 8 we would be doing so as well. This is honestly not that big of a deal: the few Windows 7 enjoyers (0.37% of Steam users according to the August 2024 hardware survey) are probably getting used to their OS of choice no longer being supported, and if you really want to, you can retarget the server back to a legacy framework relatively easily.</p>

<p>The other one was much more severe though: for some reason, the exact same game database initialization code targeting .NET 8 ran 35% slower than in .NET 6, contrary to all claims of performance improvements that new .NET versions bring. Something was not right here, but it was difficult to pinpoint the exact issue by profiling.</p>

<p>Eventuallly I ran into <a href="https://stackoverflow.com/questions/74833459/performance-issue-with-for-loop-on-the-initial-run-on-net-7/74837351">a discussion on Stack Overflow</a> started by somebody who was having a similar issue when upgrading to .NET 7. This massive performance degradation appears to be indirectly caused by a feature called <a href="https://devblogs.microsoft.com/dotnet/performance_improvements_in_net_7/#on-stack-replacement">On-Stack Replacement</a> introduced in .NET 7. Here is an overview of what was happening:</p>

<ul>
  <li>
    <p>When you build your project, your C# code is compiled to intermediate language (IL), also referred to as bytecode.</p>
  </li>
  <li>
    <p>The runtime that executes your program uses just-in-time (JIT) compilation to compile IL to native code for the platform it is running on. This happens as the program is being executed.</p>
  </li>
  <li>
    <p>There are cases when it takes more time to compile IL than to actually execute it, and if this code is only executed once, wasting too much time compiling it leads to an overall performance loss.</p>
  </li>
  <li>
    <p>To mitigate this issue, a feature called <em>tiered compilation</em> was introduced to the JIT compiler in .NET Core 2.1. When a piece of code is executed for the first time, it is compiled quickly with minimal optimizations, which is called <em>quick JIT</em>. If the runtime detects that your code is executed often enough, it recompiles it with a higher level of optimization.</p>
  </li>
  <li>
    <p>When quick JIT was first introduced, it had performance issues with functions containing loops, so it was disabled by default for those cases. .NET 7 changes apparently made this no longer necessary, so quick JIT for loops became enabled by default, even though the <a href="https://learn.microsoft.com/en-us/dotnet/core/runtime-config/compilation#quick-jit-for-loops">documentation</a> still says the default behavior is equivalent to <code class="language-plaintext highlighter-rouge">false</code>.</p>
  </li>
</ul>

<p>The game database initialization contains many intensive functions with loops that are executed only once. Because of this, most of them do not use quick JIT in .NET 6, making them compile to optimized native code on the initial run (which is their <em>only</em> run). In .NET 8, by default quick JIT is now applied to them, making them run in their less optimized form.</p>

<p>Turning quick JIT for loops off brought our code running on .NET 8 approximately back to .NET 6 levels. Turning quick JIT completely off gave us a noticable performance boost on <em>both</em> 6 and 8 (about 500 ms on my machine).</p>

<hr />

<p>All of these optimizations brought full database initialization time from approximately 14500 ms to 8500 ms on average on my machine, an overall 40-42% boost.</p>

<h3 id="round-3-propertylist">Round 3: PropertyList</h3>

<p>The final frontier of this optimization pass was always going to be the <code class="language-plaintext highlighter-rouge">PropertyList</code> data structure. Properties are everywhere in this game: heroes, villains, friendly NPCs, regions, powers, conditions, and more. This makes any changes made to this system more impactful, both in terms of performance gains and ways thing can go wrong.</p>

<p>Each <code class="language-plaintext highlighter-rouge">PropertyCollection</code> has two <code class="language-plaintext highlighter-rouge">PropertyList</code> instances backing it. One is called a <em>base list</em>, which contains all properties actually belonging to that collection. The other one is referred to as an <em>aggregate list</em>, and it contains properties from the base list aggregated (combined) with properties from all attached child collections. The simplest example of this would be an avatar with equipped gear: <code class="language-plaintext highlighter-rouge">PropertyCollection</code> instances of each equipped item are aggregated with the avatar’s own collection, which results in the base list containing properties inherent to the avatar entity itself, and the aggregate list containing a combination of the avatar’s base properties with all of the item properties.</p>

<p>Our previous <code class="language-plaintext highlighter-rouge">PropertyList</code> implementation was just a simple wrapper around <code class="language-plaintext highlighter-rouge">Dictionary&lt;PropertyId, PropertyValue&gt;</code>. It works well for simple lookups, but the game makes heavy use of all kinds of filtered property iteration, some of which require properties to be grouped by <code class="language-plaintext highlighter-rouge">PropertyEnum</code> (see the <a href="/MHServerEmu/blog/2024/02/28/progress-report-february-2024.html">February 2024 report</a> for more information on how properties work). Initially I tried using <code class="language-plaintext highlighter-rouge">SortedDictionary&lt;PropertyId, PropertyValue&gt;</code>, but its performance was not acceptable compared to a regular dictionary. The fastest and easiest to implement solution that would do the job turned out to be using the <code class="language-plaintext highlighter-rouge">OrderBy()</code> LINQ extension method for every iteration, which copies all data to a new collection and sorts it. While it did work, it was also stupidly inefficient, especially in terms of memory allocation. And when you consider that <code class="language-plaintext highlighter-rouge">PropertyList</code> iteration is also used for lookup methods, like <code class="language-plaintext highlighter-rouge">PropertyCollection.HasProperty()</code>, it starts getting just silly.</p>

<p>For this overhaul I took another look at the client implementation, aptly named <code class="language-plaintext highlighter-rouge">NewPropertyList</code>. While it does some things that do not translate to C# well, there is one core concept I adapted from it. In most cases properties are actually <em>not</em> parameterized: it is common that over a half or even all properties in a collection are basically combinations of <code class="language-plaintext highlighter-rouge">PropertyEnum</code> and <code class="language-plaintext highlighter-rouge">PropertyValue</code>. So instead of storing all properties in a single monolithic collection, it is actually more efficient to use a divide-and-conquer approach:</p>

<ul>
  <li>
    <p>Each <code class="language-plaintext highlighter-rouge">PropertyEnum</code> gets a <code class="language-plaintext highlighter-rouge">PropertyEnumNode</code> instance, which can be accessed by a hash table (a <code class="language-plaintext highlighter-rouge">Dictionary&lt;PropertyEnum, PropertyEnumNode&gt;</code> in our implementation).</p>
  </li>
  <li>
    <p>Each <code class="language-plaintext highlighter-rouge">PropertyEnumNode</code> consists of a <code class="language-plaintext highlighter-rouge">PropertyValue</code> and a <code class="language-plaintext highlighter-rouge">PropertyArray</code>, which is a collection of <code class="language-plaintext highlighter-rouge">PropertyId</code>/<code class="language-plaintext highlighter-rouge">PropertyValue</code> pairs. A node is essentially a bucket for a specific <code class="language-plaintext highlighter-rouge">PropertyEnum</code>.</p>
  </li>
  <li>
    <p>When a node is created for an enum for the first time, the list checks whether or not the <code class="language-plaintext highlighter-rouge">PropertyId</code> that is being set has parameters. If it does, a new <code class="language-plaintext highlighter-rouge">PropertyArray</code> is allocated for it, and the id/value pair is added there. If it does not, the value is simply assigned to the <code class="language-plaintext highlighter-rouge">PropertyValue</code> field.</p>
  </li>
  <li>
    <p>If an existing node containing a non-parameterized property is updated with another non-parameterized property, the value field is simply overwritten. If a parameterized property is added to a non-parameterized node, a new <code class="language-plaintext highlighter-rouge">PropertyArray</code> is allocated for this node, and both id/value pairs are added to it.</p>
  </li>
</ul>

<p>The end result in our best case scenario is that we do a single dictionary lookup and immediately get our non-parameterized value from the node, nice and efficient. And because most of the time properties are not parameterized, we get our best case most of the time.</p>

<p>When I was picking the backing data structure for our <code class="language-plaintext highlighter-rouge">PropertyArray</code> implementation, at first I looked again at what I tried before, <code class="language-plaintext highlighter-rouge">Dictionary&lt;PropertyId, PropertyValue</code> and <code class="language-plaintext highlighter-rouge">SortedDictionary&lt;PropertyId, PropertyValue&gt;</code>. My thinking was that maybe sorted dictionaries will outperform hashed ones at smaller element counts, but this assumption was wrong: benchmarking revealed that hash dictionaries were faster in pretty much all circumstances in .NET 6, and almost on par in .NET 8. However, creating tens of thousands of dictionaries, each managing their own hash buckets, was too costly for this, so I looked for the simplest solution possible.</p>

<p>The one I ended up picking was <code class="language-plaintext highlighter-rouge">List&lt;PropertyPair&gt;</code>, with <code class="language-plaintext highlighter-rouge">PropertyPair</code> being a variation of <code class="language-plaintext highlighter-rouge">KeyValuePair&lt;PropertyId, PropertyValue&gt;</code> with an <code class="language-plaintext highlighter-rouge">IComparable</code> implementation that compares pairs by keys. We add pairs to the list in sorted order, which in practice is basically free, because the most common case for property assignment is copying them from another collection, where they would already be sorted.</p>

<p>Since our lists are often tiny (&lt; 10 elements), for lookups we are using the simplest thing possible: linear search with early exit.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="kt">int</span> <span class="nf">Find</span><span class="p">(</span><span class="n">PropertyId</span> <span class="n">id</span><span class="p">,</span> <span class="k">out</span> <span class="n">PropertyValue</span> <span class="k">value</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">count</span> <span class="p">=</span> <span class="n">_list</span><span class="p">.</span><span class="n">Count</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
    <span class="p">{</span>
        <span class="n">PropertyPair</span> <span class="n">pair</span> <span class="p">=</span> <span class="n">_list</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">pair</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">value</span> <span class="p">=</span> <span class="n">pair</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">pair</span><span class="p">.</span><span class="n">Id</span><span class="p">.</span><span class="n">Raw</span> <span class="p">&gt;</span> <span class="n">id</span><span class="p">.</span><span class="n">Raw</span><span class="p">)</span>
            <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">value</span> <span class="p">=</span> <span class="k">default</span><span class="p">;</span>
    <span class="k">return</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>I did some measurements actually playing the game, and in the vast majority of cases (94.13%) this loop exits at <code class="language-plaintext highlighter-rouge">i &lt; 8</code>, with a significant portion of them (32.38%) being at <code class="language-plaintext highlighter-rouge">i &lt; 4</code>. Relatively costly lookups (<code class="language-plaintext highlighter-rouge">i &gt;= 16</code>) were only 5.69%.</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-09/property-array.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-09/property-array.png" alt="PropertyArray Lookups" /></a></p>

<p>With usage like this, the simpler thing is actually more efficient than doing something more complex, like binary search. In theory it should also work better with the CPU’s branch prediction, making it even faster.</p>

<p>With all of that done, the new <code class="language-plaintext highlighter-rouge">PropertyList</code> implementation was almost a drop-in replacement for the old one. The only real major difference that had to be dealt with was the fact that the list can no longer be modified while it is being iterated, because we are now iterating the actual data instead of its copy. However, there were only two such cases in our codebase, and they were both very easy to fix.</p>

<hr />

<p>And with that our optimization journey comes to an end. There are always more gains to be made, but for now I feel the server is in a much better state than it was a month ago, and now I can get back to implementing exciting gameplay features, such as conditions (buffs/debuffs) and loot system improvements.</p>

<h2 id="mission-impossible">Mission: Impossible</h2>

<p><em>Time for a deep dive into missions, presented by AlexBond.</em></p>

<hr />

<p>Hey everyone, it’s AlexBond. Let there be missions!</p>

<p>In this report I would like to share details on how I brought missions back to the game, and how it all works.</p>

<h3 id="mission-prototypes">Mission Prototypes</h3>

<p>The first thing to do was figuring out what prototypes are used for missions and how they are related to each other. Using the <em>Game Database Browser</em>, I determined the four main prototype classes:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">MissionPrototype</code></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">MissionObjectivePrototype</code></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">MissionActionPrototype</code></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">MissionConditionPrototype</code></p>
  </li>
</ul>

<p>There are various subclasses of MissionPrototype (<code class="language-plaintext highlighter-rouge">OpenMissionPrototype</code>, <code class="language-plaintext highlighter-rouge">LegendaryMissionPrototype</code>, <code class="language-plaintext highlighter-rouge">DailyMissionPrototype</code>, <code class="language-plaintext highlighter-rouge">AdvancedMissionPrototype</code>), but this time we will be looking at the base type.</p>

<p>The two primary groups of data contained in a <code class="language-plaintext highlighter-rouge">MissionPrototype</code> are <code class="language-plaintext highlighter-rouge">MissionConditions</code> and <code class="language-plaintext highlighter-rouge">MissionActions</code>. The former group defines events that need to tracked, while the latter determines what will happen when a mission’s state changes.</p>

<p>Here is an overview of how <code class="language-plaintext highlighter-rouge">MissionPrototype</code> data is used to interact with players and other objects in the game world:</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2024-09/missions-1.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-09/missions-1.png" alt="Mission Structure" style="max-height: 500px;" /></a>
</center>

<p>The are two varieties of <code class="language-plaintext highlighter-rouge">MissionManager</code>: one for regions, and one for player entities.</p>

<p>When a region is loaded, a global <code class="language-plaintext highlighter-rouge">MissionManager</code> is created and bound to that region. It then loads all <code class="language-plaintext highlighter-rouge">OpenMissionPrototype</code> instances that specify this region in their <code class="language-plaintext highlighter-rouge">ActiveInRegions</code> field.</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-09/missions-2.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-09/missions-2.png" alt="ActiveInRegions" /></a></p>

<p>Also, as part of the region generation process, a function called <code class="language-plaintext highlighter-rouge">GenerateMissionPopulation()</code> is run, which takes population data from <code class="language-plaintext highlighter-rouge">PopulationSpawns</code> and forwards it to a <code class="language-plaintext highlighter-rouge">MissionSpawnEvent</code> (more on that later).</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-09/missions-3.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-09/missions-3.png" alt="MissionPopulationEntry" /></a></p>

<p>After the region finishes loading and spawning all required objects, the mission’s state changes to active, and the <code class="language-plaintext highlighter-rouge">OnStartActions</code> event is invoked, which mainly activates various ambient animations for NPCs and mobs using <code class="language-plaintext highlighter-rouge">MissionActionEntityPerformPowerPrototype</code>.</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-09/missions-4.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-09/missions-4.png" alt="MissionActionEntityPerformPowerPrototype" /></a></p>

<p>Each mission has a <code class="language-plaintext highlighter-rouge">MissionState</code> that switches in the following order:</p>

<p><code class="language-plaintext highlighter-rouge">Invalid</code> - <code class="language-plaintext highlighter-rouge">Inactive</code> - <code class="language-plaintext highlighter-rouge">Available</code> - <code class="language-plaintext highlighter-rouge">Completed</code> - <code class="language-plaintext highlighter-rouge">Failed</code></p>

<p>The switching process is very complex, so I will not be going into detail on how it works. Instead, here is a flowchart:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-09/missions-5.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-09/missions-5.png" alt="Mission State Chart" /></a></p>

<h3 id="missionobjective">MissionObjective</h3>

<p>Each mission contains a collection of <em>objectives</em>. <code class="language-plaintext highlighter-rouge">MissionObjective</code> has some differences from <code class="language-plaintext highlighter-rouge">Mission</code>, but overall they are very similar:</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2024-09/missions-6.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-09/missions-6.png" alt="Mission Objective Structure" style="max-height: 500px;" /></a>
</center>

<p>When a mission is activated, it switches all of its objectives to the <code class="language-plaintext highlighter-rouge">Available</code> state. This registers events for triggers and creates all the required <em>actions</em> and <em>conditions</em>. When an objective’s state changes to <code class="language-plaintext highlighter-rouge">Active</code>, its <code class="language-plaintext highlighter-rouge">SuccessConditions</code> start being tracked.</p>

<p>All objectives are completed in order, and more often than not their success condition is the completion of another mission. <code class="language-plaintext highlighter-rouge">MissionObjectiveState</code> switching process is similar to <code class="language-plaintext highlighter-rouge">MissionState</code>, but there are some differences. Here is a diagram of this process:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-09/missions-7.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-09/missions-7.png" alt="Missions Objective State Chart" /></a></p>

<p>Now that we have “figured out” all the complexities, it’s time to take a look at how it all works in the game in the context of the <em>story</em> mode.</p>

<h3 id="story">Story</h3>

<p>The game went through a lot of rewrites: many patches came out, the story mode underwent changes, content was removed, gameplay systems were reworked. Because of this, the prototypes are a mess of working and deprecated missions mixed together. Some missions have conflicts with one another, and others do not work at all. Let’s take a look at this:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-09/missions-8.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-09/missions-8.png" alt="Act vs Story" /></a></p>

<p>As you can see, we have two mission directories, and many missions are duplicated and/or have conflicts… Sometimes it’s the Story missions that are the working ones, and sometimes it’s the ones from Acts…</p>

<p>Let’s take a look at an example of Story with Chapter 1.</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2024-09/missions-9.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-09/missions-9.png" alt="Story Chapter 1" style="max-height: 500px;" /></a>
</center>

<p>Missions are divided into <code class="language-plaintext highlighter-rouge">Main</code>, <code class="language-plaintext highlighter-rouge">Controllers</code>, <code class="language-plaintext highlighter-rouge">Discoveries</code>, and <code class="language-plaintext highlighter-rouge">Events</code>.</p>

<p>Each <code class="language-plaintext highlighter-rouge">Main</code> mission contains objectives:</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2024-09/missions-10.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-09/missions-10.png" alt="Mission Objectives" /></a>
</center>

<p>Let’s examine one of these objectives:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-09/missions-11.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-09/missions-11.png" alt="Mission Objective Example" /></a></p>

<p>The completion of this objective requires the fullfillment of a <code class="language-plaintext highlighter-rouge">MissionConditionMissionComplete</code> for a controller (another mission) - <code class="language-plaintext highlighter-rouge">NYPDSonicEmitter</code> .</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-09/missions-12.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-09/missions-12.png" alt="Mission Condition Example" /></a></p>

<p>Within this controller there are three more conditions:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-09/missions-13.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-09/missions-13.png" alt="Mission Controller Example" /></a></p>

<p><code class="language-plaintext highlighter-rouge">Controller</code> missions in most cases manage a single boss, animation, or event.</p>

<p><code class="language-plaintext highlighter-rouge">Discovery</code> missions activate triggers for discoverable mission objects on the map. They manage interactable NPCs that need to be saved or helped. All interactable NPCs on the map are <code class="language-plaintext highlighter-rouge">Discovery</code> missions.</p>

<p><code class="language-plaintext highlighter-rouge">Event</code> missions start region events when a player comes near them.</p>

<p>In other words, <code class="language-plaintext highlighter-rouge">MissionPrototype</code> is essentially a form of scripting. Many smaller missions are restarted automatically.</p>

<p>All of the above was about <em>region missions</em>, now let’s talk about <em>player missions</em>.</p>

<h3 id="player-missions">Player Missions</h3>

<p>Player missions start loading when a player with an active chapter enters a region. In total there are 303 such missions. They are saved per account and represent a player’s story progress. Many of them have the <code class="language-plaintext highlighter-rouge">SaveStatePerAvatar</code> flag and are saved in property collections of each avatar separately, which is what allows you to play through the story from beginning to end as each hero separately.</p>

<p>When I was testing the story, these missions were enough to get me to chapter 5, where I encountered <code class="language-plaintext highlighter-rouge">MetaGames</code> with no way forward without implementing them.</p>

<h3 id="metagames">MetaGames</h3>

<p>MetaGames are sets of global events for a given region that run on timers. Each MetaGame has a <code class="language-plaintext highlighter-rouge">MetaGameMode</code> and various <code class="language-plaintext highlighter-rouge">MetaStates</code>. The start of a MetaGame event usually creates a UI widget that looks like this:</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2024-09/missions-14.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2024-09/missions-14.jpg" alt="MetaGame Widget" /></a>
</center>

<p>Here is a list of modes that exist:</p>

<table>
  <thead>
    <tr>
      <th>GameMode</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>MetaGameMode</td>
      <td>Story</td>
    </tr>
    <tr>
      <td>MetaGameModeIdle</td>
      <td>TrainingRoom</td>
    </tr>
    <tr>
      <td>MetaGameModeShutdown</td>
      <td>Challenges</td>
    </tr>
    <tr>
      <td>MetaGameStateMode</td>
      <td>Story</td>
    </tr>
    <tr>
      <td>NexusPvPMainMode</td>
      <td> </td>
    </tr>
    <tr>
      <td>PvEScaleGameMode</td>
      <td>Limbo</td>
    </tr>
    <tr>
      <td>PvEWaveGameMode</td>
      <td> </td>
    </tr>
    <tr>
      <td>PvPDefenderGameMode</td>
      <td>PvP</td>
    </tr>
  </tbody>
</table>

<p>As you can see, the story uses only two modes. It also requires a number of states: <code class="language-plaintext highlighter-rouge">MetaStateMissionActivate</code>, <code class="language-plaintext highlighter-rouge">MetaStateMissionSequence</code>, <code class="language-plaintext highlighter-rouge">MetaStatePopulationMaintain</code>, and <code class="language-plaintext highlighter-rouge">MetaStateWaveInstance</code>.</p>

<p>Here is a full list of all states:</p>

<table>
  <thead>
    <tr>
      <th>MetaState</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>MetaStateCombatQueueLockout</td>
      <td>Raids</td>
    </tr>
    <tr>
      <td>MetaStateEntityEventCounter</td>
      <td>XMansion, Holo-Sim</td>
    </tr>
    <tr>
      <td>MetaStateEntityModifier</td>
      <td>XMansion, Holo-Sim</td>
    </tr>
    <tr>
      <td>MetaStateLimitPlayerDeaths</td>
      <td>Gate, Raids</td>
    </tr>
    <tr>
      <td>MetaStateLimitPlayerDeathsPerMission</td>
      <td>SurturDebugMainMode</td>
    </tr>
    <tr>
      <td>MetaStateMissionActivate</td>
      <td> </td>
    </tr>
    <tr>
      <td>MetaStateMissionProgression</td>
      <td>Raids</td>
    </tr>
    <tr>
      <td>MetaStateMissionRestart</td>
      <td>AxisRaid</td>
    </tr>
    <tr>
      <td>MetaStateMissionSequence</td>
      <td> </td>
    </tr>
    <tr>
      <td>MetaStateMissionStateListener</td>
      <td>XMansion</td>
    </tr>
    <tr>
      <td>MetaStatePopulationMaintain</td>
      <td> </td>
    </tr>
    <tr>
      <td>MetaStateRegionPlayerAccess</td>
      <td> </td>
    </tr>
    <tr>
      <td>MetaStateScoringEventTimerEnd</td>
      <td>DangerRoomTimerEnd</td>
    </tr>
    <tr>
      <td>MetaStateScoringEventTimerStart</td>
      <td>DangerRoomTimerStart</td>
    </tr>
    <tr>
      <td>MetaStateScoringEventTimerStop</td>
      <td>DangerRoomTimerStop</td>
    </tr>
    <tr>
      <td>MetaStateShutdown</td>
      <td>DangerRoom</td>
    </tr>
    <tr>
      <td>MetaStateStartTargetOverride</td>
      <td>SurturStartTargetCaldera</td>
    </tr>
    <tr>
      <td>MetaStateTimedBonus</td>
      <td>AgeOfUltronTimedBonusPhase01</td>
    </tr>
    <tr>
      <td>MetaStateTrackRegionScore</td>
      <td>DangerRoom, AgeOfUltron</td>
    </tr>
    <tr>
      <td>MetaStateWaveInstance</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<p>I had to implement the required modes and states to continue working on missions.</p>

<p>Many of these states contain populations that need to be spawned dynamically using <code class="language-plaintext highlighter-rouge">MetaStateSpawnEvent</code>. This is what we will be looking at next.</p>

<h3 id="spawnevent">SpawnEvent</h3>

<p>The old spawning system I was using became no longer suitable for current circumstances. I had to rework it, which involved creating the following classes:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">SpawnEvent</code> (<code class="language-plaintext highlighter-rouge">PopulationAreaSpawnEvent</code>, <code class="language-plaintext highlighter-rouge">MissionSpawnEvent</code>, <code class="language-plaintext highlighter-rouge">MetaStateSpawnEvent</code>)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">SpawnScheduler</code> (<code class="language-plaintext highlighter-rouge">MarkerScheduler</code>, <code class="language-plaintext highlighter-rouge">LocationScheduler</code>)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">PopulationObjectQueue</code> (<code class="language-plaintext highlighter-rouge">CriticalQueue</code>, <code class="language-plaintext highlighter-rouge">RegularQueue</code>)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">SpawnLocation</code></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">SpawnMap</code> (to be implemented)</p>
  </li>
</ul>

<p>All the information we need for spawning is contained in <code class="language-plaintext highlighter-rouge">PopulationObject</code>, but it needs to be retrieved and processed correctly. Previously I did this manually, which is why everything was static. However, the game requires dynamic spawning.</p>

<p>Here is how it’s done. First, the <code class="language-plaintext highlighter-rouge">SpawnEvent</code> type is determined, which then processes our population by getting all <code class="language-plaintext highlighter-rouge">PopulationObject</code> instances from it. Objects are divided based on their properties by how <em>critical</em> they are for spawning and how <em>tied</em> they are to a location. Critical objects are spawned first, and while we have even a single critical object for a marker, none of the non-critical objects should be spawning (this caused a lot of issues with missions). If there is a <code class="language-plaintext highlighter-rouge">UsePopulationMarker</code> marker, the object is forwarded to a <code class="language-plaintext highlighter-rouge">MarkerScheduler</code>, otherwise it goes to a <code class="language-plaintext highlighter-rouge">LocationScheduler</code>.</p>

<p>First, we check if the region has a free marker using <code class="language-plaintext highlighter-rouge">SpawnMarkerRegistry</code>, and if it matches our <code class="language-plaintext highlighter-rouge">SpawnLocation</code>, this marker becomes reserved, and our object spawns on it. The number of markers in a region is limited, which causes problems, because the spawn queue is very large. To solve this issue, I have implemented two classes: <code class="language-plaintext highlighter-rouge">PopulationObjectQueue</code> and <code class="language-plaintext highlighter-rouge">SpawnScheduler</code>. They manage the queue and keep everything in order, preventing missions from breaking.</p>

<p>When all <code class="language-plaintext highlighter-rouge">SpawnEvent</code> objects are spawned, the <code class="language-plaintext highlighter-rouge">OnSpawnedPopulation</code> event is invoked, which activates the mission. If the marker is occupied, the required mission objects fail to spawn, and the mission does not activate.</p>

<p>This chart demonstrates how spawning is planned:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-09/missions-15.png"><img src="/MHServerEmu/assets/blog/progress-report/2024-09/missions-15.png" alt="Spawn Queue Chart" /></a></p>

<h3 id="conclusion">Conclusion</h3>

<p>As you can see, missions are a very complex system of interconnections, states, conditions, and events. This makes it difficult to find the reason something breaks and understand it. Although I was able to fix the most glaring issues, and right now it is possible to finish all 10 chapters of the story, there is still a lot of work to do, including debugging internal missions, MetaState, widgets, animations, rewards, SpawnMap, and so on.</p>

<p>Thank you to everybody who is helping me debug missions, and until we meet again in future reports!</p>

<hr />

<p>This was a huge one! Thanks to everyone who read (or just scrolled) all the way to the end, see you all next time!</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry></feed>