<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://crypto137.github.io/MHServerEmu/feed.xml" rel="self" type="application/atom+xml" /><link href="https://crypto137.github.io/MHServerEmu/" rel="alternate" type="text/html" /><updated>2025-09-30T14:41:12+03:00</updated><id>https://crypto137.github.io/MHServerEmu/feed.xml</id><title type="html">MHServerEmu Blog</title><subtitle>A volunteer-driven research project aimed at reverse engineering the technology developed by Gazillion Entertainment.</subtitle><entry><title type="html">MHServerEmu Progress Report: September 2025</title><link href="https://crypto137.github.io/MHServerEmu/blog/2025/09/30/progress-report-september-2025.html" rel="alternate" type="text/html" title="MHServerEmu Progress Report: September 2025" /><published>2025-09-30T14:25:00+03:00</published><updated>2025-09-30T14:25:00+03:00</updated><id>https://crypto137.github.io/MHServerEmu/blog/2025/09/30/progress-report-september-2025</id><content type="html" xml:base="https://crypto137.github.io/MHServerEmu/blog/2025/09/30/progress-report-september-2025.html"><![CDATA[<p><img src="/MHServerEmu/assets/blog/progress-report/2025-09/header.jpg" alt="MHServerEmu Progress Report - September 2025" /></p>

<p>It’s party time. P-A-R-T-Why? Because I gotta!</p>

<h2 id="parties">Parties</h2>

<p>The long awaited Party system is finally here, and now you can play most of the content in the game with your friends. While the implementation of the Party system itself took only a few weeks, it really is the culmination of the two months of backend work that preceded it, including overhauling how instancing works and implementing the Community system, which we covered in previous reports.</p>

<p>Like other social features, the Party system breaks the boundaries of individual game instances to connect players across them. One thing that makes parties special is that they are “owned” by the server rather than individual players: the player who started a party may leave it and log out, but the party will continue to exist for as long as it still has any members. Because of this, authoritative representations of parties need to exist in one of the services that run for as long as server itself does. This is where the confusion begins.</p>

<p>As a reminder, there are two services that the client remains connected to for the entire duration of a session, no matter what game instance it is currently being hosted by: the Player Manager and the Grouping Manager. Originally, all party functionality was handled by the appropriately named Grouping Manager, but there was a pretty major change in 2017. It appears that when Gazillion was integrating their social functionality into the console online services, PlayStation Network and Xbox Live, they decided to move party functionality from the Grouping Manager to the Player Manager. As a result, the Grouping Manager became little more than a chat service, while the Player Manager ended up being effectively the primary service that orchestrated the entire game.</p>

<p>One example of a minor point of confusion this change caused is the API used for party requests. In versions of the game prior to the Biggest Update Ever (BUE) the client did party requests using a number of separate network messages:</p>

<div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">NetMessageRequestPartyJoinPortal</span> <span class="p">{</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">NetMessageDeclineGroupInvite</span> <span class="p">{</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">NetMessageLeaveGroup</span> <span class="p">{</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">NetMessageChangeGroupLeader</span> <span class="p">{</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">targetMemberId</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">NetMessageBootPlayer</span> <span class="p">{</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">targetMemberId</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">NetMessageDisbandGroup</span> <span class="p">{</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">NetMessageGroupChangeType</span> <span class="p">{</span>
    <span class="k">required</span> <span class="n">GroupType</span>    <span class="na">type</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">NetMessageGroupChangeTypeConfirmResponse</span> <span class="p">{</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">playerId</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">accept</span>    <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In BUE this was changed into what is essentially a subprotocol, and all requests were unified into a single structure called <code class="language-plaintext highlighter-rouge">PartyOperationPayload</code>:</p>

<div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">PartyOperationPayload</span> <span class="p">{</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">requestingPlayerDbId</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">string</span>    <span class="na">requestingPlayerName</span>    <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">uint64</span>    <span class="na">requestingPlayerPsnAccountId</span>    <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">uint64</span>    <span class="na">targetPlayerDbId</span>    <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">string</span>    <span class="na">targetPlayerName</span>    <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="k">required</span> <span class="n">GroupingOperationType</span>    <span class="na">operation</span>    <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">string</span>    <span class="na">psnSessionId</span>    <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">uint64</span>    <span class="na">difficultyTierProtoId</span>    <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">NetMessagePartyOperationRequest</span> <span class="p">{</span>
    <span class="k">required</span> <span class="n">PartyOperationPayload</span>    <span class="na">payload</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>However, you may notice that the <code class="language-plaintext highlighter-rouge">operation</code> enumeration is still referred to as a “grouping” operation:</p>

<div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="n">GroupingOperationType</span> <span class="p">{</span>
    <span class="na">eGOP_InvitePlayer</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="na">eGOP_AcceptInvite</span>    <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="na">eGOP_DeclineInvite</span>    <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="na">eGOP_JoinPartyWithPSNSessionId</span>    <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
    <span class="na">eGOP_LeaveParty</span>    <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="na">eGOP_DisbandParty</span>    <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
    <span class="na">eGOP_ServerNotification</span>    <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
    <span class="na">eGOP_KickPlayer</span>    <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
    <span class="na">eGOP_ChangeLeader</span>    <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
    <span class="na">eGOP_ConvertToRaid</span>    <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="na">eGOP_ConvertToRaidAccept</span>    <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>
    <span class="na">eGOP_ConvertToRaidDecline</span>    <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
    <span class="na">eGOP_ConvertToParty</span>    <span class="o">=</span> <span class="mi">13</span><span class="p">;</span>
    <span class="na">eGOP_ChangeDifficulty</span>    <span class="o">=</span> <span class="mi">14</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This is because this enumeration actually comes from the pre-BUE version of the party API: it was simply moved from <code class="language-plaintext highlighter-rouge">GroupingManager.proto</code> to <code class="language-plaintext highlighter-rouge">CommonMessages.proto</code>. The functionality itself is mostly the same, but untangling subtle API nuances like this took a little bit of time.</p>

<p>It gets messier when it comes to replicating the authoritative data from the Player Manager to everything that needs to use it. Here is the big picture overview of what it looks like with a party of two members in two game instances:</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2025-09/party-data.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-09/party-data.png" alt="Party Data Replication Diagram" /></a>
</center>

<p>When a player is added to a game instance, this game instance needs to know if the player is in a party, so the Player Manager sends this data in a structure called <code class="language-plaintext highlighter-rouge">PartyInfo</code>:</p>

<div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">PartyMemberInfo</span> <span class="p">{</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">playerDbId</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">string</span>    <span class="na">playerName</span>    <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">repeated</span> <span class="kt">uint64</span>    <span class="na">boosts</span>    <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">uint64</span>    <span class="na">consoleAccountId</span>    <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">uint64</span>    <span class="na">secondaryConsoleAccountId</span>    <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">string</span>    <span class="na">secondaryPlayerName</span>    <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">PartyInfo</span> <span class="p">{</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">groupId</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">required</span> <span class="n">GroupType</span>    <span class="na">type</span>    <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">leaderDbId</span>    <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">difficultyTierProtoId</span>    <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">string</span>    <span class="na">groupPSNSessionId</span>    <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="k">repeated</span> <span class="n">PartyMemberInfo</span>    <span class="na">members</span>    <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">string</span>    <span class="na">voiceChatFrontendIPAddr</span>    <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">string</span>    <span class="na">voiceChatFrontendPort</span>    <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The game instance uses this data to either construct a new local representation of a party or update an existing one. It is also relayed to the client, so that it can construct or update its own representation of the same party. The representation in the game instance is shared by all party members present in the instance, and it is destroyed when there are no longer any members in the instance.</p>

<p>When the game instance representation changes, it notifies the local <code class="language-plaintext highlighter-rouge">Player</code> entities representing members present in the instance. Each <code class="language-plaintext highlighter-rouge">Player</code> entity has a <code class="language-plaintext highlighter-rouge">Community</code> instance bound to it, which has a circle dedicated to holding current party members (see the <a href="/MHServerEmu/blog/2025/08/30/progress-report-august-2025.html">previous report</a> for more information on how the Community system works). The client relies on the Party circle to display hero icons for party members, and the server needs it to determine active <em>party filters</em> - conditions required to trigger scoring events for certain party-related achievements (e.g. do something in a party with specific heroes).</p>

<p>Replicating the party representation itself and the party community circle is not enough for the client. For it to “understand” that it is currently in a party, the party’s id needs to be replicated separately using the <code class="language-plaintext highlighter-rouge">RepVar</code> system. This is a legacy replication system that was used more extensively in older versions of the game, like 1.10. Over time <code class="language-plaintext highlighter-rouge">RepVar</code> fields were gradually replaced with regular protobuf messages, but there are still some places where they remain, such as this one. The client uses the id replicated in this way mainly for interaction validation, such as not allowing the player to go through portals belonging to other parties or preventing the use of prestige consumables while in a party.</p>

<p>But wait, there is more. In order for the client to be able to display the health meters of party members in the same game instance, it needs to have the <code class="language-plaintext highlighter-rouge">Player</code> entities of party members replicated to it using the <code class="language-plaintext highlighter-rouge">Party</code> channel of the Area of Interest system, and there is an issue with that. The ownership relation between a <code class="language-plaintext highlighter-rouge">Player</code> entity and an <code class="language-plaintext highlighter-rouge">Avatar</code> entity is established via the latter’s <code class="language-plaintext highlighter-rouge">InvLoc</code>. In other words, the <code class="language-plaintext highlighter-rouge">Avatar</code> being played is stored in the <code class="language-plaintext highlighter-rouge">Player</code>’s <code class="language-plaintext highlighter-rouge">AvatarInPlay</code> inventory. Due to how the Area of Interest system is implemented, changing an entity’s <code class="language-plaintext highlighter-rouge">InvLoc</code> destroys and recreates the entity client-side. This causes problems when you invite an <code class="language-plaintext highlighter-rouge">Avatar</code> that is already present in your client’s Area of Interest to a party: partying up adds the <code class="language-plaintext highlighter-rouge">Player</code> entity of the invitee to your client’s Area of Interest, but the current <code class="language-plaintext highlighter-rouge">Avatar</code> entity is already replicated to your client without the ownership relation established, because the owning <code class="language-plaintext highlighter-rouge">Player</code> entity was not yet exposed to your client when it happened. To solve this edge case, Gazillion introduced an additional protobuf message called <code class="language-plaintext highlighter-rouge">NetMessageInventoryMove</code> that is used to move an already replicated entity to the newly replicated owner’s inventory client-side.</p>

<p>The end result of all of this is that replicated party data is scattered across many different representations in various game instances and clients hosted by them. All of it can very easily get out of sync and cause all sorts of weird issues that appear to be “random”. Debugging this was also annoying because everything had to be done with two or more instances of the game client running. Despite all the difficulties on the way there, the Party system is now functional and stable.</p>

<h2 id="080-plans">0.8.0 Plans</h2>

<p>With the Party system implemented and version 0.7.0 released, we are now in the final stretch of development. The remaining systems, like supergroups and PvP, are more like subsets of existing systems, such as Community and MetaGame respectively. This means that version 0.8.0, which we currently plan to release in December, is going to be the final major release before 1.0.0.</p>

<p>As you may know if you have read our FAQs, we plan to do a wipe in 1.0.0 by making existing saved data incompatible. For people who want to continue playing using their 0.x accounts on a self-hosted server, we will be releasing one final update, 0.8.1, which will include all the bug fixes and optimization changes that we are going to do between 0.8.0 and 1.0.0. We will share more details about this later.</p>

<p>Once 1.0.0 is out, we will be shifting our focus towards supporting older versions of the game. As we have mentioned previously, the highest priority for this is 1.48 from late 2016, which is the final pre-BUE version. Although it is not going to be “officially” supported until after 1.0.0, I have some news to share regarding early progress that has been made.</p>

<h2 id="pre-bue-progress">Pre-BUE Progress</h2>

<p>I was feeling burnt out after months of working on social features, so I decided to do something fun for a change. While I had a reasonably good plan for supporting pre-BUE versions of the game based on the <a href="/MHServerEmu/blog/2024/05/31/progress-report-may-2024.html">proof-of-concept server from 2024</a>, it was still mostly theoretical. I was relatively confident that it would not take long to get some version of the fully-featured server working with 1.48, so I decided to take a small break from 1.52 and give it a go.</p>

<p>There are two things you need to do to make the server compatible with a different version of the game:</p>

<ol>
  <li>
    <p>Update the network protocol. This means generating new <code class="language-plaintext highlighter-rouge">NetMessage</code> classes from <code class="language-plaintext highlighter-rouge">.proto</code> schemas extracted from the client and changing the code that references message fields that no longer exist. One example of this are messages that reference avatars by index: they were modified to support couch co-op on consoles, but the concept of avatar indices did not exist pre-BUE, so everything that references it needs to be removed.</p>
  </li>
  <li>
    <p>Update prototype structure definitions. This means adjusting all the <code class="language-plaintext highlighter-rouge">Prototype</code> classes to match the old data. For example, the difficulty slider feature did not exist pre-BUE, but there was still the concept of difficulty inherent to the region. To accomodate this, the <code class="language-plaintext highlighter-rouge">TuningPrototype</code> class needs to be renamed to <code class="language-plaintext highlighter-rouge">DifficultyPrototype</code>, and its fields need to be adjusted. This has a cascading effect on all gameplay code that references the changed prototype classes and their fields.</p>
  </li>
</ol>

<p>Most of the data structure changes can be automated with code generation, so what remains to be done manually is fixing hundreds of compile errors from code referencing non-existing fields. Because 1.52 and 1.48 are actually not that different under the hood, fixing all the compile errors took me just a single day. With that I was able to go back to December 2016:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-09/v48-screenshot-1.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-09/v48-screenshot-1.jpg" alt="1.48 Avengers Tower" /></a></p>

<p>All the old content and features were there, including the point-based power system:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-09/v48-screenshot-2.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-09/v48-screenshot-2.jpg" alt="1.48 Power Points" /></a></p>

<p>However, just getting it to work is the “easy” part. Playing the game reveals all kinds of subtle issues, including powers disappearing from the action bar, power points not being awarded on level up, some of the bosses not spawning, and many more. I have spent another day fixing some of the more glaring problems, but getting everything to a polished state would require implementing various missing features and investigating the remaining inconsistencies between the server and the older client version. The overall scope of the required work is similar to a single quarterly server release.</p>

<p>I have published a <a href="https://github.com/Crypto137/MHServerEmu/tree/v48">separate branch</a> containing the current work-in-progress 1.48 code. There are no nightly builds and no instructions for setting it up, but if you are feeling adventurous you can try getting it up and running. I will most likely continue doing a little bit of work on it as a side project, but it will not be the primary focus until 1.0.0 is out early next year.</p>

<hr />

<p>And with this another Progress Report comes to an end. See you next time!</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">MHServerEmu Progress Report: August 2025</title><link href="https://crypto137.github.io/MHServerEmu/blog/2025/08/30/progress-report-august-2025.html" rel="alternate" type="text/html" title="MHServerEmu Progress Report: August 2025" /><published>2025-08-30T12:40:00+03:00</published><updated>2025-08-30T12:40:00+03:00</updated><id>https://crypto137.github.io/MHServerEmu/blog/2025/08/30/progress-report-august-2025</id><content type="html" xml:base="https://crypto137.github.io/MHServerEmu/blog/2025/08/30/progress-report-august-2025.html"><![CDATA[<!--more-->

<p><img src="/MHServerEmu/assets/blog/progress-report/2025-08/header.jpg" alt="MHServerEmu Progress Report - August 2025" /></p>

<p>Welcome to another episode of MHServerEmu Progress Report.</p>

<h2 id="070-status">0.7.0 Status</h2>

<p>Unfortunately, the backend changes needed to implement additional social features took longer than expected. The new instancing system is working, and I have just merged friend and ignore lists at the time of writing this. However, I have not had the opportunity to work on parties yet. Because this is probably the most highly anticipated social feature, I believe it is better to delay the next release by a few weeks and try to get it in. The goal is still to release 0.7.0 in September, but closer to the tail end of the month.</p>

<p>Although the new instancing system needed more time to cook, its deployment has been very successful so far. One of the big changes with the new system is how load is distributed across worker threads, which I covered in detail in <a href="/MHServerEmu/blog/2025/07/28/progress-report-july-2025.html">the previous report</a>. Thanks to this working out as well as I hoped, some of the popular community servers are now able to handle higher numbers of concurrent players with much fewer issues. We now also follow mostly the same rules as the original Gazillion implementation in terms of how instances are managed. One exception to this is how we handle hub regions (referred to internally as <em>towns</em>): the original data specifies a 20 player limit for most hub regions, which we are ignoring. As a result, we now have a single mega-instance of each hub on the server that can fit everyone. Performance-wise this is fine because most powers are disabled in hubs, and there are no enemies. The mood has gotten a lot more lively now:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-08/lively-hub.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-08/lively-hub.jpg" alt="Lively Hub" /></a></p>

<h2 id="communities">Communities</h2>

<p>The most significant feature-enabling backend change is that we now have a way for game instances to communicate with each other through the Player Manager. The next step was to expand our implementation of <em>communities</em>.</p>

<p>A community is a collection of <em>circles</em> and <em>members</em>. A member represents a player that can be a part of one or more circles in a community. Each player entity has its own community instance. The data contained in your community is displayed in the Social panel, and each tab (Friends, Nearby, Ignored, Supergroup) represents a circle.</p>

<p>The biggest issue with communities is how overengineered the whole system is:</p>

<ul>
  <li>
    <p>In addition to “System” circles represented by tabs in the Social panel, there are also “User” circles that were supposed to be customizable. This aspect was never fully implemented, but the entire serialization system, including the mode that is used to replicate this data to the client, is designed with customizable circles in mind, so we have to do it in a similar convoluted way.</p>
  </li>
  <li>
    <p>The static data definitions for System circles are not integrated into the prototype system used by the rest of the game. Instead, all circle definitions are hardcoded, even though the system was apparently supposed to be fully customizable.</p>
  </li>
  <li>
    <p>Even though it is not displayed in the Social tab, there is an additional hidden circle that contains your party members.</p>
  </li>
  <li>
    <p>The Supergroup tab displays last online time for all players. This time is replicated to the client using the <a href="https://learn.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-filetime">Windows FILETIME format</a>, which is “the number of 100-nanosecond intervals since January 1, 1601 (UTC)”. This is the only place in the game that uses this time format, and it is immediately converted back to a regular <a href="https://en.wikipedia.org/wiki/Unix_time">Unix timestamp</a> as soon as it is received by the client.</p>
  </li>
</ul>

<p>This unnecessary additional complexity makes it difficult to determine what is the essential functionality that we actually need to implement.</p>

<p>Each community member has a <code class="language-plaintext highlighter-rouge">CommunityMemberBroadcast</code> structure associated with it:</p>

<div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">CommunityMemberAvatarSlot</span> <span class="p">{</span>
    <span class="k">optional</span> <span class="kt">uint64</span>    <span class="na">avatarRefId</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">uint64</span>    <span class="na">costumeRefId</span>    <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">uint32</span>    <span class="na">level</span>    <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">uint32</span>    <span class="na">prestigeLevel</span>    <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">string</span>    <span class="na">onlineId</span>    <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">CommunityMemberBroadcast</span> <span class="p">{</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">memberPlayerDbId</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">uint64</span>    <span class="na">currentRegionRefId</span>    <span class="o">=</span> <span class="mi">2</span> <span class="p">[</span><span class="k">default</span> <span class="o">=</span> <span class="mi">123</span><span class="p">];</span>
    <span class="k">optional</span> <span class="kt">uint64</span>    <span class="na">currentDifficultyRefId</span>    <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">repeated</span> <span class="n">CommunityMemberAvatarSlot</span>    <span class="na">slots</span>    <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">string</span>    <span class="na">currentPlayerName</span>    <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="k">repeated</span> <span class="kt">uint64</span>    <span class="na">memberPlayerDbIdIgnoreList</span>    <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">int32</span>    <span class="na">isOnline</span>    <span class="o">=</span> <span class="mi">7</span> <span class="p">[</span><span class="k">default</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">];</span>
    <span class="k">optional</span> <span class="kt">int64</span>    <span class="na">lastLogoutTimeAsFileTimeUtc</span>    <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">uint64</span>    <span class="na">currentCostumeRefId</span>    <span class="o">=</span> <span class="mi">9</span> <span class="p">[</span><span class="k">default</span> <span class="o">=</span> <span class="mi">123</span><span class="p">];</span>
    <span class="k">optional</span> <span class="kt">uint64</span>    <span class="na">consoleAccountId</span>    <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">uint64</span>    <span class="na">secondaryConsoleAccountId</span>    <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">string</span>    <span class="na">secondaryPlayerName</span>    <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>A new <code class="language-plaintext highlighter-rouge">CommunityMemberBroadcast</code> instance is generated when a status of a player in-game changes (e.g. you enter a region or switch to a different avatar). This instance is first served to other players in the same game instance (e.g. to update the Nearby tab), and then it is sent to the Player Manager. Afterwards, it is routed to other game instances to update communities of other players that may be interested in it.</p>

<p>When the Social panel is open, the client polls the server for status updates every 10 seconds. Because of this, the Player Manager needs to not only route broadcast data, but also cache it for potential repeated queries, including those involving players that are currently offline.</p>

<p>We now have 3 out of 5 System circles functional now: Friends, Nearby, and Ignored. Parties are next on the list, and for Supergroups we are going to need even more backend changes to support features like, for example, managing member ranks while they are offline.</p>

<p>I wanted communities to be useful for something other than stalking your friends, so I did some work on the Grouping Manager and implemented tells (private chat messages). Now you can plan world domination or play out your Marvel fantasies without letting the whole server know about it.</p>

<hr />

<p>This is it for today. Stay tuned!</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">MHServerEmu Progress Report: July 2025</title><link href="https://crypto137.github.io/MHServerEmu/blog/2025/07/28/progress-report-july-2025.html" rel="alternate" type="text/html" title="MHServerEmu Progress Report: July 2025" /><published>2025-07-28T19:20:00+03:00</published><updated>2025-07-28T19:20:00+03:00</updated><id>https://crypto137.github.io/MHServerEmu/blog/2025/07/28/progress-report-july-2025</id><content type="html" xml:base="https://crypto137.github.io/MHServerEmu/blog/2025/07/28/progress-report-july-2025.html"><![CDATA[<!--more-->

<p><img src="/MHServerEmu/assets/blog/progress-report/2025-07/header.jpg" alt="MHServerEmu Progress Report - July 2025" /></p>

<p>We are now officially in the third year of development.</p>

<h2 id="player-manager">Player Manager</h2>

<p>This month I fully focused on improving the server’s backend to make it possible to implement some of the long awaited social features, like parties.</p>

<p>As a reminder, in Gazillion’s architecture game servers are never directly exposed to the client. Instead, the client connects to a Frontend server, through which it establishes a connection to the Player Manager server. As far as the client is concerned, it communicates with the Player Manager. On the backend side one or more game servers are connected to the Player Manager, and the latter routes client messages to them. Overall it looks like this:</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2025-07/game-server-connection.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-07/game-server-connection.png" alt="Game Server Connection" /></a>
</center>

<p>Because there is only a single “real” network connection, this entire architecture can be implemented as a single monolithic server. This is what we did for MHServerEmu, which is a single process, where the roles of individual servers are handled by what we call “services”. While not ideal in terms of horizontal scaling, this decision allowed us to make the server much easier to set up and run.</p>

<p>So far most of our efforts went into restoring the gameplay logic used by game instances, while our implementation of the Player Manager was mostly just scaffolding designed to get a single player into a game instance. There were some band-aid fixes to prevent the emulator from blowing up under load, like the current load balancing system used by public servers, where essentially multiple independent copies of the entire game are created to distribute the load. However, all of this needed to be rebuilt.</p>

<p>We have a pretty decent understanding of what the Player Manager’s responsibilities are supposed to be because one of the protocols for server-to-server communication was accidentally included in test center client builds for version 1.53. Here are the major ones:</p>

<ul>
  <li>
    <p>Log clients in and out as they connect and disconnect.</p>
  </li>
  <li>
    <p>Manage game and region instances across all game servers.</p>
  </li>
  <li>
    <p>Orchestrate player transfers between game and region instances.</p>
  </li>
  <li>
    <p>Route client messages to appropriate game servers.</p>
  </li>
  <li>
    <p>Facilitate additional social features: social circles (e.g. friend lists), parties, and matchmaking.</p>
  </li>
</ul>

<p>Effectively, the Player Manager is the traffic controller for the entire game. This is overall similar to the functionality provided by online services like Battle.net in games like Diablo II.</p>

<p>The first order of business was overhauling how client management worked. Previously we would do this straight from network IO threads that invoked connect/disconnect events, but this caused all kinds of race conditions to happen all the time. I did quick fixes as issues arised, and eventually they all turned into a Rube Goldberg machine of locks, retries, and timeouts that was very hard to maintain, and it would still occasionally have minor problems. I replaced all of this with a producer-consumer style implementation, where various IO threads “produce” events, which are all “consumed” by a single worker thread. This not only eliminated the vast majority of race conditions, but also naturally lead to implementing a login queue system, which is crucial for making sure MHServerEmu can survive under loads heavier than what the server hardware can handle.</p>

<p>Our prior implementation of the Player Manager also did the work of creating and running game instances, which made things messy when services needed to communicate with game instances without going through the Player Manager, like the Leaderboard service. In addition, this made it harder to hypothetically separate game instances into a separate server process if the need ever arises. I have moved this functionality into a dedicated service, and the Player Manager now interacts with game instances using handles. While this somewhat increased the overall complexity of the system, it also made it a more accurate representation of the original server architecture.</p>

<p>With this the Player Manager now has a much more solid foundation for implementing new features, but some more work was required from the game server side of things.</p>

<h2 id="game-threading">Game Threading</h2>

<p>Although Marvel Heroes was marketed as an MMO, its world structure is really an extension of the system that was used in Diablo II. The world consists of a number of game instances, and within each game instance there is one or more regions. What creates the illusion of a unified world is how you transfer between these instances: rather than picking a game from a list in a Battle.net interface panel, you automatically exit one game and enter another when you click on a transition entity in the game world. Some regions are designated as public, which means public game instances are created to host them, while others are considered private, and they are hosted by a private game instance the belongs to a specific player. There are also match regions that can behave as public or private depending on what the player who creates them chooses. The overall structure is supposed to look like this:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-07/world-structure.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-07/world-structure.png" alt="World Structure" /></a></p>

<p>Our initial quick and dirty solution was to have a single game instance to host all regions with a dedicated thread to process it, which is more like how single player games are usually made. Eventually I added the functionality to increase the number of instances to allow public servers to handle more load, but the overall system remained the same, and the number of threads matched the number of game instances. In order to implement parties we need to replicate the original system, because what joining a party actually does is provide other players access to the leader’s private game instance. However, doing it means drastically increasing the number of game instances from just a few to potentially hundreds. Having dedicated threads for every single game instance would cause all sorts of performance issues, so we needed another solution for threading.</p>

<p>We now have a dedicated pool of worker game threads that can process an arbitrary number of game instances. This uses the same basic idea as the producer-consumer pattern, but game threads act as both producers and consumers. Work is scheduled via a time-based priority queue: when a game instance finishes its tick, it calculates the time when the next update should happen, and this time is used as the priority for the priority queue. This queue is shared by all worker threads, so any of them can potentially do the work. Threads go to sleep when there is no work.</p>

<p>This new implementation not only decouples the number of game instances from the number of threads, but also allows us to potentially have more granularity in how regions are processed. Some regions, like Cosmic Midtown Patrol when it is full of players, can take significantly more time to process than something like a terminal region with a single player in it. When multiple “heavy” regions are in the same game instance, processing all of them may take longer than the target frame time of 50 ms. Not hitting this target manifests as lag, and “light” regions end up having to wait for the thread to process all the madness happening in “heavy” regions first. This is one of the main causes of lag that you can occasionally see on public servers during prime time. Once regions are distributed across game instances as planned, “heavy” regions may still lag if things get too crazy, but they will no longer bring other regions down with them, as long as there are not too many of them.</p>

<h2 id="region-transfers">Region Transfers</h2>

<p>The new threading system enabled us to potentially have many more game instances, but there is still the issue of how you actually move a player from <code class="language-plaintext highlighter-rouge">RegionA</code> in <code class="language-plaintext highlighter-rouge">Instance1</code> to <code class="language-plaintext highlighter-rouge">RegionB</code> in <code class="language-plaintext highlighter-rouge">Instance2</code>. There are many things that can potentially cause a player to move from one region to another:</p>

<ul>
  <li>
    <p>Clicking on a transition.</p>
  </li>
  <li>
    <p>Selecting a region in the waypoint menu.</p>
  </li>
  <li>
    <p>Using the bodyslider.</p>
  </li>
  <li>
    <p>Triggering a mission action or a MetaGame state.</p>
  </li>
  <li>
    <p>Resurrecting after dying.</p>
  </li>
  <li>
    <p>Teleporting to a party member.</p>
  </li>
  <li>
    <p>Activating Prestige.</p>
  </li>
</ul>

<p>In order for the Player Manager to be able to orchestrate this, it needs a common API for initiating all of these transfers from gameplay code. Unfortunately, we accumulated some technical debt on this front as well, and it needed to be cleaned up before we could proceed.</p>

<p>One of the more egregious troublemakers with this has been the direct transition system. This refers to portals that are bound to specific region instances. Originally they were implemented for “bonus levels”, like the totally non-existent Classified Bovine Sector, but later on direct transitions were also used for the Danger Room mode. Danger Room in particular has been a major source of headache, because each “floor” in this mode is its own separate region. There is also an intricate data plumbing system that transfers properties from the item that opens the portal to the portal itself, and then through all subregions.</p>

<p>While working on this, I have also discovered that one of the assumptions I had about the region transfer process was actually a misconception. I previously believed that we had to do the full game exit procedure on every region transfer, which involves destroying and recreating all entities owned by the transferring player, including all avatars and items. The main reason for this was that reusing the same player entity caused all sorts of issues with the client, including completely breaking the inventory grid. However, as it turns out we <em>can</em> reuse the same player entity, as long as we just remove the avatar entity from the game world and never let the player entity actually exit the game. There is subtle difference between the two, but it results in us not triggering any of the critical issues client-side and saving some resources server-side.</p>

<p>These backend improvements require significant changes to the fundamental systems that have not been really touched in quite some time, so weird issues can pop up, and everything needs to be thoroughly tested before proceeding with the next step. One example of such weird issue was a bug where resurrecting in the Fisk Tower terminal would teleport the player to the pre-update story version of the Fisk Tower region.</p>

<p>At the time of writing this, the stage is almost set to make the final seismic shift by implementing seamless transitions between game instances. Once this is done and tested, I will be able to work on social circles and parties.</p>

<hr />

<p>This is all I have for you today. See you next time!</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">MHServerEmu Progress Report: June 2025</title><link href="https://crypto137.github.io/MHServerEmu/blog/2025/06/29/progress-report-june-2025.html" rel="alternate" type="text/html" title="MHServerEmu Progress Report: June 2025" /><published>2025-06-29T11:00:00+03:00</published><updated>2025-06-29T11:00:00+03:00</updated><id>https://crypto137.github.io/MHServerEmu/blog/2025/06/29/progress-report-june-2025</id><content type="html" xml:base="https://crypto137.github.io/MHServerEmu/blog/2025/06/29/progress-report-june-2025.html"><![CDATA[<!--more-->

<p><img src="/MHServerEmu/assets/blog/progress-report/2025-06/header.jpg" alt="MHServerEmu Progress Report - June 2025" /></p>

<p>Apparently this is the 20th Progress Report. Crazy stuff.</p>

<h2 id="mhserveremu2013">MHServerEmu2013</h2>

<p>Continuing Gazillion’s tradition of having anniversary celebrations in June, this month we have not only released 0.6.0, but also published the current work-in-progress source code for <a href="https://github.com/Crypto137/MHServerEmu2013">MHServerEmu2013</a> - a version of the server emulator that supports game version 1.10 from 2013. This is the “vanilla” version of the game, which means:</p>

<ul>
  <li>
    <p>Original selection of 22 playable heroes before any of their level 52 reviews and other reworks.</p>
  </li>
  <li>
    <p>Original versions of all the story regions, including The Raft having a funicular ride section.</p>
  </li>
  <li>
    <p>Original endgame content consisting of green and red Terminals, Group Challenges, and the Limbo Survival Challenge.</p>
  </li>
  <li>
    <p>PvP 1.0, which is actually somewhat fun.</p>
  </li>
  <li>
    <p>Hero unlocks via random drops instead of Eternity Splinters.</p>
  </li>
</ul>

<p>This is still very early work, so most of the gameplay aspects are not really functional yet, but I have made significant progress in backporting various fundamental features. You can load into the game, explore the world, and try out some of the old powers on target dummies in the Training Room, all with basic multiplayer support. Overall I would say the current state of MHServerEmu2013 is mostly equivalent to version 0.2.0 of the main server project.</p>

<p>I should note that 1.48, which is the final pre-BUE version of the game, is still the priority as soon as we reach the 1.0 milestone next year. MHServerEmu2013 is a side project I have been working on from time to time, and there are no timeframes on when it is going to be fully playable.</p>

<h3 id="how-its-done">How It’s Done</h3>

<p>Supporting game version 1.10 presents a unique set of challenges:</p>

<ul>
  <li>
    <p>The game’s code is significantly older than 1.48/1.52/1.53, so it predates various large scale refactoring efforts that occured over the game’s lifespan.</p>
  </li>
  <li>
    <p>1.10 does not have Mac support, so we do not have access to debug symbols for this version. The earliest Mac build that has been archived is for game version 1.25, which is over a year newer.</p>
  </li>
  <li>
    <p>We do not have any packet captures for 1.10, so in some cases more trial-and-error is required to figure out the correct way to respond to the client.</p>
  </li>
</ul>

<p>There is a bit of a silver lining to 1.10 though: we have an <em>Internal</em> build of the client, 1.10.0.69, dated late May 2013. I have talked about differences between Internal and Shipping build configurations in previous reports, but to give a quick refresher, this is effectively the final beta build with various debug features enabled. This includes access to the debug HUD, game state visualization functionality, and more.</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-06/internal-build-screenshot.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-06/internal-build-screenshot.jpg" alt="Marvel Heroes 1.10.0.69" /></a></p>

<p>By default MHServerEmu2013 supports build 1.10.0.643, which is the final Shipping build of 1.10 from July 2013. By specifying the <code class="language-plaintext highlighter-rouge">BUILD_1_10_0_69</code> conditional compilation symbol the server can also be built for the aforementioned Internal build.</p>

<p>So where do you start with supporting a different version of the game? The very first thing you need to do is extract network protocol information from the client and use it to generate message serialization code for the server. I have covered this process in the <a href="/MHServerEmu/blog/2024/04/30/progress-report-april-2024.html">April 2024 report</a>, but 1.10 specifically has a catch about this. Back then the game used a latency buffer for some of the server to client messages, which should in theory improve client-server synchronization at the cost of extra latency. In practice this means that some network messages need to be timestamped, which is implemented via a protobuf <em>extension field</em>. The existing tools we use to extract protocol information do not support protobuf extension fields, so some additional work was required to handle this.</p>

<p>Now that we can communicate with the client, we can load into the game. However, there is a problem: the client blocks movement input when your hero is dead, and anything with 0 health is automatically considered dead. This means you cannot move around without setting your hero’s health to something higher than 0. To set the value of the <code class="language-plaintext highlighter-rouge">Health</code> property you need to know its index, which differs from version to version. Thankfully, this aspect works in 1.10 basically the same as later versions: the client executable contains a statically allocated lookup table of all properties, which can be extracted relatively easily.</p>

<p>These two things are enough to just load into the game and run around a region that does not use procedural generation, such as Avengers Tower. This is exactly how I did <a href="https://github.com/Crypto137/MHServerEmuMini">MHServerEmuMini</a> about a year ago.</p>

<p>As you probably know if you have been following these reports, <em>prototypes</em> are data structures used to define basically everything in the game, and no further progress could be made without them. There are only minor differences between 1.10 and 1.52 in how the prototype system works: the game still uses the GRTTI system to map Calligraphy blueprints to C++ classes, but not having debug symbols from the Mac version made extracting the data structures for C++ classes from the client more difficult. Another issue was related to how the prototype files are stored in 1.10: it uses a regular SQLite database with blobs for each file instead of a proprietary archive format, so IO changes were required to load everything into our server.</p>

<p>I want MHServerEmu2013 to share as much code with the main server as possible, so rather than modifying how the server loads prototypes, I approached this from the opposite direction. I made a tool called <a href="https://github.com/Crypto137/MHSqlitePakRepacker">MHSqlitePakRepacker</a>, which can be used to convert legacy SQLite-based <code class="language-plaintext highlighter-rouge">.sip</code> archives to the proprietary format used by later versions of the game. It made the 1.10 prototype data compatible with not just the server, but also our other tools, like <a href="https://github.com/Crypto137/MHDataParser">MHDataParser</a> and <a href="https://github.com/Crypto137/OpenCalligraphy">OpenCalligraphy</a>. This lead to me solving the issue of getting prototype data structures: rather than trying to extract static GRTTI data, I instead implemented C# code generation using Calligraphy blueprints. The generated code needs some manual cleanup for long-term server usage, such as adding enums, reordering fields, and adjusting data types, but it is good enough to deserialize the entire game database even without any of this. Being able to generate code like this also made comparing prototype structures from different versions of the game much easier.</p>

<p>This was the breakthrough I needed to start really digging into 1.10 and figuring how much the game logic differs from 1.52. Is some ways it turned out to be not as much as I expected. For instance, I was able to backport region generation code in just a day, and I was not very familiar with this code. The only relatively major difference was the fact that 1.10 has no support for road generation, which was added for Chapter 9 regions, so some of the code needed to be removed.</p>

<p>From what I can tell, the biggest fundamental difference is in how the game handles AI. In addition to the <code class="language-plaintext highlighter-rouge">ProceduralAI</code> system used in later versions of the game, 1.10 also has an alternative <code class="language-plaintext highlighter-rouge">Brain</code> subtype called <code class="language-plaintext highlighter-rouge">BehaviorTree</code>. Both subtypes store their state in a <code class="language-plaintext highlighter-rouge">BehaviorBlackboard</code> and execute actions by entering various <code class="language-plaintext highlighter-rouge">StaticAI</code> states, and the difference lies in how the logic is defined: <code class="language-plaintext highlighter-rouge">BehaviorTree</code> is a fully data-driven system, while <code class="language-plaintext highlighter-rouge">ProceduralAI</code> uses data only as parameters for compiled C++ code. <code class="language-plaintext highlighter-rouge">BehaviorTree</code> is likely the older system, which provided more flexibility to game designers via Gazillion’s internal tools, but its performance was probably not good enough. I suspect for this reason the developers implemented the more optimized <code class="language-plaintext highlighter-rouge">ProceduralAI</code> subtype and gradually replaced designer-defined trees with more performant code written by programmers. It appears they were in the middle of this process when the game was released, so while a lot of entities use the newer system, some of them, mainly bosses, still rely on the legacy system. The good news is that <code class="language-plaintext highlighter-rouge">BehaviorTree</code> was fully phased out only by version 1.35 in June 2015, so we have a whole bunch of Mac builds that still support this system.</p>

<p>Version 1.10 also makes much heavier use of the <code class="language-plaintext highlighter-rouge">RepVar</code> system, which assigns ids to individual fields of replicated data structures. For instance, the data required to display map icons for faraway entities (<code class="language-plaintext highlighter-rouge">MapPosition</code>, <code class="language-plaintext highlighter-rouge">MapOrientation</code>, <code class="language-plaintext highlighter-rouge">MapRegionId</code>, <code class="language-plaintext highlighter-rouge">MapAreaId</code>, and <code class="language-plaintext highlighter-rouge">MapCellId</code>) is replicated using properties in 1.52, but 1.10 uses five <code class="language-plaintext highlighter-rouge">RepVar</code> fields in the <code class="language-plaintext highlighter-rouge">WorldEntity</code> class, each with its own replication id. Just like with AI, it appears Gazillion was in the middle of transitioning away from using the <code class="language-plaintext highlighter-rouge">RepVar</code> system when 1.10 was released, which contributed to some confusion when I was investigating this. To move around in the game world entities need to have a <code class="language-plaintext highlighter-rouge">Locomotor</code> component; if an entity does not have one, it cannot move. Movement is replicated to clients by sending the <code class="language-plaintext highlighter-rouge">LocomotionState</code> of the <code class="language-plaintext highlighter-rouge">Locomotor</code> instance, and it looks like at some point prior to 1.10 this was also replicated using <code class="language-plaintext highlighter-rouge">RepVar</code> fields instead of dedicated messages. This change must have happened not long before 1.10, because the <code class="language-plaintext highlighter-rouge">Locomotor</code> class still has a replication id field even though it no longer uses the <code class="language-plaintext highlighter-rouge">RepVar</code> system. And because whether an entity has a <code class="language-plaintext highlighter-rouge">Locomotor</code> component is defined by its prototype, we have a situation where only <em>some</em> entities require an extra useless id written in the middle of their data. Figuring all of this out would have been a lot easier if we had a packet capture for 1.10, but unfortunately the only thing we have to rely on is digging into the client code and cross-referencing it with newer versions of the game, which is a lot more time consuming.</p>

<p>In conclusion, every major feature needs to be untangled, reevaluated, and cleaned up, but I can see a path to how the entirety of 1.10 can be restored. I will continue working on this as a side project, but, as I already mentioned, the priority still lies with the main 1.52/1.48 server for now.</p>

<h2 id="crafting">Crafting</h2>

<p>Returning to the present, this month I tried to get the gameplay side of the server as close to a feature complete state as possible before I return to my backend work. The largest remaining feature was crafting, which is where most of my efforts went into this month.</p>

<p>“Crafting” is less of its own system, and more of an umbrella term that covers various aspects of the item system that needed to be finished. The first thing on this list was implementing stack splitting, which also included additional validation to prevent potential duping.</p>

<p>Next, I needed to implement some missing functionality of the item rolling system. To apply changes to existing items, referred to as <em>mutations</em>, what you actually need to do is use your existing item to fill out a template, and then use this template to roll a <em>new</em> item. This template is represented by an instance of the <code class="language-plaintext highlighter-rouge">LootCloneRecord</code> class, and mutations are applied to it via various subtypes of the <code class="language-plaintext highlighter-rouge">LootMutationPrototype</code> class. In total there are 21 mutation types, which cover adding/removing affixes, rerolling values by changing the seed, and adjusting other parameters, like level and rarity.</p>

<p>The crafter NPCs you interact with are implemented as special vendor types. Each recipe available to craft is an item in a vendor inventory, and when you learn a new recipe from a consumable item, this item is transferred to the vendor inventory corresponding to the recipe. Although these are “vendor” inventories, they all actually belong to your player entity, which is what allows you to have the same selection of recipes available when you interact with any crafter NPC of a specific type.</p>

<p>Each recipe consists of two main parts: <code class="language-plaintext highlighter-rouge">RecipeInputs</code> and <code class="language-plaintext highlighter-rouge">RecipeOutputs</code>. <code class="language-plaintext highlighter-rouge">RecipeInputs</code> specifies a set of ingredients that is required to craft a recipe. There are three categories of ingredients:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">RestrictionSetInput</code> - any item manually provided by the player that matches the specified filters (e.g. any item of Unique rarity).</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">AllowedItemListInput</code> - any item manually provided by the player from a list of specific items.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">AutoPopulatedInput</code> - a specific item that is automatically retrieved from player inventories.</p>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">RecipeOutputs</code> is just a loot table that is used to roll the resulting items. Ingredients provided as inputs are exposed to this loot table, allowing it to fill out <code class="language-plaintext highlighter-rouge">LootCloneRecord</code> instances mentioned above if necessary. If the output table rolls successfully, the new items are added to the <code class="language-plaintext highlighter-rouge">PlayerCraftingResults</code> inventory, and the provided ingredients are destroyed. Recipes can also have currency costs, which are paid when ingredients are destroyed. Creating new items and destroying provided ingredients at the same time creates the illusion that the provided items are modified, but the items you get are actually “clones” of your ingredients with mutations applied to them.</p>

<p>Most of my time went into implementing and testing various mutation types. One silly bug I discovered while doing this involved runewords. Runeword tooltips are supposed to include icons of runes used in the recipe, but for some mysterious reason sometimes you would get items with no icons:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-06/runeword-icon-bug.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-06/runeword-icon-bug.jpg" alt="Runeword Icon Bug" /></a></p>

<p>After some investigation I figured it out. Because crafting generates new items by rolling, runeword affixes are applied by creating a pool of affixes limited just to the ones required for the recipe, and then applying the entire pool. This is the same basic process that is used to roll prefixes and suffixes on random items, so the order of runeword affixes is also random. Only one affix in a runeword references the set of icons that needs to be displayed in the tooltip, and in version 1.52 there is a client bug where it stops looking for rune icon sets if the first affix does not have one. Because of this, icons would be shown only when the icon affix would randomly roll first. As a workaround, I added code that ensures that rune icon affixes are always inserted into the affix list as the first element.</p>

<p>And this is all there really is to the crafting system. With it implemented, I now consider the game to be in a feature-complete state a single player experience, and I feel comfortable shifting my focus towards more social aspects.</p>

<h2 id="the-little-things">The Little Things</h2>

<p>While I have been doing a lot of testing as I was working on various features (I must have completed the Times Square tutorial over 50 times at this point), I have not taken too much time to actually play the game as a normal player. Now that I feel the game is in a solid state as a single player experience, I decided to take a small break from working on major features and just play the game for a bit. I started a new account on a local server with no cheats, no auto-unlocks, and all rates set to x1.</p>

<p>As I was doing this, I took note of minor things that would be easy to fix. One example of this is the store catalog: early in the development process I ran a script to add all costumes available in the client to the catalog. While it was fun to mess around with at the time, I felt it was too messy now, so I went back and cleaned it up. I have removed all the costumes that are not supposed to be in the store, like default costumes, fortune card costume, and non-functional dev costumes, and restored the original prices for everything else using the Marvel Heroes Compendium by Mjoll as reference. I have also added character and stash unlocks for “removed” heroes (Fantastic Four and Silver Surfer), so it is now possible to get them without using chat commands.</p>

<p>One thing that was bothering me quite a lot was the artifact drop rate situation. There were reports from players about it not feeling right pretty much from the moment the loot system was first implemented, but I could not find any problem with the code. I thought maybe, although unlikely, the missing loot system features related to crafting have some kind of indirect effect on drop rates. Well, all the features were now implemented, I played through the whole campaign, and got a grand total of 0 (zero) artifact drops, not counting guaranteed mission rewards. Something was absolutely wrong with it, so I took another look at it.</p>

<p>There are many loot tables that can roll artifacts, but most of them are used for targeted drops in specific content, like boss artifacts in terminals. The table that is used to roll the actually random artifact drops, which includes the vast majority of lower level artifacts, is called <code class="language-plaintext highlighter-rouge">SpecialsArtifactsRespec</code> (originally it was also used to roll Retcon Devices, therefore the name). We now have much better tools to explore the changes made over the game’s history, and I decided to see if this is an issue with version 1.52 specifically. I compared it to 1.48, and my hunch was correct:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-06/the-great-artifact-scam-of-2017.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-06/the-great-artifact-scam-of-2017.png" alt="The Great Artifact Scam of 2017" /></a></p>

<p>Gazillion <em>reduced the random artifact drop rate by 99.9%</em> at some point between December 20, 2016 and September 7, 2017. But surely this must be a bug or something, right? I checked all the individual builds, and found the exact one where this change was introduced: 1.50.0.402, released on February 10, 2017, a few weeks after the infamous Biggest Update Ever. The patch notes for this version are <a href="http://web.archive.org/web/20170222211727/https://forums.marvelheroes.com/discussion/312743/marvel-heroes-2016-2-03-patch-notes">archived</a>, so we can still take a look at them:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-06/ssb-patch-notes.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-06/ssb-patch-notes.png" alt="SSB Patch Notes" /></a></p>

<p>Time to put my tinfoil hat on, because it appears I might have uncovered a bona fide conspiracy: it appears Gazillion secretly nerfed artifact drop rate to make S.H.I.E.L.D. Supply Boosts the primary source of random artifact drops and push people to buy them. This change was most likely aimed at new players they were expecting with the launch of the console version, and it went largely unnoticed by veteran PC players, who were occupied with grinding targeted boss drops, which are not affected by this. However, now that everyone has to start from scratch, this change has a very clear effect on player experience. Furthermore, these random artifact drops are affected by special item find (SIF), so this change also essentially nerfs all older SIF boosts.</p>

<p>Nightly builds of the server now include a data patch that reverts this change, restoring “natural” artifact drops. I have also looked through other data changes made in build 1.50.0.402, but I have not found anything else that could be considered a stealth nerf.</p>

<p>I will most likely continue playing and investigating smaller issues like this, but starting next month I plan to put most of my efforts into the backend again to get as many of the highly anticipated social features as possible ready in time for 0.7.0’s release in September.</p>

<hr />

<p>This is it for today. See you all in July.</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">MHServerEmu Progress Report: May 2025</title><link href="https://crypto137.github.io/MHServerEmu/blog/2025/05/28/progress-report-may-2025.html" rel="alternate" type="text/html" title="MHServerEmu Progress Report: May 2025" /><published>2025-05-28T23:40:00+03:00</published><updated>2025-05-28T23:40:00+03:00</updated><id>https://crypto137.github.io/MHServerEmu/blog/2025/05/28/progress-report-may-2025</id><content type="html" xml:base="https://crypto137.github.io/MHServerEmu/blog/2025/05/28/progress-report-may-2025.html"><![CDATA[<!--more-->

<p><img src="/MHServerEmu/assets/blog/progress-report/2025-05/header.jpg" alt="MHServerEmu Progress Report - May 2025" /></p>

<p>May this Progress Report be with you.</p>

<h2 id="leaderboards">Leaderboards</h2>

<p>After many trials and tribulations, the leaderboard system is finally in a production-ready state, and it is now available in nightly builds and on public community servers:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-05/nice.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-05/nice.jpg" alt="Leaderboards" /></a></p>

<p>While it may seem like a relatively simple system on its surface, it is actually somewhat more involved than it looks:</p>

<ul>
  <li>
    <p>This is our first properly implemented cross-game social system that requires extensive bidirectional communication between game instances and a separate service, so our service system needed some major upgrades to handle it.</p>
  </li>
  <li>
    <p>There is a relatively large amount of data that needs to be handled, because we need to store data not just for active leaderboards, but also archived leaderboard instances that ran in the past. This meant the Leaderboard Service needed to be backed by a database.</p>
  </li>
  <li>
    <p>Leaderboards operate on relatively long time cycles (from 4 hours to a week in most circumstances), which made real world testing time consuming.</p>
  </li>
</ul>

<p>The overall structure looks like this:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-05/leaderboard-service.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-05/leaderboard-service.png" alt="Leaderboard Service" /></a></p>

<ul>
  <li>
    <p>The Leaderboard Service manages leaderboard instances and notifies game instances of any leaderboard state changes.</p>
  </li>
  <li>
    <p>Game instances use a tracking system similar to the one utilized by the achievement system to track player scores for active leaderboards.</p>
  </li>
  <li>
    <p>Player scores are batched and periodically sent from game instances to the Leaderboard Service, where they are accumulated, sorted, and cached.</p>
  </li>
  <li>
    <p>When a client requests leaderboard score data from a game instance, this request is relayed to the Leaderboard Service, which retrieves score data from its cache and generates a <code class="language-plaintext highlighter-rouge">LeaderboardReport</code>. This report is then relayed back to the client through the game instance.</p>
  </li>
  <li>
    <p>When leaderboard instances expire, the Leaderboard Service distributes participation rewards to players. These rewards are recorded in the database, so even if a participant is not online when a leaderboard expires, they will receive their reward when they log in at any point in the future.</p>
  </li>
</ul>

<p>In contrast to achievements, which can be added and removed with just server-side adjustments, leaderboards are fully defined by prototypes. Prototypes are mirrored to the client at build time, so this unfortunately means it is not possible to add new leaderboards without modifying the client. In total there are 27 usable leaderboard prototypes in version 1.52. Some leaderboard functionality, like guild leaderboards, is not usable, because there are no valid leaderboard prototypes utilizing it.</p>

<p>While leaderboards took longer to implement than expected, some of the backend improvements that had to be done will be very usable in the near feature when we work on bringing back other social features.</p>

<h2 id="060-status">0.6.0 Status</h2>

<p>Getting leaderboards out the door in 0.6.0 was a major goal for me. Although I was able to make it, some sacrifices had to be made, and the previously planned Player Manager overhaul has been pushed back to 0.7.0.</p>

<p>On the bright side, 0.6.0 is now almost ready for release, which we aim to do early next week, just in time for the game’s 12th anniversary. I have also prepared a bit of a surprise, which will hopefully be somewhat amusing for people who followed Marvel Heroes since its release. Stay tuned for news!</p>

<p>As soon as 0.6.0 is out, I plan to work on an updated roadmap that will go all the way to the long awaited version 1.0.0 and the final wipe. It is somewhat hard to believe, but we are actually not that far from the finishing line!</p>

<p>As for 0.7.0, the first order of business is to bring the gameplay side of things to a feature-complete state by implementing crafting, which is an umbrella term that also includes features like runewords and Pet Tech. After crafting is fully up and running, which I currently expect to happen in June, I will return to working on the various backend and social features.</p>

<h2 id="opencalligraphy">OpenCalligraphy</h2>

<p>I was looking into some power-related bug reports earlier in the month, and it became apparent that our tools were long overdue for an upgrade. Historically we worked on tools in a spur of the moment manner, doing just the bare minimum to solve issues as they arised. Because of this, tech debt and inefficiencies started to accumulate, resulting in our tools becoming significantly less versatile and performant than they could have been. This project is also almost in its polishing stage now, meaning that we rely on our tools more and more as we try to distinguish problems with our code from Gazillion Issues™.</p>

<p>For <em>Game Database Browser</em> in particular, which has been our primary tool for identifying data-related bugs, there were two major problems: it worked only with game version 1.52.0.1700 and it was <em>slow</em>. The only alternative was to use a tool called <em>MHDataParser</em> to convert binary data files to the slightly more readable JSON format. MHDataParser is version-agnostic, but its output is nowhere near as convenient to work with as Game Database Browser, especially when it came to examining relationships between prototypes, which is a major aspect of how the game is “scripted”.</p>

<p>I started by making a prototype that was effectively a Windows Forms based GUI for MHDataParser. Here is what it looked like:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-05/opencalligraphy-prototype.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-05/opencalligraphy-prototype.png" alt="OpenCalligraphy Prototype" /></a></p>

<p>This prototype quickly evolved into its own tool called <em>OpenCalligraphy</em>, named after the Calligraphy data framework used by the game. At the time of writing it looks like this:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-05/opencalligraphy-final.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-05/opencalligraphy-final.png" alt="OpenCalligraphy Version 0.2.0" /></a></p>

<p>I was able to port most of the functionality from Game Database Browser without sacrificing any flexibility or performance. We now have a tool that we can use to efficiently examine data from any version of the game all the way back to 1.9 (May 2013), which is the earliest version of the game that has been preserved.</p>

<p>There is also some new functionality, like being able to inspect <code class="language-plaintext highlighter-rouge">.curve</code> files:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-05/curve-inspector.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-05/curve-inspector.png" alt="OpenCalligraphy Curve Inspector" /></a></p>

<p>One use case for OpenCalligraphy is figuring out how events were implemented. In many cases events were enabled and disabled by patching the data files, and it is not always obvious how everything is supposed to fit together when you are looking at pieces of a disabled event. To aid with this, OpenCalligraphy includes a tool called <em>Pak Diff Utility</em>, which can be used to compare data file archives from different versions of the game:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-05/pak-diff-utility.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-05/pak-diff-utility.png" alt="Pak Diff Utility" /></a></p>

<p>I have also used this as an opportunity to upgrade some of our older tools, like <em>MHExecutableAnalyzer</em>, which can be used to extract source file structure from client executables. An updated version of it is now included in OpenCalligraphy:</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2025-05/executable-analyzer.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-05/executable-analyzer.png" alt="Executable Analyzer" style="max-height: 500px;" /></a>
</center>

<p>The plan going forward is to use OpenCalligraphy as the foundation of all our game data related tooling, including any potential editing functionality.</p>

<p>Both the source code and prebuilt binaries are available on <a href="https://github.com/Crypto137/OpenCalligraphy">GitHub</a> under the MIT license, so feel free to do practically whatever you want with it.</p>

<hr />

<p>I am going back to my programming cave. See you in a month.</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">MHServerEmu Progress Report: April 2025</title><link href="https://crypto137.github.io/MHServerEmu/blog/2025/04/30/progress-report-april-2025.html" rel="alternate" type="text/html" title="MHServerEmu Progress Report: April 2025" /><published>2025-04-30T06:15:00+03:00</published><updated>2025-04-30T06:15:00+03:00</updated><id>https://crypto137.github.io/MHServerEmu/blog/2025/04/30/progress-report-april-2025</id><content type="html" xml:base="https://crypto137.github.io/MHServerEmu/blog/2025/04/30/progress-report-april-2025.html"><![CDATA[<!--more-->

<p><img src="/MHServerEmu/assets/blog/progress-report/2025-04/header.jpg" alt="MHServerEmu Progress Report - April 2025" /></p>

<p>Here is another MHServerEmu Progress Report for you.</p>

<h2 id="current-status">Current Status</h2>

<p>Compared to the crazy ride of February and March, when a lot of features just started working of all of a sudden, April has definitely been a slower month, but things are still happening in the background. After implementing login rewards early in the month, I took a break, during which Alex continued to work on bug fixes, optimization, and minor improvements. When I returned from my break, Alex shifted to digging into the Unreal side of the game again, while I started working on the big server architecture overhaul I mentioned a number of times over the past few months.</p>

<h2 id="architecture-overhaul">Architecture Overhaul?</h2>

<p>When we talk about server architecture, it is important to mention how MHServerEmu differs from what Gazillion had back when they were running the game. While MHServerEmu is a single monolithic all-in-one package that does <em>almost</em> everything, Gazillion had an entire cluster of servers that handled various aspects of the overall online service. Here is a diagram I did back in October 2023 based on the network protocol embedded in the client:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-04/gazillion-server-cluster.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-04/gazillion-server-cluster.png" alt="Gazillion Server Cluster" /></a></p>

<p>Based on our packet captures, at the very least GameInstanceServer (GIS) and FrontendServer (FES) were horizontally scalable, meaning Gazillion had more than one GIS and FES and could add more as needed.</p>

<p>This kind of architecture makes a lot of sense if your goal is to have a single centralized service and have it scale up to potentially tens and hundreds of thousands of players. However, the preservation aspect has been a top priority for me since the inception of this project, and having a single centralized service may be the worst way of preserving an online game, especially when you are talking about a game based on IP licensed from a notoriously litigious company. This is why I opted for a monolithic self-contained server approach: while it is not as scalable, it makes the server significantly easier to set up (effectively as easy as installing a mod for a single player game), and when you host it locally yourself, there is no practical way to “take it away” anymore.</p>

<p>Despite MHServerEmu being a single server, its architecture still mirrors Gazillion’s server cluster with functionality originally delegated to separate servers now running as “services” on different threads of the same process. Up until this point the vast majority of our efforts went into implementing GIS functionality, which is what handles practically all gameplay-related processing. Implementations of other services have been little more than stubs, doing just the bare minimum required to get a player into a game instance.</p>

<p>As the gameplay side got closer to a feature complete state, we have seen increases in player numbers on some of the more popular community-hosted servers, in some cases reaching hundreds of concurrent players. The existing implementations of many of these supporting services were practically just scaffolding, and some of them were creaking at the seams, because they were doing the work they were never really designed to do. One good example of this was our old implementation of the frontend server, which processes raw client connections and routes received data to various backend services. Because the old implementation was quickly hacked together to handle a locally connected client, it had issues handling data from unreliable connections, such as those that involved Wi-Fi on the client side, which resulted in some players being frequently disconnected from the server.</p>

<p>I did my best to do quick fixes as issues arised, which resulted in things like the current instancing solution you can see on some of the community-hosted servers. However, now that gameplay was in a reasonably decent state, it was time to take another good look at the supporting services and the overall architecture.</p>

<h2 id="frontend-improvements">Frontend Improvements</h2>

<p>Because we have been relying on quick fixes for non-gameplay related functionality so far, a web of technical debt started to accumulate, and it needed to be untangled.</p>

<p>The first area I looked at this month was the aforementioned Frontend. I have identified the following issues with it:</p>

<ul>
  <li>
    <p>Other services depended on the concrete <code class="language-plaintext highlighter-rouge">FrontendClient</code> implementation. This made it impossible to, for example, do an alternative Frontend implementation that could potentially run as a separate process, if the need ever arises.</p>
  </li>
  <li>
    <p>The protocol of an incoming message depends on the current state of the connection, meaning that messages cannot be deserialized as soon as they arrive. Previously new buffers were allocated for every single incoming message to store them until they could be deserialized, resulting in increased garbage collection (GC) pressure and more frequent GC-related stuttering.</p>
  </li>
  <li>
    <p>Packet parsing was not buffered, meaning that if a packet arrived in fragments across multiple data transmissions, it could not be parsed, and the client was forced to disconnect. This is the previously described Wi-Fi issue.</p>
  </li>
  <li>
    <p>The authentication process was not implemented as strictly as it should have been, which gave some leeway to unauthenticated and potentially malicious clients.</p>
  </li>
  <li>
    <p>The Frontend had no rate limiting, making it highly susceptible to potential DoS attacks.</p>
  </li>
</ul>

<p>Here is a summary of what I have done this month to address these issues:</p>

<ul>
  <li>
    <p>Other services can now interact with the Frontend through an abstract <code class="language-plaintext highlighter-rouge">IFrontendClient</code> interface, which provides flexibility in how Frontend is implemented. There is still some remaining concrete frontend implementation dependency, primarily in the Player Manager service, which will eventually be cleaned up. The end goal is to make all services completely independent from the concrete frontend implementation we have.</p>
  </li>
  <li>
    <p>The entire message handling pipeline has been overhauled:</p>

    <ul>
      <li>
        <p>Message buffers are now pooled and reused.</p>
      </li>
      <li>
        <p>Messages are now routed asynchronously on thread pool threads as they arrive rather than on a single dedicated thread, resulting in reduced latency.</p>
      </li>
      <li>
        <p>Various smaller optimizations have been made, such as replacing <code class="language-plaintext highlighter-rouge">lock</code> with <code class="language-plaintext highlighter-rouge">SpinLock</code> when swapping queues and reducing the number of protocol table dictionary lookups.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Packet parsing has been completely rewritten to allow it to persist state between data receives and reconstruct fragmented packets.</p>
  </li>
  <li>
    <p>The authentication process is now more rigid, and clients are disconnected when they attempt to do something unexpected.</p>
  </li>
  <li>
    <p>The frontend now limits incoming data from each connected client using an implemenation of the <a href="https://en.wikipedia.org/wiki/Token_bucket">token bucket</a> algorithm.</p>
  </li>
</ul>

<p>These Frontend changes are now available in nightly builds. As expected, there were some early issues to iron out, like this one small mistake that lead to a single malformed packet from an unauthenticated client causing a total server crash with 3 GB of logs (oops). But now that they were taken care of, the Frontend is in a much better state in terms of performance, reliability, and modularity.</p>

<h2 id="chat-improvements">Chat Improvements</h2>

<p>The next big area of technical debt we have is the Player Manager, which is a service that is supposed to load balance connected clients across different game instances and manage related features, like ensuring all member of a party end up in the same region instance. However, before meaningful improvements can be made to it, two main issues need to be solved:</p>

<ul>
  <li>
    <p>Our old implementation of the service system allowed only very limited communication between services, mostly related to routing client message. This was insufficient for the Player Manager, which requires extensive bidirectional communication with game instances.</p>
  </li>
  <li>
    <p>The chat command system, which dates back to August 2023 and is some of the oldest server code we still use, was tightly coupled with the existing concrete Player Manager implementation.</p>
  </li>
</ul>

<p>The communication issue was relatively easy to solve: we now have a more flexible event-like system, which can be extended with new message types as needed. We will be monitoring its performance, especially in relation to GC pressure under heavy load, but overall it seems to be doing the job we need so far.</p>

<p>The chat command problem is trickier to deal with however. Not only was our code left mostly untouched since August 2023, it was also heavily based on the command system from a work-in-progress Diablo III server emulator called Mooege, which was written back in 2011. The command system needed a total overhaul, which also required all command implementations to be adjusted accordingly. To make matters worse, in order to decouple everything from the Player Manager, we needed to overhaul our chat implementation, which was another overextended service stub.</p>

<p>The first order of business was improving the foundation, which was chat. Chat messages need to go through quite a journey to arrive to other players:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Client</code> -&gt; <code class="language-plaintext highlighter-rouge">FES</code> -&gt; <code class="language-plaintext highlighter-rouge">PlayerManager</code> -&gt; <code class="language-plaintext highlighter-rouge">GIS</code> -&gt; <code class="language-plaintext highlighter-rouge">Game</code> -&gt; <code class="language-plaintext highlighter-rouge">GroupingManager</code> -&gt; <code class="language-plaintext highlighter-rouge">Client</code></p>
</blockquote>

<p>The key service in this chain is the Grouping Manager, which is effectively the “chat service”. Previously we immediately routed chat messages from games to the Grouping Manager, which was problematic for a number of reasons. First, the Grouping Manager has no access to game state, so it has no idea what players are “nearby” to filter recipients in say and emote channels, or what prestige level each player is at to color their names accordingly. Second, command parsing happened at the Grouping Manager level, so if a command needed to do something game-related, which is very often the case, it needed to go through the Player Manager to get a reference to a game that the client was in. This coupled the Grouping Manager, the command system, the Player Manager, and game instance management in a single messy blob.</p>

<p>To solve this, initial chat message handling now happens at the game level, which gives us the opportunity to include necessary game state data before forwarding them to the Grouping Manager, or even avoid forwarding altogether if the message is successfully parsed as a command. This in turn gives commands direct access to game instances that invoked them, which circumvents the entire roundabout trip through the Player Manager.</p>

<p>Thanks to this, proximity and region based chat channels now work as they should, and players on community-hosted public servers now have to use the <code class="language-plaintext highlighter-rouge">Social</code>, <code class="language-plaintext highlighter-rouge">Trade</code>, and <code class="language-plaintext highlighter-rouge">LFG</code> channels for cross-region communication, just like back in the day. One side effect of implementing proximity chat is that the Nearby tab of the social panel now displays nearby players:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-04/nearby.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-04/nearby.jpg" alt="Gazillion Server Cluster" /></a></p>

<p>There appear to be some issues related to updating the status of players in the Nearby tab, which may or may not be client-side UI issues. We will be further looking into it as part of the bigger community system update, which will include implementing other tabs and broadcasting player status data across different game instances. For now we still have some command system improvements to do.</p>

<h2 id="command-improvements">Command Improvements</h2>

<p>As part of this command system overhaul, I wanted to not only get rid of unnecessary dependencies on other services, but also make improvements to some long-standing issues with maintaining command implementations:</p>

<ul>
  <li>
    <p>There was too much boilerplate code for validating invokers and arguments.</p>
  </li>
  <li>
    <p>The existing help functionality was too inconvenient to use, and updating the <a href="https://github.com/Crypto137/MHServerEmu/blob/master/docs/ServerEmu/ServerCommands.md">command list</a> in our documentation took too much effort to do manually, leading to it always being out of date.</p>
  </li>
</ul>

<p>My plan for tackling both of these problems was to make validation more data-driven and provide the necessary data to the command system using C# attributes, which we already used to define commands.</p>

<p>For example, this is what the <code class="language-plaintext highlighter-rouge">!region warp</code> command looked like previously:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nf">Command</span><span class="p">(</span><span class="s">"warp"</span><span class="p">,</span> <span class="s">"Warps the player to another region.\nUsage: region warp [name]"</span><span class="p">,</span> <span class="n">AccountUserLevel</span><span class="p">.</span><span class="n">Admin</span><span class="p">)]</span>
<span class="k">public</span> <span class="kt">string</span> <span class="nf">Warp</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">@params</span><span class="p">,</span> <span class="n">FrontendClient</span> <span class="n">client</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">client</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
        <span class="k">return</span> <span class="s">"You can only invoke this command from the game."</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">@params</span><span class="p">.</span><span class="n">Length</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="s">"Invalid arguments. Type 'help region warp' to get help."</span><span class="p">;</span>

    <span class="c1">// Implementation</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And here is the same command with the current version of attribute-based validation:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nf">Command</span><span class="p">(</span><span class="s">"warp"</span><span class="p">,</span> <span class="s">"Warps the player to another region.\nUsage: region warp [name]"</span><span class="p">)]</span>
<span class="p">[</span><span class="nf">CommandUserLevel</span><span class="p">(</span><span class="n">AccountUserLevel</span><span class="p">.</span><span class="n">Admin</span><span class="p">)]</span>
<span class="p">[</span><span class="nf">CommandInvokerType</span><span class="p">(</span><span class="n">CommandInvokerType</span><span class="p">.</span><span class="n">Client</span><span class="p">)]</span>
<span class="p">[</span><span class="nf">CommandParamCount</span><span class="p">(</span><span class="m">1</span><span class="p">)]</span>
<span class="k">public</span> <span class="kt">string</span> <span class="nf">Warp</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">@params</span><span class="p">,</span> <span class="n">NetClient</span> <span class="n">client</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Implementation</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Not only is there slightly less copying and pasting boilerplate code, but now we can use the data provided in these attributes to automatically generate the documentation we need.</p>

<p>At the time of writing this the command system overhaul is what I am actively working on, and it should be ready to be rolled out relatively soon.</p>

<h2 id="looking-ahead">Looking Ahead</h2>

<p>This is just the beginning for this architecture overhaul project. The remaining major goals for May include:</p>

<ul>
  <li>
    <p>Overhauling the Player Manager, which would potentially include more frequent database write operations (i.e. less egregious rollbacks when the server is having issues), as well as the first round of load balancing improvements.</p>
  </li>
  <li>
    <p>Integrating the leaderboard system implementation that has been sitting in a nearly finished state for months. This requires other architectural changes to be done first.</p>
  </li>
</ul>

<p>After finishing these, I will be shifting my focus to getting version 0.6.0 ready for release in early June, hopefully in time for the game’s 12th anniversary on June 4th. We will be talking about our plans for 0.7.0 and the updated roadmap to 1.0.0 at some point after that.</p>

<hr />

<p>Time to go back to work, see you next time!</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">MHServerEmu Progress Report: March 2025</title><link href="https://crypto137.github.io/MHServerEmu/blog/2025/03/31/progress-report-march-2025.html" rel="alternate" type="text/html" title="MHServerEmu Progress Report: March 2025" /><published>2025-03-31T05:15:00+03:00</published><updated>2025-03-31T05:15:00+03:00</updated><id>https://crypto137.github.io/MHServerEmu/blog/2025/03/31/progress-report-march-2025</id><content type="html" xml:base="https://crypto137.github.io/MHServerEmu/blog/2025/03/31/progress-report-march-2025.html"><![CDATA[<!--more-->

<p><img src="/MHServerEmu/assets/blog/progress-report/2025-03/header.jpg" alt="MHServerEmu Progress Report - March 2025" /></p>

<p>It’s a bird! It’s a plane! It’s an MHServerEmu Progress Report!</p>

<h2 id="060-and-beyond">0.6.0 and Beyond</h2>

<p>We have been doing quarterly stable releases for a whole year now, and this month we released version 0.5.0. As soon as it was out, we began working on the next one, 0.6.0, which is now available via nightly builds.</p>

<p>There are two major features planned for 0.6.0: the implementation of the long awaited power customization via talents, and a fundamental overhaul of our server architecture that is going to allow us to bring some of the “MMOness” back into the game. After doing an informal poll on our Discord server, we decided to prioritize additional work on powers, as it was what the majority of people wanted to see.</p>

<p>We will share more details on the architecture overhaul in future reports, but the short version of it is that the current architecture was designed as temporary scaffolding to allow us to work on the gameplay side of things as soon as possible. The vast majority of gameplay code is going to remain the same, but everything around it, such as game instance management, chat functionality, and other social-oriented features, will be undergoing major changes. It is not going to make much of a difference for people playing on locally hosted servers, but it will be crucial for public servers that intend to replicate the game’s original, more social, experience.</p>

<h2 id="talents">Talents</h2>

<p>Although many players seem to associate talents with the Biggest Update Ever (BUE), it is actually a much older system. First introduced as <em>specialization powers</em> in version 1.35, this system has been in Marvel Heroes since the release of Doctor Doom as a playable hero on the game’s second anniversary in 2015. We happen to have a highly experimental server implementation for this exact version of the game, which we can use to show what the UI for this feature looked like back then:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-03/specialization-powers.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-03/specialization-powers.jpg" alt="Specialization Powers" /></a></p>

<p>The underlying code that runs this system remained mostly the same, and in some cases talents are still referred to as specialization powers (e.g. <code class="language-plaintext highlighter-rouge">SpecializationPowerPrototype</code>). While it is good for pre-BUE support later down the line, it also meant more work needed to be done on the backend of the power system now.</p>

<p>This is a good opportunity to talk about the <em>power progression</em> system and what was the actual extent of changes brought by BUE. You may have noticed that it was possible to use travel and ultimate powers from level 1, even though they are supposed to unlock at higher levels. Team-ups were also using powers that were supposed to be locked for them. The reason for this is that we did not have a proper implementation of the power progression system and simply assigned all powers to avatars and team-ups. The only thing preventing you from using everything from level 1 was client-side validation, and team-ups did not have this “problem”.</p>

<p>There was a reason why we did not work on power progression until we had to do it. Even though BUE seemingly got rid of power ranks, the entire backend is still very much rank-driven and does all the necessary calculations, taking into account various modifiers to power ranks, only to arrive at rank 0 or 1 for everything but ultimate powers. What BUE actually did was set the starting rank of all powers to 1, remove point assignment and rank-modifying affixes from gear, and rescale everything accordingly. For us implementing power progression was a not insignificant amount of work, most of which is going to be pretty much invisible until we support pre-BUE versions of the game. However, since talents are just specialization powers with a new coat of paint, they relied on this underlying system, so it needed to be done.</p>

<p>As a result of implementing power progression, travel and ultimate powers now become usable when they are supposed to, and team-ups unlock powers gradually as they level up. However, this is not the full extent of these changes: it is now also possible to upgrade your ultimate power’s rank using character tokens, and team-up procs that can activate when the team-up is away are now properly assigned to avatars.</p>

<p>Another vital piece of the talent puzzle is <em>mapped powers</em>. This is not a new system either: it was introduced at least as far back as September 2014 when Rogue was released as a playable hero in version 1.26, and it is the foundation of her power stealing mechanic. Mapping a power means replacing it with another one, while also keeping the original power’s rank. The system itself is not very complicated, but it required doing an overhaul of our <em>ability key mapping</em> implementation, which was more in-depth. Ability key mapping is what the game calls action bars, and each “ability” can be either a power or an item. This system was built with various other features in mind, including having multiple switchable bars (unused in BUE), power specs, and tranform mode powers that replace all of your buttons. All of them had to be accounted for.</p>

<p>Speaking of transform mode powers, there are only two of them in version 1.52 (Rocket Raccoon’s Mechfall and Rogue’s Final Form), and both of them now work thanks to these backend improvements.</p>

<p>There is also one thing I would like to note regarding ability key mappings in version 1.52, because we have received numerous bug reports about this. When you level up, the client automatically slots powers into free slots, even if they were not unlocked by reaching that specific level. This means powers will always be reslotted into their designated slots on level up, as long as these slots are not occupied by other powers. Although this is arguably not intuitive behavior, it is done by the client on its own, so to avoid desyncs we have to do the same server-side.</p>

<p>With power progression and mapped powers implemented, talents were pretty much ready to go. The rest of the functionality, like changing how a power behaves, is done using the same proc and condition based “scripting” system we discussed in previous reports, so it pretty much just worked all of a sudden. Now the power system is almost feature complete, with only a few minor things still missing, like shared health pools used by one of the boss encounters in the Muspelheim raid. We will take care of these smaller features at some point before 1.0, but for now we will be moving on to other, higher priority features.</p>

<h2 id="prestige">Prestige</h2>

<p>Talents ended up being implemented faster than expected, which gave me some time to work on minor features that were originally scheduled for 0.7.0: Hero Synergies and Prestige. Synergies are not very interesting to talk about, since they are simply stat bonuses, but with Prestige there are some curious aspects to discuss.</p>

<p>Prestiging a hero is more involved than just resetting their level. You also need to:</p>

<ul>
  <li>
    <p>Validate the prestige consumable item interaction.</p>
  </li>
  <li>
    <p>Do a full respec, including unassigning mapped powers and talents.</p>
  </li>
  <li>
    <p>Check restrictions of all equipped items and unequip them, handling potentially running out of space in the general inventory.</p>
  </li>
  <li>
    <p>Reset the progress of missions that save their state per avatar.</p>
  </li>
  <li>
    <p>Grant prestige loot (more on that later).</p>
  </li>
  <li>
    <p>Recalculate the number of avatars at the new prestige level to update achievements.</p>
  </li>
  <li>
    <p>Do a teleport to the starting region.</p>
  </li>
</ul>

<p>As you can see, there are many different systems interacting to make this single thing happen. Because all of this occurs at the same time, there were some timing-related issues to solve, particularly related to modifying the inventory at the same time as teleporting, which triggers a save.</p>

<p>While many people remember one of the main Prestige rewards being additional copies of the starting costume, this was actually changed in BUE. Here is how Asros, one of the developers working at Gazillion at the time, explained why this change was made on the game’s <a href="https://web.archive.org/web/20170109140148/http://forums.marvelheroes.com/discussion/comment/3999141#Comment_3999141">official forums</a>:</p>

<blockquote>
  <p>[…]</p>

  <p>Costumes and costume revenue is a very important part of our business. We understand that there are many free to play players out there who will be disappointed in this decision. We feel very strongly that going forward, purely cosmetic things like costumes, for the most part(achievements/log in gifts as exceptions), should be cash shop items. Sometimes we have to make unpopular decisions for the betterment of the long term health of the game and the company. The reason for the free defaults was to make prestiging easier for players who had high level costume cores attached. Now with the changes to catalyst system, that is no longer a necessity.</p>

  <p>[…]</p>
</blockquote>

<p>Gazillion ended up replacing the starting costume with the bonus item find (BIF) loot table (<code class="language-plaintext highlighter-rouge">Loot/Tables/BonusItemFind/BonusItemFindTable.prototype</code>), which is the table also used by S.H.I.E.L.D. Supply Drops. The bad news is that it did not end up being good for the “long term health of the game”. The good news is we do not have financial obligations, so I have added a new setting called <code class="language-plaintext highlighter-rouge">GrantStartingCostumeForPrestige</code> that returns the original reward. Once crafting is working, this will be very useful for all of your costume blending needs.</p>

<hr />

<p><strong>UPDATED (JUNE 2025).</strong> Since writing this, we have found video evidence that this plan was not implemented by version 1.52. Because of this, we have made starting costumes the default prestige reward, but the loot table can still enabled with the <code class="language-plaintext highlighter-rouge">UsePrestigeLootTable</code> setting.</p>

<hr />

<p>Now that we have Prestige working, there have been some requests from the community to be able to continue leveling up past Prestige level 6 (Cosmic), which is the cap in version 1.52. Gazillion was actually working on extending the Prestige system with something called the Omega Prestige:</p>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container">    <iframe title="YouTube video player" width="640" height="390" src="//www.youtube.com/embed/r5LQfV8VQ3Y" frameborder="0" allowfullscreen=""></iframe></div>

<p>Omega Prestige was available in the console versions of the game for some heroes, and the code for it exists in PC test center builds of version 1.53. None of it is available in 1.52, but we have come up with an alternative.</p>

<p>Ultimate Prestige (named by popular vote on our Discord server) is going to be a custom system that will allow you to reset your Prestige level back to 0 (White). We even came up with a way to display your Prestige reset count in the client’s UI:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-03/ultimate-prestige.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-03/ultimate-prestige.jpg" alt="Ultimate Prestige" /></a></p>

<p>Ultimate Prestige will be effectively uncapped, allowing you to level up your favorite hero over and over for as long as you desire. This system is going to be completely optional: server owners will be able to completely disable it in server settings, and we also plan to make the Prestige reset count hideable, in case you do not want everybody around you to know just how much fun you are having with your Squirrel Girl.</p>

<h2 id="prototype-patcher">Prototype Patcher</h2>

<p><em>AlexBond is back again to talk about his latest endeavor - patching the game’s data files server-side.</em></p>

<hr />

<p>Hello everyone, this is AlexBond.</p>

<p>After the recent large power update we discovered more bugs that existed in the original game, which we usually call <em>Gazillion issues</em>. One example of such issue is related to Emma Frost’s controlled minions. As it turns out, when Gazillion reworked mobs as part of their story overhaul, they forgot to flag the new mob alliances as hostile for controlled entities, which means entities controlled by Emma, Vision, Magik, and Rogue are not going to attack enemies belonging to these alliances. These enemies are encountered in the first chapter of the story, so it is not as noticable as it could have been.</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-1.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-1.png" alt="Prototype Patcher 1" /></a>
</center>

<p>New alliances:</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-2.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-2.png" alt="Prototype Patcher 2" /></a>
</center>

<p>To fix issues such as these I came up with an idea to implement a system called <em>Prototype Patch Manager</em>, which can be used to change prototype data when it is being loaded on the server. This allows us to fix numerous bugs without having to rely on hardcoded fixes.</p>

<p>All patches are stored in JSON files in the following subdirectory: <code class="language-plaintext highlighter-rouge">Data\Game\Patches</code>.</p>

<p>For example, the patch to fix the issue with Emma Frost looks like this:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"Enabled"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Prototype"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Entity/Alliances/Overrides/Controlled.prototype"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HostileTo[]"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Add [GangBiker, GangShocker, GangHellbane, GangElectro, EnemyToEveryone] to Controlled Keywords"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ValueType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PrototypeId[]"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Value"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="mi">3046566727234031236</span><span class="p">,</span><span class="w"> </span><span class="mi">11722709847486435174</span><span class="p">,</span><span class="w"> </span><span class="mi">1849637429396115378</span><span class="p">,</span><span class="w"> </span><span class="mi">3414168095237017445</span><span class="p">,</span><span class="w"> </span><span class="mi">4627307232939675976</span><span class="w"> </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Prototype</code> is the file path of the prototype we want to modify.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Path</code> is the internal path inside the prototype that points to the required value or array (arrays are specified using <code class="language-plaintext highlighter-rouge">[]</code>).</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ValueType</code> is the type of the value we are going to change. For prototype references this is going to be <code class="language-plaintext highlighter-rouge">PrototypeId</code>, but for embedded prototype instances you need to use  <code class="language-plaintext highlighter-rouge">PrototypeDataRef</code>.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Value</code> is a general purpose field that can contain various types, like numerical values, strings, or JSON objects.</p>
  </li>
</ul>

<p>Thanks to these patches, we can fix bugs that existed in the original game, bring back events that require loot table modifications, and much more.</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-3.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-3.jpg" alt="Prototype Patcher 3" /></a>
</center>

<p>We can also add back entities that were removed from the game by repurposing unused markers. For instance, these patches add Cloak and Dagger to the Avengers Tower:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"Enabled"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Prototype"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Resource/Cells/DistrictCells/Avengers_Tower/AvengersTowerNPE_HUB.cell"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MarkerSet.Markers[27].EntityGuid"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Add Dagger"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ValueType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PrototypeGuid"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Value"</span><span class="p">:</span><span class="w"> </span><span class="mi">6158563480682235387</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nl">"Enabled"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Prototype"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Resource/Cells/DistrictCells/Avengers_Tower/AvengersTowerNPE_HUB.cell"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MarkerSet.Markers[27].Position"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Change Dagger position"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ValueType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Vector3"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Value"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="mf">-694.76</span><span class="p">,</span><span class="w"> </span><span class="mf">2003.63</span><span class="p">,</span><span class="w"> </span><span class="mf">160.97</span><span class="w"> </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nl">"Enabled"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Prototype"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Resource/Cells/DistrictCells/Avengers_Tower/AvengersTowerNPE_HUB.cell"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MarkerSet.Markers[28].EntityGuid"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Add Cloak"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ValueType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PrototypeGuid"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Value"</span><span class="p">:</span><span class="w"> </span><span class="mi">13282508175937904349</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Meet the new guests!</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-4.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-4.jpg" alt="Prototype Patcher 4" /></a>
</center>

<p>In addition to modifying the values of existing fields, there is also a more complex system that can be used to add new embedded prototypes. For example, we can create a loot table that would drop Carnival Beads by repurposing the unused <code class="language-plaintext highlighter-rouge">TestItemsLootTable</code>:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"Enabled"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Prototype"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Loot/Tables/Test/TestItemsLootTable.prototype"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Choices[0].Choices[]"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Add [MGBeads, MGBeads2] as LootDropItemPrototype"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ValueType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Prototype[]"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Value"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"ParentDataRef"</span><span class="p">:</span><span class="w"> </span><span class="mi">1071992662862269383</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Item"</span><span class="p">:</span><span class="w"> </span><span class="mi">7800473051294539167</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Weight"</span><span class="p">:</span><span class="w"> </span><span class="mi">50</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"ParentDataRef"</span><span class="p">:</span><span class="w"> </span><span class="mi">1071992662862269383</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Item"</span><span class="p">:</span><span class="w"> </span><span class="mi">10014849647161122257</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Weight"</span><span class="p">:</span><span class="w"> </span><span class="mi">20</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>To add a new <code class="language-plaintext highlighter-rouge">Prototype</code> you need to specify its <code class="language-plaintext highlighter-rouge">ParentDataRef</code>, usually it is a <code class="language-plaintext highlighter-rouge">*.defaults</code> prototype:</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-5.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-5.png" alt="Prototype Patcher 5" /></a>
</center>

<p><code class="language-plaintext highlighter-rouge">ParentDataRef</code> is followed by fields inside this class (<code class="language-plaintext highlighter-rouge">Item</code>, <code class="language-plaintext highlighter-rouge">Weight</code>) that we override from defaults. In order for the <code class="language-plaintext highlighter-rouge">TestItemsLootTable</code> to work and bosses to drop what we want, we need to add this table’s id (<code class="language-plaintext highlighter-rouge">14120665269944980064</code>) to the global <code class="language-plaintext highlighter-rouge">SpecialEventsTable</code>:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"Enabled"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Prototype"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Loot/Tables/Mob/Bosses/SpecialEventsTable.prototype"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Choices[]"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Add TestItemsLootTable for CarnivalEvent"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ValueType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PrototypeDataRef"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Value"</span><span class="p">:</span><span class="w"> </span><span class="mi">14120665269944980064</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Now we can defeat Black Cat and get our Carnival Beads:</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-6.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-03/patcher-6.jpg" alt="Prototype Patcher 6" /></a>
</center>

<p>I have made patches for multiple such events, Mardi Gras is just an example for people who want to try doing it themselves.</p>

<p>It is also possible to modify missions like this in a limited fashion, including bringing some of them back. When making changes to mission prototypes, here is what is important to keep in mind:</p>

<ul>
  <li>
    <p>The client is going to complain and not refresh objectives if the mission was disabled. However, the mission will work and you will be able to get rewards.</p>
  </li>
  <li>
    <p>You cannot modify elements related to visibility and interaction. They have to be in sync between the client and the server.</p>
  </li>
  <li>
    <p>If data is used only by the server, it is safe to modify.</p>
  </li>
</ul>

<p>Hopefuly somebody will use these tools to bring back something that was disabled (intentionally or by mistake).</p>

<p>And with that it is time to say goodbye for now. Good luck leveling up <del>NoLifer</del> Ultimate Prestige!</p>

<hr />

<p>This is it for this progress report. See you all next time!</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">MHServerEmu Progress Report: February 2025</title><link href="https://crypto137.github.io/MHServerEmu/blog/2025/03/04/progress-report-february-2025.html" rel="alternate" type="text/html" title="MHServerEmu Progress Report: February 2025" /><published>2025-03-04T20:45:00+03:00</published><updated>2025-03-04T20:45:00+03:00</updated><id>https://crypto137.github.io/MHServerEmu/blog/2025/03/04/progress-report-february-2025</id><content type="html" xml:base="https://crypto137.github.io/MHServerEmu/blog/2025/03/04/progress-report-february-2025.html"><![CDATA[<!--more-->

<p><img src="/MHServerEmu/assets/blog/progress-report/2025-02/header.jpg" alt="MHServerEmu Progress Report - February 2025" /></p>

<p>Another month, another MHServerEmu Progress Report.</p>

<h2 id="050-status">0.5.0 Status</h2>

<p>As I am writing this, we are finalizing the work on our next quarterly stable release, version 0.5.0. As a result of player feedback and testing it ourselves, we have shuffled features around, with some getting pushed forward (e.g. Infinity / Omega), and others being delayed (e.g. leaderboards). Overall I feel we ended up with a very substantial package of changes, focused mostly on getting powers and the overall combat into a more refined state.</p>

<p>All the major features that will be coming in 0.5.0 are now done, and we are currently working on some additional polish and bug fixes. The current plan is to have it all ready at some point next week.</p>

<h2 id="difficulty-scaling">Difficulty Scaling</h2>

<p>One hot topic that came up after the major batch of power changes in February was the issue of difficulty scaling, particularly at level 60 in group-oriented content, such as Midtown Patrol. I would like to use this opportunity to talk more about what is happening behind the scenes with it.</p>

<p>First of all, <em>there was no difficulty scaling prior to these changes</em>. Green, Red, and Cosmic difficulty tiers were all using the same baseline values, which in most cases correspond to the Green difficulty. The only thing that was affected by difficulty tier selection before these changes was loot, so you were effectively getting Cosmic levels of loot for doing Green content. This was semi-balanced by the fact that many sources of damage and survivability were not working, but overall it was still heavily skewed towards being too easy. As procs and over time tickers were implemented, it became clear that leaving combat calculations as is would result in this situation becoming even more lopsided, so it was time to finally rip the bandaid off.</p>

<p>Get your tinfoil hats ready, because we are about to expose a bit of a conspiracy. Have you ever wondered why you never see the exact health values of the enemies you fight in Marvel Heroes? There is a very good reason for this: all damage numbers you see are actually <em>fake</em>. When the game needs to make an enemy twice as tanky, it does not increase its health or defenses. Instead, <em>the player’s damage gets cut in half</em>, and the damage numbers that are sent to the client are manipulated to hide this multiplier. This applies only to player -&gt; mob damage, when enemies attack players or player-controlled entities you get more or less real damage with only the level scaling applied.</p>

<p>The key thing here is where these multipliers are coming from. This is handled by a class called <code class="language-plaintext highlighter-rouge">TuningTable</code>, and each region has its own instance of it. The difficulty damage multiplier is calculated by the region’s <code class="language-plaintext highlighter-rouge">TuningTable</code> instance each time damage is applied to a target based on the following factors:</p>

<ul>
  <li>
    <p>Whether the source of the damage is a player-owned entity (avatar, summon, team-up, etc.) or not.</p>
  </li>
  <li>
    <p>The rank of the target (popcorn, boss, etc.).</p>
  </li>
  <li>
    <p>The difficulty tier of the current region (Green / Red / Cosmic).</p>
  </li>
  <li>
    <p>The difficulty index of the current region. This is used in modes such as Holo-Sim and X-Defense to gradually escalate the difficulty.</p>
  </li>
  <li>
    <p>The number of nearby players. The exact radius of “nearby” differs depending on the region. In general, for private instances it is set to 100000 units, which covers pretty much the entire region, while in public combat zones it is set to 1200 units, which is roughly about the size of a screen.</p>
  </li>
  <li>
    <p>Whether the region is a public combat zone (PCZ) or not.</p>
  </li>
</ul>

<p>One important point to note here is how this is balanced in practice in group-oriented public combat zones, such as Midtown Patrol. The curves used in them start aggressive, but have heavy diminishing returns, which means that bosses will feel very tanky when fighting them solo, but as more players join the fight, their damage will relatively quickly outscale the fake “boss health” gains (which are actually player damage penalties).</p>

<p>I have tested everything extensively, which included manually calculating the multipliers for various situations, and I can say with a high degree of confidence that the system appears to be working consistent with the game data. However, there have been some very vocal feedback from some testers that the game is now “unplayable”. To address this feedback, we have rearranged the features on our roadmap to get some of the additional sources of player power working sooner.</p>

<h2 id="infinity-and-omega">Infinity and Omega</h2>

<p>After evaluating the cost-benefit ratio of various missing sources of player power, with cost being the time it would take to implement them, and benefit being the increase in power they provide, I decided it made the most sense to push forward the two alternate advancement systems, Infinity and Omega. The main reason for this is because they rely mostly on the backend functionality we already have implemented, such as entity modifiers that are used for features like enemy ranks, which meant it took only a few days of work to get them up and running. At the same time, they are a major source of player power, although not quite as “infinite” as one of them implies.</p>

<p>“But wasn’t Omega removed in BUE?” — some of you may ask. Well, yes and no: when the client connects to the server, it receives a <code class="language-plaintext highlighter-rouge">NetMessageLocalPlayer</code> that contains a  <code class="language-plaintext highlighter-rouge">NetStructGameOptions</code> that looks like this:</p>

<div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">NetStructGameOptions</span> <span class="p">{</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">teamUpSystemEnabled</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">achievementsEnabled</span>    <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">omegaMissionsEnabled</span>    <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">veteranRewardsEnabled</span>    <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">multiSpecRewardsEnabled</span>    <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">giftingEnabled</span>    <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">characterSelectV2Enabled</span>    <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">communityNewsV2Enabled</span>    <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">leaderboardsEnabled</span>    <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">newPlayerExperienceEnabled</span>    <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">int32</span>    <span class="na">serverTimeOffsetUTC</span>    <span class="o">=</span> <span class="mi">13</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">useServerTimeOffset</span>    <span class="o">=</span> <span class="mi">14</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">missionTrackerV2Enabled</span>    <span class="o">=</span> <span class="mi">15</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">int32</span>    <span class="na">giftingAccountAgeInDaysRequired</span>    <span class="o">=</span> <span class="mi">16</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">int32</span>    <span class="na">giftingAvatarLevelRequired</span>    <span class="o">=</span> <span class="mi">17</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">int32</span>    <span class="na">giftingLoginCountRequired</span>    <span class="o">=</span> <span class="mi">18</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">infinitySystemEnabled</span>    <span class="o">=</span> <span class="mi">19</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">int32</span>    <span class="na">chatBanVoteAccountAgeInDaysRequired</span>    <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">int32</span>    <span class="na">chatBanVoteAvatarLevelRequired</span>    <span class="o">=</span> <span class="mi">21</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">int32</span>    <span class="na">chatBanVoteLoginCountRequired</span>    <span class="o">=</span> <span class="mi">22</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">bool</span>    <span class="na">isDifficultySliderEnabled</span>    <span class="o">=</span> <span class="mi">23</span><span class="p">;</span>
    <span class="k">optional</span> <span class="kt">bool</span>    <span class="na">orbisTrophiesEnabled</span>    <span class="o">=</span> <span class="mi">24</span> <span class="p">[</span><span class="k">default</span> <span class="o">=</span> <span class="kc">false</span><span class="p">];</span>
    <span class="k">required</span> <span class="kt">int32</span>    <span class="na">platformType</span>    <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">NetMessageLocalPlayer</span> <span class="p">{</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">localPlayerEntityId</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">required</span> <span class="n">NetStructGameOptions</span>    <span class="na">gameOptions</span>    <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>One of the fields here is called <code class="language-plaintext highlighter-rouge">infinitySystemEnabled</code>. When it is set to <code class="language-plaintext highlighter-rouge">false</code>, not only does it disable the Infinity system, but it also reenables Omega in the state it was left in as of version 1.52. While this is some neat trivia, why bother implementing it right now? The reason is very simple: the vast majority of code for Infinity is literally copypasted Omega code with the word “Omega” replaced with “Infinity”, and I am not exaggerating this. The biggest difference between them is how points are calculated: Infinity uses a “squished” experience curve in which 10 Omega points are equivalent to 1 Infinity point, and each Infinity point you receive is colored to match various Infinity Stones. Another semi-major difference is the unlock requirement: Infinity is unlocked at level 60 account-wide, while Omega is unlocked per-hero at level 30. Everything else is pretty much the exact same thing code-wise, all the way to checking various prerequisite nodes (that are simply left blank in Infinity). So, by implementing one of them, it was very easy to get the other one working as well.</p>

<p>While we are at it, here is another fun fact: despite being called “Infinity”, it is not actually infinite. The system is capped at 6 000 000 points, of which only 80 400 are actually spendable. This is still a heavy grind, especially when compared to Omega, which had a cap of 10 000 (equivalent to 1 000 when using the Infinity curve), but I would not be surprised to see people reach it years down the line after 1.0 is out and there are no more wipes.</p>

<p>As for Omega, the exact state of its balance in the context of BUE remains to be evaluated. One idea that has been floating around is “uncapping” to match Infinity, but it needs to be extensively tested to make sure nothing breaks. In any case, even if it does not find extensive use in 1.52, this is still going to be useful for when get to backporting the server to version 1.48 (aka “pre-BUE”).</p>

<p>With these two systems working (Infinity in particular), there is now both an additional long term grind to work on, and a way to brute force past the remaining unimplemented systems, such as talents, which require more time and effort to implement.</p>

<h2 id="summons">Summons</h2>

<p><em>AlexBond is back for this month’s report to talk about his work on summon powers, hotspots, and controlled agents.</em></p>

<hr />

<p>Hello everyone, this is AlexBond. In this report we are going to talk about summons.</p>

<p>Summons are allies created by powers that help you in combat. If you ask a Marvel Heroes player to give an example of a summoner hero you will probably hear Squirrel Girl, Magik, or Doctor Doom; nobody is going to say Cyclops, Deadpool, or Nova. However, almost all heroes in the game are summoners. Why is that? Allow me to explain.</p>

<p>Each power is a chain of different actions. When you play as Cyclops and activate the Optic Beam power (internally referred to as <code class="language-plaintext highlighter-rouge">ChanneledBeam</code>), a hotspot called <code class="language-plaintext highlighter-rouge">CyclopsChanneledEnergyBeamArea</code> is summoned. This hotspot has a triangle shape with a 10 degree angle and a length of 700 units. It is attached to Cyclops, and when you move the mouse cursor, he rotates towards it, and the attached hotspot follows. When the hotspot overlaps with other entities, it applies powers defined in the <code class="language-plaintext highlighter-rouge">AppliesPowers</code> field of its prototype: in this example in particular it applies <code class="language-plaintext highlighter-rouge">ChanneledEnergyBeamEffect</code>, which is the damage component, and <code class="language-plaintext highlighter-rouge">ChanneledEnergyBeamSlowEffect</code>, which is an additional status effect.</p>

<p>Three systems needed to be implemented for all of this to work correctly: <em>summon powers</em>, <em>hotspots</em>, and <em>attached entities</em>.</p>

<h3 id="summon-powers">Summon Powers</h3>

<p>Each power prototype contains many different parameters, but the main one we are interested in is <code class="language-plaintext highlighter-rouge">SummonEntityContexts</code>:</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2025-02/summons-1.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-02/summons-1.png" alt="Summons 1" /></a>
</center>

<p>It contains the settings we need to use to create a <code class="language-plaintext highlighter-rouge">SummonEntity</code>.</p>

<p>In most cases, when a power is activated, it creates a <code class="language-plaintext highlighter-rouge">PowerPayload</code> instance. Summon powers register for the <code class="language-plaintext highlighter-rouge">OnDeliverPayload()</code> event, which we use to get the target that we are going to attach our future summon entity to. In <code class="language-plaintext highlighter-rouge">SummonPayloadEntity()</code> we calculate the number of entities that have already been summoned, and if the <code class="language-plaintext highlighter-rouge">KillPreviousSummons</code> flag is set, we kill existing ones to prevent infinite spawning. We get the number of summon entities to create from <code class="language-plaintext highlighter-rouge">SummonNumPerActivation</code>, compare it to <code class="language-plaintext highlighter-rouge">SummonMaxSimultaneous</code>, and then create the entities using <code class="language-plaintext highlighter-rouge">SummonEntityContext()</code>. We need to not only create the entities, but also calculate their position relative to the summoner, taking into account all the restrictions, offsets, collisions, and other parameters. All of this is handled by a function called <code class="language-plaintext highlighter-rouge">GetSummonPositions()</code>. After we get our spawn coordinates, we put our newly created entities into the world and attach them to the caster or the target based on the prototype flags if needed (<code class="language-plaintext highlighter-rouge">AttachSummonsToCaster</code> and <code class="language-plaintext highlighter-rouge">AttachSummonsToTarget</code> respectively).</p>

<p>In most cases this entity is going to be an invisible area called a <em>hotspot</em> that will damage and/or apply other effects to whoever overlaps with it.</p>

<h3 id="hotspots">Hotspots</h3>

<p>In most cases hotspots are invisible to players (except for visual effects in rare cases). When they enter the world, they also begin interacting with the game’s physics system, which is processed on the server and the client in parallel. The physics system simulates movement of entities within the game world and invokes events such as <code class="language-plaintext highlighter-rouge">OnOverlapBegin()</code> and <code class="language-plaintext highlighter-rouge">OnOverlapEnd()</code>.</p>

<p>The two main use cases for hotspots are mission triggers (<code class="language-plaintext highlighter-rouge">HandleOverlapBegin_Missions()</code>) and power triggers (<code class="language-plaintext highlighter-rouge">HandleOverlapBegin_Powers()</code> and <code class="language-plaintext highlighter-rouge">HandleOverlapEnd_PowerEvent()</code>). We have already covered missions in previous reports, and now it is time to talk about powers.</p>

<p>Hotspots apply powers defined in the prototype in the following two fields:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">AppliesPowers</code></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">AppliesIntervalPowers</code></p>
  </li>
</ul>

<p>And this is where it becomes complex. There are many powers and many targets, targets can enter and exit the hotspot, and all of this needs to be tracked. We use a dictionary with target id as key and a structure called <code class="language-plaintext highlighter-rouge">PowerTargetMap</code> as value:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">ulong</span><span class="p">,</span> <span class="n">PowerTargetMap</span><span class="p">&gt;</span> <span class="n">_overlapPowerTargets</span><span class="p">;</span>

<span class="k">public</span> <span class="k">struct</span> <span class="nc">PowerTargetMap</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">HotspotPowerMask</span> <span class="n">ActivePowers</span><span class="p">;</span>
    <span class="k">public</span> <span class="n">HotspotPowerMask</span> <span class="n">IgnorePowers</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">HotspotPowerMask</code> is a bit field that can contain the state of up to 32 different powers. We use these masks to ensure that targets do not have effects applied to them multiple times, and the <code class="language-plaintext highlighter-rouge">HasConditionsForTarget()</code> function helps us prevent infinite condition stacks.</p>

<p><code class="language-plaintext highlighter-rouge">AppliesIntervalPowers</code> works differently: it can either affect random targets if the <code class="language-plaintext highlighter-rouge">IntervalPowersRandomTarget</code> flag is set, or it can target all entities at the same time.</p>

<p>When a new target begins overlapping with a hotspot’s bounds, it gets tracked using our dictionary, and all active powers are applied to it.</p>

<p>As you can see, this is a pretty complex process that involves the interaction of many different systems and events. Let’s take a closer look at one of them.</p>

<h3 id="attached-entities">Attached Entities</h3>

<p>When an entity flagged as <code class="language-plaintext highlighter-rouge">IsAttachedToEntity</code> enters the world, it is attached to the <code class="language-plaintext highlighter-rouge">EntityPhysics</code> component of the specified entity, where it is added to the <code class="language-plaintext highlighter-rouge">AttachedEntities</code> collection.</p>

<p>Every time the <code class="language-plaintext highlighter-rouge">PhysicsManager</code> processes entity movement, it calls <code class="language-plaintext highlighter-rouge">UpdateAttachedEntityPositions()</code>, which calls <code class="language-plaintext highlighter-rouge">ChangeRegionPosition()</code> for all entities in the <code class="language-plaintext highlighter-rouge">AttachedEntities</code> collection. Hotspots override <code class="language-plaintext highlighter-rouge">ChangeRegionPosition()</code> to take into account the offset it gets from <code class="language-plaintext highlighter-rouge">GetCenterOffset()</code> and the relative <code class="language-plaintext highlighter-rouge">SummonOffsetAngle</code>, which allows the beam to rotate around the user rather than its own center.</p>

<p>With this our short overview of hotspots is over, and you should have a general understanding of how it all works. Now I would like to talk about another topic.</p>

<h3 id="controlled-agents">Controlled Agents</h3>

<p>While I was working on summon powers, I noticed that it was related to two other systems: <code class="language-plaintext highlighter-rouge">TeamUpAgent</code> and <code class="language-plaintext highlighter-rouge">ControlledAgent</code>. These two, along with <code class="language-plaintext highlighter-rouge">VanityPet</code> summons, all belong to the same group called <code class="language-plaintext highlighter-rouge">PersistentAgents</code>.</p>

<p>When you transition within the same region using teleports (e.g. elevators in tower regions), your pets should transition with you (and not temporarily get stuck in the previous area like team-ups used to do). This is handled by the <code class="language-plaintext highlighter-rouge">RespawnPersistentAgents()</code> function. I had to overhaul our old team-up implementation for these new requirements. Now all three team-up modes are selectable, although not all functionality related to them is implemented at the time of writing. Let’s move over to controlled agents.</p>

<p>There is a relatively small number of heroes that can control enemies and turn them into pets. Here is the full least of them:</p>

<ul>
  <li>
    <p>Emma Frost (living enemies)</p>
  </li>
  <li>
    <p>Rogue (same as Emma Frost via a stolen power)</p>
  </li>
  <li>
    <p>Vision (robots)</p>
  </li>
  <li>
    <p>Magik (demons)</p>
  </li>
</ul>

<p>When you use a control power, the <code class="language-plaintext highlighter-rouge">ControlAgentAI</code> power event is invoked via <code class="language-plaintext highlighter-rouge">DoPowerEventActionControlAgentAI()</code>, which calls the <code class="language-plaintext highlighter-rouge">SetControlledAgent()</code> function that establishes control via <code class="language-plaintext highlighter-rouge">SetControlledAgent()</code>. This involves removing the existing controlled agent if needed (e.g. Magik) and binding the new one. The binding process includes placing the controlled entity into an inventory called <code class="language-plaintext highlighter-rouge">AvatarControlledEntities</code> belonging to the controlling avatar, setting the <code class="language-plaintext highlighter-rouge">AIMasterAvatarDbGuid</code> property on it to make it follow the avatar, and overriding its alliance to match the avatar. All boosts flagged as <code class="language-plaintext highlighter-rouge">DisableForControlledAgents</code> are removed, and we get an obedient pet.</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2025-02/summons-2.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-02/summons-2.png" alt="Summons 2" /></a>
</center>

<p>As it turns out, in version 1.52 it is not possible to change pets on the fly. I am not sure when exactly it was changed, but currently the data-defined requirement looks like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HasEntityInInventory(Context=[Var2], Entity=[], Inventory=[Controlled]) ? False : True
</code></pre></div></div>

<p>This means that if our inventory with the <code class="language-plaintext highlighter-rouge">Controlled</code> label has any entity in it, it is impossible to control a new one. To get a new pet we first need to dismiss the existing one in the power panel:</p>

<center>
<a href="/MHServerEmu/assets/blog/progress-report/2025-02/summons-3.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-02/summons-3.png" alt="Summons 3" /></a>
</center>

<p>Implementing all the systems we discussed above restored a lot of gameplay functionality: bosses are now more fun, enemies are more dangerous, and heroes are more playable (and summon-focused heroes are “playable” for the first time in a sense).</p>

<p>Hopefully you found this interesting. Until we meet again in future reports, and have fun playing!</p>

<hr />

<p>That is all we have to share today. Time for us to get back to finishing 0.5.0!</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">MHServerEmu Progress Report: January 2025</title><link href="https://crypto137.github.io/MHServerEmu/blog/2025/01/31/progress-report-january-2025.html" rel="alternate" type="text/html" title="MHServerEmu Progress Report: January 2025" /><published>2025-01-31T22:15:00+03:00</published><updated>2025-01-31T22:15:00+03:00</updated><id>https://crypto137.github.io/MHServerEmu/blog/2025/01/31/progress-report-january-2025</id><content type="html" xml:base="https://crypto137.github.io/MHServerEmu/blog/2025/01/31/progress-report-january-2025.html"><![CDATA[<!--more-->

<p><img src="/MHServerEmu/assets/blog/progress-report/2025-01/header.jpg" alt="MHServerEmu Progress Report - January 2025" /></p>

<p>The first month of 2025 is almost over, and we have some MHServerEmu progress to share.</p>

<h2 id="conditions">Conditions</h2>

<p><a href="/MHServerEmu/blog/2024/12/30/progress-report-december-2024.html">By the end of last month</a> we had the skeleton for the condition system working, and it was time to build upon it. Two major things that were still missing were <em>pausing</em> and <em>disabling</em>.</p>

<p>Pausing makes it possible for a condition with finite duration to function as an infinite condition for as long as the pause is in effect. Pausing is allowed only for conditions flagged as <code class="language-plaintext highlighter-rouge">IsBoost</code> if one of the following criteria is met:</p>

<ul>
  <li>
    <p>The owner of the condition is currently in a region flagged as <code class="language-plaintext highlighter-rouge">PausesBoostConditions</code> (e.g. hub regions).</p>
  </li>
  <li>
    <p>The owner of the condition exits the world, such as during a loading screen.</p>
  </li>
  <li>
    <p>The global live tuning variable <code class="language-plaintext highlighter-rouge">eGTV_BoostTimersRunning</code> is set to false.</p>
  </li>
</ul>

<p>One important thing to note is that pausing a condition affects only its duration. Its effect remains applied even if it is “paused”.</p>

<p>Separate from pausing is disabling a condition. When a condition is disabled, it remains attached to its owner, but its effects are removed until it is enabled again. Conditions are disabled by setting the <code class="language-plaintext highlighter-rouge">DisablePowerEffects</code> property on the owner, which can be done by applying another condition. This system, combined with power activations triggered by power events and procs, functions essentially as a scripting language that can affect the state of the owner in different ways. For example, various special resource behaviors, like Hulk’s Anger or Punisher’s Ammo, use this functionality to enable and disable primary resource regeneration and decay depending on the current combat state.</p>

<p>With these taken care of, the condition system is now in a mostly functional state.</p>

<h2 id="resources">Resources</h2>

<p>The original plan was to merge the remaining power subsystems one by one as they were ready. However, while I was working on implementing Spirit, which is the simplest primary resource that many of the heroes use, it became apparent that on its own it will leave many other characters that rely on special behaviors in a semi-broken state. After getting some feedback from the players on our Discord server, I decided to batch these systems into a larger update of the power system, and this is what I have spent the majority of my time working on this month.</p>

<p>Resources in Marvel Heroes come in two flavors: primary and secondary. Each resource has an associated <code class="language-plaintext highlighter-rouge">ManaBehaviorPrototype</code> that defines its behavior, such as whether it starts empty or depletes on death. Avatars are the only entities that use resources; enemies, team-ups, and other AI-controlled characters do not have any.</p>

<p>Primary resources are referred to internally as <code class="language-plaintext highlighter-rouge">Endurance</code>, and all heroes have them. A hero can technically have multiple primary resources which are distinguished by the <code class="language-plaintext highlighter-rouge">ManaType</code> parameter, but in practice the only hero that uses this is Doctor Doom. The default primary resource is Spirit, which is essentially just mana. Special primary resource behaviors are implemented via the scripting-like system of powers and conditions mentioned in the previous section. Primary resources are displayed in the UI as the “globe” on the right side of the action bar:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-01/primary-resources.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-01/primary-resources.jpg" alt="Primary Resources" /></a></p>

<p>Secondary resources are optional, and they can represent various things, from combo points to ants, depending on the hero, with no default behavior. They can have pips, which are basically breakpoints for spending them and activating effects. Secondary resources are represented by horizontal bars above the power slots:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-01/secondary-resources.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-01/secondary-resources.jpg" alt="Secondary Resources" /></a></p>

<p>Implementing this system on its own was not particularly difficult, and we could have done it a long time ago. The real roadblocker until now has been getting all the other things that interact with it working, and we have made significant progress on that front as well.</p>

<h2 id="procs">Procs</h2>

<p><a href="/MHServerEmu/blog/2024/07/31/progress-report-july-2024.html">Back in July of last year</a> when we first got the power system working, I talked about how  in many cases powers are actually implemented as “combo” chains. Here is a quick recap: when a more complex effect is needed, it is done by activating subsequent powers when various <em>power events</em> happen, such as a power’s animation reaching its contact frame. <em>Procs</em> are essentially an extension of this system, except their only action is activation of a specific proc power (which in turn can do more varied actions), and their triggers are not limited to stages of the power pipeline.</p>

<p>In total there are 74 proc triggers as of version 1.52. Some of them are more generic, like <code class="language-plaintext highlighter-rouge">OnPowerHit</code> and <code class="language-plaintext highlighter-rouge">OnGotDamaged</code>, while others are more specialized, such as <code class="language-plaintext highlighter-rouge">OnSecondaryResourcePipGain</code>, <code class="language-plaintext highlighter-rouge">OnSkillshotReflect</code>, and <code class="language-plaintext highlighter-rouge">OnControlledEntityReleased</code>. Procs are assigned to entities using one of three proc properties: <code class="language-plaintext highlighter-rouge">Proc</code>, <code class="language-plaintext highlighter-rouge">ProcKeyword</code>, and <code class="language-plaintext highlighter-rouge">ProcNotKeyword</code>. In many cases these properties come from conditions applied by passive powers. Proc properties are parameterized by their trigger, a reference to the power they activate, and an optional parameter:</p>

<ul>
  <li>
    <p>For regular procs the parameter is a threshold value (e.g. an <code class="language-plaintext highlighter-rouge">OnEnduranceBelow</code> proc with a threshold value of <code class="language-plaintext highlighter-rouge">50</code> is going to activate when the owner’s primary resource drops below 50%).</p>
  </li>
  <li>
    <p>For <code class="language-plaintext highlighter-rouge">ProcKeyword</code> and <code class="language-plaintext highlighter-rouge">ProcNotKeyword</code> the parameter is a reference to a keyword prototype, with the former requiring something to have the keyword, and the latter being the opposite and requiring something to <em>not</em> have the keyword.</p>
  </li>
</ul>

<p>The value of the property represents the trigger chance of the proc. In some cases this chance is multiplied by the <code class="language-plaintext highlighter-rouge">OnHitProcChanceMultiplier</code> value taken from the prototype of the power that triggered the proc. When this multiplier is applied, the <code class="language-plaintext highlighter-rouge">ProcChanceMultiplierBehaviorType</code> that is also defined in the power prototype is taken into account. Possible values include:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">AllowProcChanceMultiplier</code> - applies the multiplier normally.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">IgnoreProcChanceMultiplier</code> - the multiplier is not applied.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">IgnoreProcChanceMultiplierUnlessZero</code> - the multiplier is used only to disable on hit procs completely.</p>
  </li>
</ul>

<p>The purpose of these multipliers is to limit the proc activation rate for fast hitting powers, which would trigger procs too often without them.</p>

<p>Here are some examples of proc properties:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ProcProp[OnAnyHit][CosmicItemSkyBeamAoe][0][0] = 0.05f</code></p>

    <ul>
      <li>This proc is activated by the <code class="language-plaintext highlighter-rouge">OnAnyHit</code> trigger, and the activation chance is 5%. The power this proc is going to activate is <code class="language-plaintext highlighter-rouge">CosmicItemSkyBeamAoe</code>. This is a proc assigned by one of the cosmic affixes found on gear.</li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ProcKeywordProp[OnPowerHit][FuryGainProcEffect][Fury][0] = 1.0f</code></p>

    <ul>
      <li>This proc is activated by the <code class="language-plaintext highlighter-rouge">OnPowerHit</code> trigger, it requires the triggering power to have the <code class="language-plaintext highlighter-rouge">Fury</code> keyword, and the activation chance is 100%. The power this proc is going to activate is <code class="language-plaintext highlighter-rouge">FuryGainProcEffect</code>. This is a proc assigned by one of Wolverine’s passive powers, and it’s his main way of restoring his primary resource.</li>
    </ul>
  </li>
</ul>

<p>The big challenge with implementing procs has been the sheer amount of code needed to handle all the various triggers. The code itself is very boilerplate and involves doing checks and filling out <code class="language-plaintext highlighter-rouge">PowerActivationSettings</code> instances, but the behavior of various triggers is subtly different enough to not be able to just reuse all the code.</p>

<p>After a few weeks of work though it was done, and now we have a fully-featured proc system. There is just one more gear needed to get this whole mechanism moving.</p>

<h2 id="tickers">Tickers</h2>

<p>Some properties apply effects to the entities they are assigned to periodically. Most of these involve dealing damage over time (DoT), healing over time (HoT), and applying resource changes over time. For this the game uses a class called <code class="language-plaintext highlighter-rouge">PropertyTicker</code>.</p>

<p>A ticker is essentially just a timer that applies properties at certain update intervals. What makes it special is how it interacts with conditions and procs: a proc can activate a power that will enable or disable a condition, which in turn will enable or disable its ticker. This is how resources like Hulk’s Anger works: entering and exiting combat triggers procs that turn Anger regeneration and decay on or off.</p>

<p>At the time of writing this the timer aspect of tickers has been implemented, and what remains is to expand the power results calculation pipeline to work with over time properties. As part of this I will also be doing a pass on how damage is calculated in general so that we can implement various damage mitigation effects. Overall I expect this to take a week or two, and after that this batch of power changes should be ready for testing in nightly builds.</p>

<h2 id="population-improvements">Population Improvements</h2>

<p>While I was busy with powers, Alex has also been hard at work improving some systems that needed more attention. Among them is the population system, which still had some marker-related issues that needed to be fixed.</p>

<p>The basic idea behind the population system is that the game has limited resources for spawning, and the <code class="language-plaintext highlighter-rouge">PopulationManager</code> class distributes these resources among various requests that often exceed the available resources. One example of such resource is markers, which are spawn points hand placed by game designers on various cells. There are many examples in the game when there are fewer markers than entities that try to spawn on them, and the population system has to handle this.</p>

<p>One issue we had was how mission requests for markers were handled. We had some instances where markers were partially used by different missions, and as a result none of them had enough enemies to complete them. To deal with this, Alex has implemented an “all or nothing” style distribution system for missions where markers get reserved in chunks, and if there aren’t enough markers, the mission will wait until it is its time to shine. Implementing this allowed us to deal with population issues in regions like Midtown Patrol.</p>

<p>Another problem was related to how spawn requests were prioritized. Some requests are flagged as “critical”, which means they need to spawn before everything else. When this priority is not taken into account, unexpected semi-random behavior can occur, like missions becoming incompletable. Due to a small oversight this priority was not taken into account in some cases, and this has now been fixed.</p>

<p>And here is a fun fact about marker conflicts: we just found a bug related to them that existed in the original game. In the Castle Doom terminal during the fight with Doctor Doom cutscenes are supposed to be playing on phase transitions, just like they do in story mode. However, because the terminal has two conflicting missions (<code class="language-plaintext highlighter-rouge">G09DoctorDoomDailyEndgame</code> and <code class="language-plaintext highlighter-rouge">DoomFightDailyKismetControl</code>), the necessary hotspots that trigger the cutscenes fail to spawn at all! This bug is now fixed by disabling one of the missions via live tuning, but you can still get the authentic buggy experience if you prefer it by turning the tuning off.</p>

<h2 id="modding">Modding</h2>

<p>In addition to polishing existing systems, in January Alex has also started some preliminary work on modding tools for modifying the client as a side project. While it is still very early, there have been some successful experiments with simple texture swaps.</p>

<p>The tool he is currently working on is called <em>MH Texture Manager</em>, and it is going to allow potential mod developers to browse and replace various textures. Here is what it looks like right now:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-01/texture-manager.png"><img src="/MHServerEmu/assets/blog/progress-report/2025-01/texture-manager.png" alt="MH Texture Manager" /></a></p>

<p>And here is what it is like in-game:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2025-01/texture-swap-example.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2025-01/texture-swap-example.jpg" alt="Texture Swap Example" /></a></p>

<p>Please keep in mind that this is purely experimental at this stage, and the scope of the MHServerEmu project does not include creating any new custom content. You can follow Alex’s progress with modding tools on <a href="https://github.com/AlexBond2/MHTextureManager">GitHub</a>.</p>

<hr />

<p>Back to the coding mines for us. See you all next time!</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">MHServerEmu Progress Report: December 2024</title><link href="https://crypto137.github.io/MHServerEmu/blog/2024/12/30/progress-report-december-2024.html" rel="alternate" type="text/html" title="MHServerEmu Progress Report: December 2024" /><published>2024-12-30T17:45:00+03:00</published><updated>2024-12-30T17:45:00+03:00</updated><id>https://crypto137.github.io/MHServerEmu/blog/2024/12/30/progress-report-december-2024</id><content type="html" xml:base="https://crypto137.github.io/MHServerEmu/blog/2024/12/30/progress-report-december-2024.html"><![CDATA[<!--more-->

<p><img src="/MHServerEmu/assets/blog/progress-report/2024-12/header.jpg" alt="MHServerEmu Progress Report - December 2024" /></p>

<p>Another year is almost over, and we are steadily approaching our goal of fully restoring Marvel Heroes.</p>

<h2 id="conditions">Conditions</h2>

<p>With version 0.4.0’s release the game is now in a state that most people would probably consider “playable”. However, our work is still far from over, and now we need to focus on restoring the remaining depth of various systems.</p>

<p>In December it was time for me to go back to work on powers, which is something many people have been anxiously waiting for while I was busy with other features. We already had the basic framework for them in place since <a href="/MHServerEmu/blog/2024/07/31/progress-report-july-2024.html">July</a>, and more backend work was done in <a href="/MHServerEmu/blog/2024/09/30/progress-report-september-2024.html">September</a> while I was implementing dynamic combat levels, but all of that was just the tip of the power iceberg that we now need to tackle head-on:</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-12/power-iceberg.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2024-12/power-iceberg.jpg" alt="The Power Iceberg" /></a></p>

<p>The next big step for powers was implementing <em>conditions</em>, which is the term the game uses internally for various buffs and debuffs that can be applied to world entities. Here is an overview of how it works.</p>

<p>Each <code class="language-plaintext highlighter-rouge">WorldEntity</code> instance has a <code class="language-plaintext highlighter-rouge">ConditionCollection</code> that contains <code class="language-plaintext highlighter-rouge">Condition</code> instances that have been applied to it. Conditions are applied as a result of various powers and can come from two main sources: a standalone <code class="language-plaintext highlighter-rouge">ConditionPrototype</code>, or a “mix-in” prototype within the <code class="language-plaintext highlighter-rouge">PowerPrototype</code> of the power that applied the condition. Generally speaking, standalone conditions are conditions that can be applied by different powers, such as boosts, while mix-in conditions are exclusive to a single power. The vast majority of conditions come from power mix-ins.</p>

<p>At their core <code class="language-plaintext highlighter-rouge">Condition</code> instances are essentially <code class="language-plaintext highlighter-rouge">PropertyCollection</code> instances with extra metadata that determine parameters like duration, pause state, and prototype overrides. When a <code class="language-plaintext highlighter-rouge">Condition</code> is added to a <code class="language-plaintext highlighter-rouge">ConditionCollection</code>, it is <em>accrued</em> to the collection’s owner, which includes attaching the condition’s properties to the owner’s in the same way as, for example, when you equip an item. Many conditions also affect the appearance of the entity they are applied to with various visual effects and animation changes.</p>

<p>Condition properties can cause a wide variety of effects. While some are simple stat modifiers, others are used to flag entities with <em>status effects</em>, like stuns and knockups. A whole separate category is over time properties, which are applied continuously using <em>tickers</em>. This is how things like damage over time (DoT) and regeneration effects are implemented.</p>

<p>If a condition’s metadata contains a valid duration, its end is scheduled when it is added. Some conditions do not have a duration, which means they have to be removed by an external event, like a power ending. A good example of this are bounce powers where the avatar is the one bouncing, like the ones Ant-Man and Daredevil have: when the bounce power activates, a condition is applied that makes the avatar’s mesh invisible and prevents movement. This condition is removed only when the bounce power ends, the timing of which varies depending on the distance between bounce targets. Another example is passive powers: they are powers that are automatically activated when an entity becomes simulated, which results in a condition that stays on for as long as the passive power is assigned. There are also conditions that last for as long as some movement is happening, like knockback conditions that prevent entities from moving themselves until the forced knockback movement ends.</p>

<p>Conditions can have various <em>stacking behaviors</em> defined in their prototypes, which restrict how multiple instances of the same condition can be applied to an entity. The main defining feature of a <code class="language-plaintext highlighter-rouge">StackingBehaviorPrototype</code> is its <code class="language-plaintext highlighter-rouge">ApplicationStyle</code>, which can have one of six possible values:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">DontRefresh</code>: condition instances are applied separately from one another.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Refresh</code>: applying new condition instances resets the duration of other instances that have already been applied.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Recreate</code>: applying new condition instances removes all other instances.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">MatchDuration</code>: the duration of the newly applied instances match the longest remaining duration out of all instances that have already been applied.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">SingleStackAddDuration</code>: only a single condition instance can be applied, and additional applications extend the duration of the applied instance.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">MultiStackAddDuration</code>: a combination of <code class="language-plaintext highlighter-rouge">Refresh</code> and <code class="language-plaintext highlighter-rouge">SingleStackAddDuration</code>, which results in the duration of other instances that have already been applied being refreshed and extended.</p>
  </li>
</ul>

<p>Condition instances are grouped into stacks using a structure called <code class="language-plaintext highlighter-rouge">StackId</code>, which consists of a prototype reference and a creator id. Based on the <code class="language-plaintext highlighter-rouge">StackingBehaviorPrototype</code>, in some cases conditions applied by different powers or created by different owners can still belong to the same stack. Finally, the stacking behavior determines how many instances should be applied per application, as well as how many instances in total can be applied using the same <code class="language-plaintext highlighter-rouge">StackId</code>.</p>

<p>There are some unique quirks related to condition persistence. Because only world entities can have conditions applied to them, and the player entity representing the account is not a world entity, account-wide conditions, like boosts, are “faked” by copying them when you switch between avatars. Conditions also need to be carefully serialized and deserialized, because many conditions are not supposed to run out when you are offline.</p>

<p>As of the time of writing this, the core implementation of the condition system is available for testing in nightly work-in-progress builds of version 0.5.0. Some additional features still need to be implemented, including pausing conditions in hub regions and property ticking. Tickers specifically are going to have a huge effect on the entire combat, because they are also going to allow us to implement various primary and secondary resources used by different heroes.</p>

<h2 id="bounce-powers">Bounce Powers</h2>

<p>As alluded to above, bounce powers are also now functional. This includes targeted powers that bounce around, like Storm’s Chain Lightning, bouncing projectiles, such as Captain America’s Shield Bounce, and powers where the avatar is bouncing in a chain of attacks, like Daredevil’s Street Sweeper. What is interesting about all of these is that everything about them is smoke and mirrors, <em>there is no actual movement happening</em>.</p>

<p>When a power is applied, its properties and the properties of its owner are snapshotted and recorded into a <code class="language-plaintext highlighter-rouge">PowerPayload</code> object. Some of these properties determine the “bounciness” of the power: <code class="language-plaintext highlighter-rouge">BounceCountPayload</code>, <code class="language-plaintext highlighter-rouge">BounceRangePayload</code>, and <code class="language-plaintext highlighter-rouge">BounceSpeedPayload</code>. When the payload is delivered and its effects are applied to its target, the game checks the remaining bounce count, and if it is higher than zero, it “bounces” the payload to another target, which simply changes its target id and schedules a new delivery after a delay. This delay is calculated from the payload’s bounce range and speed.</p>

<p>All the visuals of an object physically bouncing between targets is completely faked by the client. Every time a bounce delay is calculated, the server informs the client about it using the following message:</p>

<div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">NetMessagePowerBounce</span> <span class="p">{</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">idPowerUser</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">idLastTarget</span>    <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">required</span> <span class="n">NetStructPoint3</span>    <span class="na">lastTargetPosition</span>    <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">idNewTarget</span>    <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">powerPrototypeId</span>    <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">userOriginalAssetId</span>    <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">uint64</span>    <span class="na">userCurrentAssetId</span>    <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">float</span>    <span class="na">projectileSpeed</span>    <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
    <span class="k">required</span> <span class="kt">int32</span>    <span class="na">fxRandomSeed</span>    <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The client uses data from this message to fake all the movement.</p>

<p>One last piece of the puzzle is how bounce targets are determined. When a bouncing payload’s target is set, its id is recorded as a <code class="language-plaintext highlighter-rouge">PowerPreviousTargetsID</code> property: depending on the power, these properties are later used to deprioritize or even completely avoid targets (if the <code class="language-plaintext highlighter-rouge">BounceCanRepeatTarget</code> flag is not set on the payload). When the payload hits a target, the game scans all entities in a radius around it, skipping those that have the <code class="language-plaintext highlighter-rouge">InvalidBounceTarget</code> property or are not valid targets for a particular power for other reasons. The most suitable target is then picked, taking into account distance, whether the entity has already been hit by this payload, and whether it is an enemy or a destructible environment object. The highest priority is given to closest enemies that have not been hit.</p>

<p>The bouncing continues until the payload either runs out of bounces or fails to find a new valid target. When the bouncing ends, the client is notified of it via one final <code class="language-plaintext highlighter-rouge">NetMessagePowerBounce</code>, which it uses to play the finishing visual effect or animation (e.g. a weapon returning to its owner). And with all of that we have bouncing:</p>

<div><video controls="" width="100%" /><source src="/MHServerEmu/assets/blog/progress-report/2024-12/bounce.webm" type="video/webm" /></div>

<p>This is a relatively minor addition in the grand scheme of things, but it made many powers across the entire hero roster usable.</p>

<h2 id="achievements-and-leaderboards">Achievements and Leaderboards</h2>

<p>While I was busy working on powers <del>and totally not grinding in Path of Exile 2</del>, Alex was hard at work implementing achievements and leaderboards, which utilize event-based tracking similar to missions, in which he has become quite an expert in it over the past months.</p>

<p>One peculiar thing about how achievements and leaderboards work is how their static data is delivered. The logical appoach would have been to have achievements be more rigid and rely on client-side data, while doing the leaderboards in a more dynamic way that relies on server data, but it is actually the other way around. The entire achievement database is sent from the server to the client on login, while all the leaderboards are hardcoded into the client and cannot be changed without a patch. Thankfully, we have a dump of the achievement database for version 1.52 we extracted from captured packets, which gave us a mostly complete dataset for this version. However, unfortunately, it is the only one we have, meaning that supporting achievements for other versions, like 1.48, is going to require pretty extensive reconstruction efforts using secondary sources, such as archived versions of the good old Marvel Heroes Compendium by Mjoll. We may have to build some custom tools to make the reconstruction process easier, but with enough time and effort this is a problem that can be solved. On the bright side, this also means that custom achievements will be relatively easy to implement.</p>

<p>Achievements are now functional and available for testing in nightly 0.5.0 builds. Some achievements may not be obtainable right now due to certain gameplay features not being implemented, but the overall achievement system is working, and more things will be properly tracked as they are done. The tracking for achievements also includes retroactive granting for some achievements, like reaching specific level thresholds and collecting thematic sets of items.</p>

<p><a href="/MHServerEmu/assets/blog/progress-report/2024-12/achievements.jpg"><img src="/MHServerEmu/assets/blog/progress-report/2024-12/achievements.jpg" alt="Achievements" /></a></p>

<p>As I am writing this, Alex has now turned his attention to leaderboards, which proved to actually be a tougher nut to crack. One reason for this is that leaderboards have a lot of unfinished functionality, like guild leaderboards that were never used. They also required a pretty significant amount of backend work, mainly because leaderboards have instances that run in real time, with expired instances being archived in the database in case somebody decides to claim their rewards at some point in the future. All of this is in addition to tracking and reward systems similar to missions and achievements.</p>

<p>Although it was more laborious than expected, an early version of leaderboards is now being tested, and if things go well it will be merged and added to nightly builds relatively soon.</p>

<hr />

<p>That is all we have for you this year. See you all in the next one!</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry></feed>